[String]
CharLower
CharLowerBuff
CharNext
CharNextExA
CharPrev
CharPrevExA
CharToOem
CharToOemBuff
CharUpper
CharUpperBuff
IsCharAlpha
IsCharAlphaNumeric
IsCharLower
IsCharUpper
LoadString
lstrcat
lstrcmp
lstrcmpi
lstrcpy
lstrcpyn
lstrlen
OemToChar
OemToCharBuff
wsprintf
wvsprintf

[Synchronization]
<Asynchronous>
APCProc;An application-defined callback function used with the QueueUserAPC function.
GetOverlappedResult;Retrieves the results of an overlapped operation.
GetOverlappedResultEx;Retrieves the results of an overlapped operation within a specified timeout interval.
QueueUserAPC;Adds a user-mode asynchronous procedure call (APC) object to the APC queue of the specified thread.

<Condition variable and SRW lock>
AcquireSRWLockExclusive;Acquires a slim reader/writer (SRW) lock in exclusive mode.
AcquireSRWLockShared;Acquires a slim reader/writer (SRW) lock in shared mode.
InitializeConditionVariable;Initializes a condition variable.
InitializeSRWLock;Initialize a slim reader/writer (SRW) lock.
ReleaseSRWLockExclusive;Releases a slim reader/writer (SRW) lock that was acquired in exclusive mode.
ReleaseSRWLockShared;Releases a slim reader/writer (SRW) lock that was acquired in shared mode.
SleepConditionVariableCS;Sleeps on the specified condition variable and releases the specified critical section as an atomic operation.
SleepConditionVariableSRW;Sleeps on the specified condition variable and releases the specified lock as an atomic operation.
TryAcquireSRWLockExclusive;Attempts to acquire a slim reader/writer (SRW) lock in exclusive mode. If the call is successful, the calling thread takes ownership of the lock.
TryAcquireSRWLockShared;Attempts to acquire a slim reader/writer (SRW) lock in shared mode. If the call is successful, the calling thread takes ownership of the lock.
WakeAllConditionVariable;Wake all threads waiting on the specified condition variable.
WakeConditionVariable;Wake a single thread waiting on the specified condition variable.

<Critical section>
DeleteCriticalSection;Releases all resources used by an unowned critical section object.
EnterCriticalSection;Waits for ownership of the specified critical section object.
InitializeCriticalSection;Initializes a critical section object.
InitializeCriticalSectionAndSpinCount;Initializes a critical section object and sets the spin count for the critical section.
InitializeCriticalSectionEx;Initializes a critical section object with a spin count and optional flags.
LeaveCriticalSection;Releases ownership of the specified critical section object.
SetCriticalSectionSpinCount;Sets the spin count for the specified critical section.
TryEnterCriticalSection;Attempts to enter a critical section without blocking.

<Event>
CreateEvent;Creates or opens a named or unnamed event object.
CreateEventEx;Creates or opens a named or unnamed event object and returns a handle to the object.
OpenEvent;Opens an existing named event object.
PulseEvent;Sets the specified event object to the signaled state and then resets it to the nonsignaled state after releasing the appropriate number of waiting threads.
ResetEvent;Sets the specified event object to the nonsignaled state.
SetEvent;Sets the specified event object to the signaled state.

<One-time initialization>
InitOnceBeginInitialize;Begins one-time initialization.
InitOnceComplete;Completes one-time initialization.
InitOnceExecuteOnce;Executes the specified function successfully one time. No other threads that specify the same one-time initialization structure can execute this function while it is being executed by the current thread.
InitOnceInitialize;Initializes a one-time initialization structure.

<Interlocked>
InterlockedAdd;Performs an atomic addition operation on the specified LONG values.
InterlockedAddAcquire;Performs an atomic addition operation on the specified LONG values. The operation is performed with acquire memory ordering semantics.
InterlockedAddRelease;Performs an atomic addition operation on the specified LONG values. The operation is performed with release memory ordering semantics.
InterlockedAddNoFence;Performs an atomic addition operation on the specified LONG values. The operation is performed atomically, but without using memory barriers
InterlockedAdd64;Performs an atomic addition operation on the specified LONGLONG values.
InterlockedAddAcquire64;Performs an atomic addition operation on the specified LONGLONG values. The operation is performed with acquire memory ordering semantics.
InterlockedAddRelease64;Performs an atomic addition operation on the specified LONGLONG values. The operation is performed with release memory ordering semantics.
InterlockedAddNoFence64;Performs an atomic addition operation on the specified LONGLONG values. The operation is performed atomically, but without using memory barriers
InterlockedAnd;Performs an atomic AND operation on the specified LONG values.
InterlockedAndAcquire;Performs an atomic AND operation on the specified LONG values. The operation is performed with acquire memory ordering semantics.
InterlockedAndRelease;Performs an atomic AND operation on the specified LONG values. The operation is performed with release memory ordering semantics.
InterlockedAndNoFence;Performs an atomic AND operation on the specified LONG values. The operation is performed atomically, but without using memory barriers
InterlockedAnd8;Performs an atomic AND operation on the specified char values.
InterlockedAnd8Acquire;Performs an atomic AND operation on the specified char values. The operation is performed with acquire memory ordering semantics.
InterlockedAnd8Release;Performs an atomic AND operation on the specified char values. The operation is performed with release memory ordering semantics.
InterlockedAnd8NoFence;Performs an atomic AND operation on the specified char values. The operation is performed atomically, but without using memory barriers
InterlockedAnd16;Performs an atomic AND operation on the specified SHORT values.
InterlockedAnd16Acquire;Performs an atomic AND operation on the specified SHORT values. The operation is performed with acquire memory ordering semantics.
InterlockedAnd16Release;Performs an atomic AND operation on the specified SHORT values. The operation is performed with release memory ordering semantics.
InterlockedAnd16NoFence;Performs an atomic AND operation on the specified SHORT values. The operation is performed atomically, but without using memory barriers
InterlockedAnd64;Performs an atomic AND operation on the specified LONGLONG values.
InterlockedAnd64Acquire;Performs an atomic AND operation on the specified LONGLONG values. The operation is performed with acquire memory ordering semantics.
InterlockedAnd64Release;Performs an atomic AND operation on the specified LONGLONG values. The operation is performed with release memory ordering semantics.
InterlockedAnd64NoFence;Performs an atomic AND operation on the specified LONGLONG values. The operation is performed atomically, but without using memory barriers
InterlockedBitTestAndComplement;Tests the specified bit of the specified LONG value and complements it.
InterlockedBitTestAndComplement64;Tests the specified bit of the specified LONG64 value and complements it. The operation is atomic
InterlockedBitTestAndResetAcquire;Tests the specified bit of the specified LONG value and sets it to 0. The operation is atomic, and it is performed with acquire memory ordering semantics
InterlockedBitTestAndResetRelease;Tests the specified bit of the specified LONG value and sets it to 0. The operation is atomic, and it is performed using memory release semantics
InterlockedBitTestAndSetAcquire;Tests the specified bit of the specified LONG value and sets it to 1. The operation is atomic, and it is performed with acquire memory ordering semantics
InterlockedBitTestAndSetRelease;Tests the specified bit of the specified LONG value and sets it to 1. The operation is atomic, and it is performed with release memory ordering semantics
InterlockedBitTestAndReset;Tests the specified bit of the specified LONG value and sets it to 0.
InterlockedBitTestAndReset64;Tests the specified bit of the specified LONG64 value and sets it to 0.
InterlockedBitTestAndSet;Tests the specified bit of the specified LONG value and sets it to 1.
InterlockedBitTestAndSet64;Tests the specified bit of the specified LONG64 value and sets it to 1.
InterlockedCompare64Exchange128;Performs an atomic compare-and-exchange operation on the specified values. The function compares the specified 64-bit values and exchanges with the specified 128-bit value based on the outcome of the comparison.
InterlockedCompare64ExchangeAcquire128;Performs an atomic compare-and-exchange operation on the specified values. The function compares the specified 64-bit values and exchanges with the specified 128-bit value based on the outcome of the comparison. The operation is performed with acquire memory ordering semantics.
InterlockedCompare64ExchangeRelease128;Performs an atomic compare-and-exchange operation on the specified values. The function compares the specified 64-bit values and exchanges with the specified 128-bit value based on the outcome of the comparison. The operation is performed with release memory ordering semantics.
InterlockedCompareExchange;Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified 32-bit values and exchanges with another 32-bit value based on the outcome of the comparison.
InterlockedCompareExchangeAcquire;Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified 32-bit values and exchanges with another 32-bit value based on the outcome of the comparison. The operation is performed with acquire memory ordering semantics.
InterlockedCompareExchangeRelease;Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified 32-bit values and exchanges with another 32-bit value based on the outcome of the comparison. The exchange is performed with release memory ordering semantics.
InterlockedCompareExchangeNoFence;Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified 32-bit values and exchanges with another 32-bit value based on the outcome of the comparison. The operation is performed atomically, but without using memory barriers
InterlockedCompareExchange64;Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified 64-bit values and exchanges with another 64-bit value based on the outcome of the comparison.
InterlockedCompareExchangeAcquire64;Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified 64-bit values and exchanges with another 64-bit value based on the outcome of the comparison. The exchange is performed with acquire memory ordering semantics.
InterlockedCompareExchangeRelease64;Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified 64-bit values and exchanges with another 64-bit value based on the outcome of the comparison. The exchange is performed with release memory ordering semantics.
InterlockedCompareExchangeNoFence64;Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified 64-bit values and exchanges with another 64-bit value based on the outcome of the comparison. The operation is performed atomically, but without using memory barriers
InterlockedCompareExchange16;Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified 16-bit values and exchanges with another 16-bit value based on the outcome of the comparison
InterlockedCompareExchange16Acquire;Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified 16-bit values and exchanges with another 16-bit value based on the outcome of the comparison. The operation is performed with acquire memory ordering semantics
InterlockedCompareExchange16Release;Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified 16-bit values and exchanges with another 16-bit value based on the outcome of the comparison. The exchange is performed with release memory ordering semantics
InterlockedCompareExchange16NoFence;Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified 16-bit values and exchanges with another 16-bit value based on the outcome of the comparison. The operation is performed atomically, but without using memory barriers
InterlockedCompareExchange128;Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified 128-bit values and exchanges with another 128-bit value based on the outcome of the comparison
InterlockedCompareExchangePointer;Performs an atomic compare-and-exchange operation on the specified pointer values. The function compares two specified pointer values and exchanges with another pointer value based on the outcome of the comparison.
InterlockedCompareExchangePointerAcquire;Performs an atomic compare-and-exchange operation on the specified pointer values. The function compares two specified pointer values and exchanges with another pointer value based on the outcome of the comparison. The operation is performed with acquire memory ordering semantics.
InterlockedCompareExchangePointerRelease;Performs an atomic compare-and-exchange operation on the specified pointer values. The function compares two specified pointer values and exchanges with another pointer value based on the outcome of the comparison. The operation is performed with release memory ordering semantics.
InterlockedCompareExchangePointerNoFence;Performs an atomic compare-and-exchange operation on the specified values. The function compares two specified pointer values and exchanges with another pointer value based on the outcome of the comparison. The operation is performed atomically, but without using memory barriers
InterlockedDecrement;Decrements (decreases by one) the value of the specified 32-bit variable as an atomic operation.
InterlockedDecrementAcquire;Decrements (decreases by one) the value of the specified 32-bit variable as an atomic operation. The operation is performed with acquire memory ordering semantics.
InterlockedDecrementRelease;Decrements (decreases by one) the value of the specified 32-bit variable as an atomic operation. The operation is performed with release memory ordering semantics.
InterlockedDecrementNoFence;Decrements (decreases by one) the value of the specified 32-bit variable as an atomic operation. The operation is performed atomically, but without using memory barriers
InterlockedDecrement16;Decrements (decreases by one) the value of the specified 16-bit variable as an atomic operation
InterlockedDecrement16Acquire;Decrements (decreases by one) the value of the specified 16-bit variable as an atomic operation. The operation is performed with acquire memory ordering semantics
InterlockedDecrement16Release;Decrements (decreases by one) the value of the specified 16-bit variable as an atomic operation. The operation is performed with release memory ordering semantics
InterlockedDecrement16NoFence;Decrements (decreases by one) the value of the specified 16-bit variable as an atomic operation. The operation is performed atomically, but without using memory barriers
InterlockedDecrement64;Decrements (decreases by one) the value of the specified 64-bit variable as an atomic operation.
InterlockedDecrementAcquire64;Decrements (decreases by one) the value of the specified 64-bit variable as an atomic operation. The operation is performed with acquire memory ordering semantics.
InterlockedDecrementRelease64;Decrements (decreases by one) the value of the specified 64-bit variable as an atomic operation. The operation is performed with release memory ordering semantics.
InterlockedDecrementNoFence64;Decrements (decreases by one) the value of the specified 64-bit variable as an atomic operation. The operation is performed atomically, but without using memory barriers
InterlockedExchange;Sets a 32-bit variable to the specified value as an atomic operation.
InterlockedExchangeAcquire;Sets a 32-bit variable to the specified value as an atomic operation. The operation is performed with acquire memory ordering semantics.
InterlockedExchangeNoFence;Sets a 64-bit variable to the specified value as an atomic operation. The operation is performed atomically, but without using memory barriers
InterlockedExchange8;Sets an 8-bit variable to the specified value as an atomic operation
InterlockedExchange16;Sets a 16-bit variable to the specified value as an atomic operation.
InterlockedExchange16Acquire;Sets a 16-bit variable to the specified value as an atomic operation. The operation is performed using acquire memory ordering semantics
InterlockedExchange16NoFence;Sets a 16-bit variable to the specified value as an atomic operation. The operation is performed atomically, but without using memory barriers
InterlockedExchange64;Sets a 64-bit variable to the specified value as an atomic operation.
InterlockedExchangeAcquire64;Sets a 32-bit variable to the specified value as an atomic operation. The operation is performed with acquire memory ordering semantics.
InterlockedExchangeNoFence64;Sets a 64-bit variable to the specified value as an atomic operation. The operation is performed atomically, but without using memory barriers
InterlockedExchangePointer;Atomically exchanges a pair of pointer values.
InterlockedExchangePointerAcquire;Atomically exchanges a pair of pointer values. The operation is performed with acquire memory ordering semantics.
InterlockedExchangePointerNoFence;Atomically exchanges a pair of addresses. The operation is performed atomically, but without using memory barriers
InterlockedExchangeSubtract;Performs an atomic subtraction of two values.
InterlockedExchangeAdd;Performs an atomic addition of two 32-bit values.
InterlockedExchangeAddAcquire;Performs an atomic addition of two 32-bit values. The operation is performed with acquire memory ordering semantics.
InterlockedExchangeAddRelease;Performs an atomic addition of two 32-bit values. The operation is performed with release memory ordering semantics.
InterlockedExchangeAddNoFence;Performs an atomic addition of two 32-bit values. The operation is performed atomically, but without using memory barriers
InterlockedExchangeAdd64;Performs an atomic addition of two 64-bit values.
InterlockedExchangeAddAcquire64;Performs an atomic addition of two 64-bit values. The operation is performed with acquire memory ordering semantics.
InterlockedExchangeAddRelease64;Performs an atomic addition of two 64-bit values. The operation is performed with release memory ordering semantics.
InterlockedExchangeAddNoFence64;Performs an atomic addition of two 64-bit values. The operation is performed atomically, but without using memory barriers
InterlockedIncrement;Increments (increases by one) the value of the specified 32-bit variable as an atomic operation.
InterlockedIncrementAcquire;Increments (increases by one) the value of the specified 32-bit variable as an atomic operation. The operation is performed using acquire memory ordering semantics.
InterlockedIncrementRelease;Increments (increases by one) the value of the specified 32-bit variable as an atomic operation. The operation is performed using release memory ordering semantics.
InterlockedIncrementNoFence;Increments (increases by one) the value of the specified 32-bit variable as an atomic operation. The operation is performed atomically, but without using memory barriers
InterlockedIncrement16;Increments (increases by one) the value of the specified 16-bit variable as an atomic operation
InterlockedIncrement16Acquire;Increments (increases by one) the value of the specified 16-bit variable as an atomic operation. The operation is performed using acquire memory ordering semantics
InterlockedIncrement16Release;Increments (increases by one) the value of the specified 16-bit variable as an atomic operation. The operation is performed using release memory ordering semantics
InterlockedIncrement16NoFence;Increments (increases by one) the value of the specified 16-bit variable as an atomic operation. The operation is performed atomically, but without using memory barriers
InterlockedIncrement64;Increments (increases by one) the value of the specified 64-bit variable as an atomic operation.
InterlockedIncrementAcquire64;Increments (increases by one) the value of the specified 64-bit variable as an atomic operation. The operation is performed using acquire memory ordering semantics.
InterlockedIncrementRelease64;Increments (increases by one) the value of the specified 64-bit variable as an atomic operation. The operation is performed using release memory ordering semantics.
InterlockedIncrementNoFence64;Increments (increases by one) the value of the specified 64-bit variable as an atomic operation. The operation is performed atomically, but without using memory barriers
InterlockedOr;Performs an atomic OR operation on the specified LONG values.
InterlockedOrAcquire;Performs an atomic OR operation on the specified LONG values. The operation is performed with acquire memory ordering semantics.
InterlockedOrRelease;Performs an atomic OR operation on the specified LONG values. The operation is performed with release memory ordering semantics.
InterlockedOrNoFence;Performs an atomic OR operation on the specified LONG values. The operation is performed atomically, but without using memory barriers
InterlockedOr8;Performs an atomic OR operation on the specified char values.
InterlockedOr8Acquire;Performs an atomic OR operation on the specified char values. The operation is performed with acquire memory ordering semantics.
InterlockedOr8Release;Performs an atomic OR operation on the specified char values. The operation is performed with release memory ordering semantics.
InterlockedOr8NoFence;Performs an atomic OR operation on the specified char values. The operation is performed atomically, but without using memory barriers
InterlockedOr16;Performs an atomic OR operation on the specified SHORT values.
InterlockedOr16Acquire;Performs an atomic OR operation on the specified SHORT values. The operation is performed with acquire memory ordering semantics.
InterlockedOr16Release;Performs an atomic OR operation on the specified SHORT values. The operation is performed with release memory ordering semantics.
InterlockedOr16NoFence;Performs an atomic OR operation on the specified SHORT values. The operation is performed atomically, but without using memory barriers
InterlockedOr64;Performs an atomic OR operation on the specified LONGLONG values.
InterlockedOr64Acquire;Performs an atomic OR operation on the specified LONGLONG values. The operation is performed with acquire memory ordering semantics.
InterlockedOr64Release;Performs an atomic OR operation on the specified LONGLONG values. The operation is performed with release memory ordering semantics.
InterlockedOr64NoFence;Performs an atomic OR operation on the specified LONGLONG values. The operation is performed atomically, but without using memory barriers
InterlockedXor;Performs an atomic XOR operation on the specified LONG values.
InterlockedXorAcquire;Performs an atomic XOR operation on the specified LONG values. The operation is performed with acquire memory ordering semantics.
InterlockedXorRelease;Performs an atomic XOR operation on the specified LONG values. The operation is performed with release memory ordering semantics.
InterlockedXorNoFence;Performs an atomic XOR operation on the specified LONG values. The operation is performed atomically, but without using memory barriers
InterlockedXor8;Performs an atomic XOR operation on the specified char values.
InterlockedXor8Acquire;Performs an atomic XOR operation on the specified char values. The operation is performed with acquire memory ordering semantics.
InterlockedXor8Release;Performs an atomic XOR operation on the specified char values. The operation is performed with release memory ordering semantics.
InterlockedXor8NoFence;Performs an atomic XOR operation on the specified char values. The operation is performed atomically, but without using memory barriers
InterlockedXor16;Performs an atomic XOR operation on the specified SHORT values.
InterlockedXor16Acquire;Performs an atomic XOR operation on the specified SHORT values. The operation is performed with acquire memory ordering semantics.
InterlockedXor16Release;Performs an atomic XOR operation on the specified SHORT values. The operation is performed with release memory ordering semantics.
InterlockedXor16NoFence;Performs an atomic XOR operation on the specified SHORT values. The operation is performed atomically, but without using memory barriers
InterlockedXor64;Performs an atomic XOR operation on the specified LONGLONG values.
InterlockedXor64Acquire;Performs an atomic XOR operation on the specified LONGLONG values. The operation is performed with acquire memory ordering semantics.
InterlockedXor64Release;Performs an atomic XOR operation on the specified LONGLONG values. The operation is performed with release memory ordering semantics.
InterlockedXor64NoFence;Performs an atomic XOR operation on the specified LONGLONG values. The operation is performed atomically, but without using memory barriers

<Mutex>
CreateMutex;Creates or opens a named or unnamed mutex object.
CreateMutexEx;Creates or opens a named or unnamed mutex object and returns a handle to the object.
OpenMutex;Opens an existing named mutex object.
ReleaseMutex;Releases ownership of the specified mutex object.

<Private namespace>
AddSIDToBoundaryDescriptor;Adds a new security identifier (SID) to the specified boundary descriptor.
AddIntegrityLabelToBoundaryDescriptor;Adds a new required security identifier (SID) to the specified boundary descriptor.
ClosePrivateNamespace;Closes an open namespace handle.
CreateBoundaryDescriptor;Creates a boundary descriptor.
CreatePrivateNamespace;Creates a private namespace.
DeleteBoundaryDescriptor;Deletes the specified boundary descriptor.
OpenPrivateNamespace;Opens a private namespace.

<Semaphore>
CreateSemaphore;Creates or opens a named or unnamed semaphore object.
CreateSemaphoreEx;Creates or opens a named or unnamed semaphore object and returns a handle to the object.
OpenSemaphore;Opens an existing named semaphore object.
ReleaseSemaphore;Increases the count of the specified semaphore object by a specified amount.

<Singly-linked list>	
InitializeSListHead;Initializes the head of a singly linked list.
InterlockedFlushSList;Flushes the entire list of items in a singly linked list.
InterlockedPopEntrySList;Removes an item from the front of a singly linked list.
InterlockedPushEntrySList;Inserts an item at the front of a singly linked list.
InterlockedPushListSList;Inserts a singly-linked list at the front of another singly linked list.
InterlockedPushListSListEx;Inserts a singly-linked list at the front of another singly linked list. Access to the lists is synchronized on a multiprocessor system. This version of the method does not use the __fastcall calling convention
QueryDepthSList;Retrieves the number of entries in the specified singly linked list.
RtlFirstEntrySList;Retrieves the first entry in a singly linked list.
RtlInitializeSListHead;Initializes the head of a singly linked list. Applications should call InitializeSListHead instead.
RtlInterlockedFlushSList;Flushes the entire list of items in a singly linked list. Applications should call InterlockedFlushSList instead.
RtlInterlockedPopEntrySList;Removes an item from the front of a singly linked list. Applications should call InterlockedPopEntrySList instead.
RtlInterlockedPushEntrySList;Inserts an item at the front of a singly linked list. Applications should call InterlockedPushEntrySList instead.
RtlQueryDepthSList;Retrieves the number of entries in the specified singly linked list. Applications should call QueryDepthSList instead.

<Synchronization barrier>
DeleteSynchronizationBarrier;Deletes a synchronization barrier.
EnterSynchronizationBarrier;Enters a synchronization barrier and waits for the appropriate number of threads to rendezvous at the barrier.
InitializeSynchronizationBarrier;Initializes a new synchronization barrier.

<Timer-queue timer>
ChangeTimerQueueTimer;Updates a timer-queue timer.
CreateTimerQueue;Creates a queue for timers.
CreateTimerQueueTimer;Creates a timer-queue timer.
DeleteTimerQueue;Deletes a timer queue.
DeleteTimerQueueEx;Deletes a timer queue.
DeleteTimerQueueTimer;Cancels a timer-queue timer.

<Wait>
MsgWaitForMultipleObjects;Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses. The objects can include input event objects.
MsgWaitForMultipleObjectsEx;Waits until one or all of the specified objects are in the signaled state, an I/O completion routine or asynchronous procedure call (APC) is queued to the thread, or the time-out interval elapses. The array of objects can include input event objects.
RegisterWaitForSingleObject;Directs a wait thread in the thread pool to wait on the object.
SignalObjectAndWait;Signals one object and waits on another object as a single operation.
UnregisterWait;Cancels a registered wait operation.
UnregisterWaitEx;Cancels a registered wait operation.
WaitForMultipleObjects;Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses.
WaitForMultipleObjectsEx;Waits until one or all of the specified objects are in the signaled state, an I/O completion routine or asynchronous procedure call (APC) is queued to the thread, or the time-out interval elapses.
WaitForSingleObject;Waits until the specified object is in the signaled state or the time-out interval elapses.
WaitForSingleObjectEx;Waits until the specified object is in the signaled state, an I/O completion routine or asynchronous procedure call (APC) is queued to the thread, or the time-out interval elapses.
WaitOnAddress;Waits for the value at the specified address to change.
WaitOrTimerCallback;An application-defined function that serves as the starting address for a timer callback or a registered wait callback.
WakeByAddressAll;Wakes all threads waiting for the value of an address to change.
WakeByAddressSingle;Wakes a thread waiting for the value of an address to change.

<Waitable-timer>
CancelWaitableTimer;Sets the specified waitable timer to the inactive state.
CreateWaitableTimer;Creates or opens a waitable timer object.
CreateWaitableTimerEx;Creates or opens a waitable timer object and returns a handle to the object.
OpenWaitableTimer;Opens an existing named waitable timer object.
SetWaitableTimer;Activates the specified waitable timer.
SetWaitableTimerEx;Activates the specified waitable timer and provides context information for the timer. .
TimerAPCProc;Application-defined timer completion routine used with the SetWaitableTimer function.

[Memory Management]
<General Memory Management>
AddSecureMemoryCacheCallback;Registers a callback function to be called when a secured memory range is freed or its protections are changed.
CopyMemory;Copies a block of memory from one location to another.
CreateMemoryResourceNotification;Creates a memory resource notification object.
FillMemory;Fills a block of memory with a specified value.
GetLargePageMinimum;Retrieves the minimum size of a large page.
GetPhysicallyInstalledSystemMemory;Retrieves the amount of RAM that is physically installed on the computer.
GetSystemFileCacheSize;Retrieves the current size limits for the working set of the system cache.
GetWriteWatch;Retrieves the addresses of the pages that have been written to in a region of virtual memory.
GlobalMemoryStatusEx;Obtains information about the system's current usage of both physical and virtual memory.
MoveMemory;Moves a block of memory from one location to another.
QueryMemoryResourceNotification;Retrieves the state of the specified memory resource object.
RemoveSecureMemoryCacheCallback;Unregisters a callback function that was previously registered with the AddSecureMemoryCacheCallback function.
ResetWriteWatch;Resets the write-tracking state for a region of virtual memory.
SecureMemoryCacheCallback;An application-defined function that is called when a secured memory range is freed or its protections are changed.
SecureZeroMemory;Fills a block of memory with zeros.
SetSystemFileCacheSize;Limits the size of the working set for the file system cache.
ZeroMemory;Fills a block of memory with zeros.

<Data Execution Prevention>
GetProcessDEPPolicy;Retrieves DEP settings for a process.
GetSystemDEPPolicy;Retrieves DEP settings for the system.
SetProcessDEPPolicy;Changes DEP settings for a process.

<File Mapping>
CreateFileMapping;Creates or opens a named or unnamed file mapping object for a specified file.
CreateFileMappingFromApp;Creates or opens a named or unnamed file mapping object for a specified file from a Windows Store app.
CreateFileMappingNuma;Creates or opens a named or unnamed file mapping object for a specified file, and specifies the NUMA node for the physical memory.
FlushViewOfFile;Writes to the disk a byte range within a mapped view of a file.
GetMappedFileName;Checks whether the specified address is within a memory-mapped file in the address space of the specified process. If so, the function returns the name of the memory-mapped file.
MapViewOfFile;Maps a view of a file mapping into the address space of a calling process.
MapViewOfFileEx;Maps a view of a file mapping into the address space of a calling process. A caller can optionally specify a suggested memory address for the view.
MapViewOfFileExNuma;Maps a view of a file mapping into the address space of a calling process, and specifies the NUMA node for the physical memory.
MapViewOfFileFromApp;Maps a view of a file mapping into the address space of a calling process from a Windows Store app.
OpenFileMapping;Opens a named file mapping object.
UnmapViewOfFile;Unmaps a mapped view of a file from the calling process's address space.

<AWE>
AllocateUserPhysicalPages;Allocates physical memory pages to be mapped and unmapped within any AWE region of the process.
FreeUserPhysicalPages;Frees physical memory pages previously allocated with AllocateUserPhysicalPages.
MapUserPhysicalPages;Maps previously allocated physical memory pages at the specified address within an AWE region.
MapUserPhysicalPagesScatter;Maps previously allocated physical memory pages at the specified address within an AWE region.

<Heap>
GetProcessHeap;Obtains a handle to the heap of the calling process.
GetProcessHeaps;Obtains handles to all of the heaps that are valid for the calling process.
HeapAlloc;Allocates a block of memory from a heap.
HeapCompact;Coalesces adjacent free blocks of memory on a heap.
HeapCreate;Creates a heap object.
HeapDestroy;Destroys the specified heap object.
HeapFree;Frees a memory block allocated from a heap.
HeapLock;Attempts to acquire the lock associated with a specified heap.
HeapQueryInformation;Retrieves information about the specified heap.
HeapReAlloc;Reallocates a block of memory from a heap.
HeapSetInformation;Sets heap information for the specified heap.
HeapSize;Retrieves the size of a memory block allocated from a heap.
HeapUnlock;Releases ownership of the lock associated with a specified heap.
HeapValidate;Attempts to validate a specified heap.
HeapWalk;Enumerates the memory blocks in a specified heap.

<Virtual Memory>
DiscardVirtualMemory;Discards the memory contents of a range of memory pages, without decommitting the memory. The contents of discarded memory is undefined and must be rewritten by the application.
OfferVirtualMemory;Indicates that the data contained in a range of memory pages is no longer needed by the application and can be discarded by the system if necessary.
PrefetchVirtualMemory;Prefetches virtual address ranges into physical memory.
ReclaimVirtualMemory;Reclaims a range of memory pages that were offered to the system with OfferVirtualMemory.
VirtualAlloc;Reserves or commits a region of pages in the virtual address space of the calling process.
VirtualAllocEx;Reserves or commits a region of pages in the virtual address space of the specified process.
VirtualAllocExNuma;Reserves or commits a region of memory within the virtual address space of the specified process, and specifies the NUMA node for the physical memory.
VirtualFree;Releases or decommits a region of pages within the virtual address space of the calling process.
VirtualFreeEx;Releases or decommits a region of memory within the virtual address space of a specified process.
VirtualLock;Locks the specified region of the process's virtual address space into physical memory.
VirtualProtect;Changes the access protection on a region of committed pages in the virtual address space of the calling process.
VirtualProtectEx;Changes the access protection on a region of committed pages in the virtual address space of the calling process.
VirtualQuery;Provides information about a range of pages in the virtual address space of the calling process.
VirtualQueryEx;Provides information about a range of pages in the virtual address space of the calling process.
VirtualUnlock;Unlocks a specified range of pages in the virtual address space of a process.

<Global and Local>
GlobalAlloc
LocalAlloc
GlobalDiscard
LocalDiscard
GlobalFlags
LocalFlags
GlobalFree
LocalFree
GlobalHandle
LocalHandle
GlobalLock
LocalLock
GlobalReAlloc
LocalReAlloc
GlobalSize
LocalSize
GlobalUnlock
LocalUnlock

<Bad Memory>
BadMemoryCallbackRoutine;An application-defined function registered with the RegisterBadMemoryNotification function that is called when one or more bad memory pages are detected.
GetMemoryErrorHandlingCapabilities;Gets the memory error handling capabilities of the system.
RegisterBadMemoryNotification;Registers a bad memory notification that is called when one or more bad memory pages are detected.
UnregisterBadMemoryNotification;Closes the specified bad memory notification handle.

<Enclave>
CreateEnclave;Creates a new uninitialized enclave. An enclave is an isolated region of code and data within the address space for an application. Only code that runs within the enclave can access data within the same enclave.
InitializeEnclave;Initializes an enclave that you created and loaded with data.
IsEnclaveTypeSupported;Retrieves whether the specified type of enclave is supported.
LoadEnclaveData;Loads data into an uninitialized enclave that you created by calling CreateEnclave.

<Obsolete>
IsBadCodePtr
IsBadReadPtr
IsBadStringPtr
IsBadWritePtr
GlobalMemoryStatus

[Process and Thread]
<Process>
CreateProcess;Creates a new process and its primary thread.
CreateProcessAsUser;Creates a new process and its primary thread. The new process runs in the security context of the user represented by the specified token.
CreateProcessWithLogonW;Creates a new process and its primary thread. The new process then runs the specified executable file in the security context of the specified credentials (user, domain, and password).
CreateProcessWithTokenW;Creates a new process and its primary thread. The new process runs in the security context of the specified token.
ExitProcess;Ends the calling process and all its threads.
FlushProcessWriteBuffers;Flushes the write queue of each processor that is running a thread of the current process.
FreeEnvironmentStrings;Frees a block of environment strings.
GetCommandLine;Retrieves the command-line string for the current process.
GetCurrentProcess;Retrieves a pseudo handle for the current process.
GetCurrentProcessId;Retrieves the process identifier of the calling process.
GetCurrentProcessorNumber;Retrieves the number of the processor the current thread was running on during the call to this function.
GetEnvironmentStrings;Retrieves the environment block for the current process.
GetEnvironmentVariable;Retrieves the value of the specified variable from the environment block of the calling process.
GetExitCodeProcess;Retrieves the termination status of the specified process.
GetGuiResources;Retrieves the count of handles to graphical user interface (GUI) objects in use by the specified process.
GetLogicalProcessorInformation;Retrieves information about logical processors and related hardware.
GetPriorityClass;Retrieves the priority class for the specified process.
GetProcessAffinityMask;Retrieves a process affinity mask for the specified process and the system affinity mask for the system.
GetProcessGroupAffinity;Retrieves the processor group affinity of the specified process.
GetProcessHandleCount;Retrieves the number of open handles that belong to the specified process.
GetProcessId;Retrieves the process identifier of the specified process.
GetProcessIdOfThread;Retrieves the process identifier of the process associated with the specified thread.
GetProcessIoCounters;Retrieves accounting information for all I/O operations performed by the specified process.
GetProcessMitigationPolicy;Retrieves mitigation policy settings for the calling process.
GetProcessPriorityBoost;Retrieves the priority boost control state of the specified process.
GetProcessShutdownParameters;Retrieves shutdown parameters for the currently calling process.
GetProcessTimes;Retrieves timing information about for the specified process.
GetProcessVersion;Retrieves the major and minor version numbers of the system on which the specified process expects to run.
GetProcessWorkingSetSize;Retrieves the minimum and maximum working set sizes of the specified process.
GetProcessWorkingSetSizeEx;Retrieves the minimum and maximum working set sizes of the specified process.
GetProcessorSystemCycleTime;Retrieves the cycle time each processor in the specified group spent executing deferred procedure calls (DPCs) and interrupt service routines (ISRs).
GetStartupInfo;Retrieves the contents of the STARTUPINFO structure that was specified when the calling process was created.
IsImmersiveProcess;Determines whether the process belongs to a Windows Store app.
NeedCurrentDirectoryForExePath;Determines whether the current directory should be included in the search path for the specified executable.
OpenProcess;Opens an existing local process object.
QueryFullProcessImageName;Retrieves the full name of the executable image for the specified process.
QueryProcessAffinityUpdateMode;Retrieves the affinity update mode of the specified process.
QueryProcessCycleTime;Retrieves the sum of the cycle time of all threads of the specified process.
SetEnvironmentVariable;Sets the value of an environment variable for the current process.
SetPriorityClass;Sets the priority class for the specified process.
SetProcessAffinityMask;Sets a processor affinity mask for the threads of a specified process.
SetProcessAffinityUpdateMode;Sets the affinity update mode of the specified process.
SetProcessMitigationPolicy;Sets the mitigation policy for the calling process.
SetProcessPriorityBoost;Disables the ability of the system to temporarily boost the priority of the threads of the specified process.
SetProcessRestrictionExemption;Exempts the calling process from restrictions preventing desktop processes from interacting with the Windows Store app environment. This function is used by development and debugging tools.
SetProcessShutdownParameters;Sets shutdown parameters for the currently calling process.
SetProcessWorkingSetSize;Sets the minimum and maximum working set sizes for the specified process.
SetProcessWorkingSetSizeEx;Sets the minimum and maximum working set sizes for the specified process.
TerminateProcess;Terminates the specified process and all of its threads.

<Process Enumeration>
EnumProcesses;Retrieves the process identifier for each process object in the system.
Process32First;Retrieves information about the first process encountered in a system snapshot.
Process32Next;Retrieves information about the next process recorded in a system snapshot.
WTSEnumerateProcesses;Retrieves information about the active processes on the specified terminal server.

<Policy>
QueryProtectedPolicy;Queries the value associated with a protected policy.
SetProtectedPolicy;Sets a protected policy.

<Thread>
AttachThreadInput;Attaches the input processing mechanism of one thread to that of another thread.
CreateRemoteThread;Creates a thread that runs in the virtual address space of another process.
CreateRemoteThreadEx;Creates a thread that runs in the virtual address space of another process and optionally specifies extended attributes such as processor group affinity.
CreateThread;Creates a thread to execute within the virtual address space of the calling process.
ExitThread;Ends the calling thread.
GetCurrentThread;Retrieves a pseudo handle for the current thread.
GetCurrentThreadId;Retrieves the thread identifier of the calling thread.
GetExitCodeThread;Retrieves the termination status of the specified thread.
GetThreadGroupAffinity;Retrieves the processor group affinity of the specified thread.
GetThreadId;Retrieves the thread identifier of the specified thread.
GetThreadIdealProcessorEx;Retrieves the processor number of the ideal processor for the specified thread.
GetThreadIOPendingFlag;Determines whether a specified thread has any I/O requests pending.
GetThreadPriority;Retrieves the priority value for the specified thread.
GetThreadPriorityBoost;Retrieves the priority boost control state of the specified thread.
GetThreadTimes;Retrieves timing information for the specified thread.
OpenThread;Opens an existing thread object.
QueryIdleProcessorCycleTime;Retrieves the cycle time for the idle thread of each processor in the system.
QueryThreadCycleTime;Retrieves the cycle time for the specified thread.
ResumeThread;Decrements a thread's suspend count.
SetThreadAffinityMask;Sets a processor affinity mask for the specified thread.
SetThreadGroupAffinity;Sets the processor group affinity for the specified thread.
SetThreadIdealProcessor;Specifies a preferred processor for a thread.
SetThreadIdealProcessorEx;Sets the ideal processor for the specified thread and optionally retrieves the previous ideal processor.
SetThreadPriority;Sets the priority value for the specified thread.
SetThreadPriorityBoost;Disables the ability of the system to temporarily boost the priority of a thread.
SetThreadStackGuarantee;Sets the stack guarantee for the calling thread.
Sleep;Suspends the execution of the current thread for a specified interval.
SleepEx;Suspends the current thread until the specified condition is met.
SuspendThread;Suspends the specified thread.
SwitchToThread;Causes the calling thread to yield execution to another thread that is ready to run on the current processor.
TerminateThread;Terminates a thread.
ThreadProc;An application-defined function that serves as the starting address for a thread.
TlsAlloc;Allocates a thread local storage (TLS) index.
TlsFree;Releases a TLS index.
TlsGetValue;Retrieves the value in the calling thread's TLS slot for a specified TLS index.
TlsSetValue;Stores a value in the calling thread's TLS slot for a specified TLS index.
WaitForInputIdle;Waits until the specified process is waiting for user input with no input pending, or until the time-out interval has elapsed.

<Process and Thread Extended Attribute>
DeleteProcThreadAttributeList;Deletes the specified list of attributes for process and thread creation.
InitializeProcThreadAttributeList;Initializes the specified list of attributes for process and thread creation.
UpdateProcThreadAttribute;Updates the specified attribute in the specified list of attributes for process and thread creation.

<WOW64>
IsWow64Message;Determines whether the last message read from the current thread's queue originated from a WOW64 process.
IsWow64Process;Determines whether the specified process is running under WOW64.
Wow64SuspendThread;Suspends the specified WOW64 thread.

<Job Object>
AssignProcessToJobObject;Associates a process with an existing job object.
CreateJobObject;Creates or opens a job object.
IsProcessInJob;Determines whether the process is running in the specified job.
OpenJobObject;Opens an existing job object.
QueryInformationJobObject;Retrieves limit and job state information from the job object.
SetInformationJobObject;Set limits for a job object.
TerminateJobObject;Terminates all processes currently associated with the job.
UserHandleGrantAccess;Grants or denies access to a handle to a User object to a job that has a user-interface restriction.

<Thread Pool>
CallbackMayRunLong;Indicates that the callback may not return quickly.
CancelThreadpoolIo;Cancels the notification from the StartThreadpoolIo function.
CloseThreadpool;Closes the specified thread pool.
CloseThreadpoolCleanupGroup;Closes the specified cleanup group.
CloseThreadpoolCleanupGroupMembers;Releases the members of the specified cleanup group, waits for all callback functions to complete, and optionally cancels any outstanding callback functions.
CloseThreadpoolIo;Releases the specified I/O completion object.
CloseThreadpoolTimer;Releases the specified timer object.
CloseThreadpoolWait;Releases the specified wait object.
CloseThreadpoolWork;Releases the specified work object.
CreateThreadpool;Allocates a new pool of threads to execute callbacks.
CreateThreadpoolCleanupGroup;Creates a cleanup group that applications can use to track one or more thread pool callbacks.
CreateThreadpoolIo;Creates a new I/O completion object.
CreateThreadpoolTimer;Creates a new timer object.
CreateThreadpoolWait;Creates a new wait object.
CreateThreadpoolWork;Creates a new work object.
DestroyThreadpoolEnvironment;Deletes the specified callback environment. Call this function when the callback environment is no longer needed for creating new thread pool objects.
DisassociateCurrentThreadFromCallback;Removes the association between the currently executing callback function and the object that initiated the callback. The current thread will no longer count as executing a callback on behalf of the object.
FreeLibraryWhenCallbackReturns;Specifies the DLL that the thread pool will unload when the current callback completes.
InitializeThreadpoolEnvironment;Initializes a callback environment.
IsThreadpoolTimerSet;Determines whether the specified timer object is currently set.
LeaveCriticalSectionWhenCallbackReturns;Specifies the critical section that the thread pool will release when the current callback completes.
QueryThreadpoolStackInformation;Retrieves the stack reserve and commit sizes for threads in the specified thread pool.
ReleaseMutexWhenCallbackReturns;Specifies the mutex that the thread pool will release when the current callback completes.
ReleaseSemaphoreWhenCallbackReturns;Specifies the semaphore that the thread pool will release when the current callback completes.
SetEventWhenCallbackReturns;Specifies the event that the thread pool will set when the current callback completes.
SetThreadpoolCallbackCleanupGroup;Associates the specified cleanup group with the specified callback environment.
SetThreadpoolCallbackLibrary;Ensures that the specified DLL remains loaded as long as there are outstanding callbacks.
SetThreadpoolCallbackPersistent;Specifies that the callback should run on a persistent thread.
SetThreadpoolCallbackPool;Sets the thread pool to be used when generating callbacks.
SetThreadpoolCallbackPriority;Specifies the priority of a callback function relative to other work items in the same thread pool.
SetThreadpoolCallbackRunsLong;Indicates that callbacks associated with this callback environment may not return quickly.
SetThreadpoolStackInformation;Sets the stack reserve and commit sizes for new threads in the specified thread pool.
SetThreadpoolThreadMaximum;Sets the maximum number of threads that the specified thread pool can allocate to process callbacks.
SetThreadpoolThreadMinimum;Sets the minimum number of threads that the specified thread pool must make available to process callbacks.
SetThreadpoolTimerEx;Sets the timer object. A worker thread calls the timer object's callback after the specified timeout expires.
SetThreadpoolTimer;Sets the timer object. A worker thread calls the timer object's callback after the specified timeout expires.
SetThreadpoolWait;Sets the wait object. A worker thread calls the wait object's callback function after the handle becomes signaled or after the specified timeout expires.
SetThreadpoolWaitEx;Sets the wait object. A worker thread calls the wait object's callback function after the handle becomes signaled or after the specified timeout expires.
StartThreadpoolIo;Notifies the thread pool that I/O operations may possibly begin for the specified I/O completion object. A worker thread calls the I/O completion object's callback function after the operation completes on the file handle bound to this object.
SubmitThreadpoolWork;Posts a work object to the thread pool. A worker thread calls the work object's callback function.
TpInitializeCallbackEnviron;Initializes a callback environment for the thread pool.
TpDestroyCallbackEnviron;Deletes the specified callback environment. Call this function when the callback environment is no longer needed for creating new thread pool objects.
TpSetCallbackActivationContext;Assigns an activation context to the callback environment.
TpSetCallbackCleanupGroup;Associates the specified cleanup group with the specified callback environment.
TpSetCallbackFinalizationCallback;Indicates a function to call when the callback environment is finalized.
TpSetCallbackLongFunction;Indicates that callbacks associated with this callback environment may not return quickly.
TpSetCallbackNoActivationContext;Indicates that the callback environment has no activation context.
TpSetCallbackPersistent;Specifies that the callback should run on a persistent thread.
TpSetCallbackPriority;Specifies the priority of a callback function relative to other work items in the same thread pool.
TpSetCallbackRaceWithDll;Ensures that the specified DLL remains loaded as long as there are outstanding callbacks.
TpSetCallbackThreadpool;Assigns a thread pool to a callback environment.
TrySubmitThreadpoolCallback;Requests that a thread pool worker thread call the specified callback function.
WaitForThreadpoolIoCallbacks;Waits for outstanding I/O completion callbacks to complete and optionally cancels pending callbacks that have not yet started to execute.
WaitForThreadpoolTimerCallbacks;Waits for outstanding timer callbacks to complete and optionally cancels pending callbacks that have not yet started to execute.
WaitForThreadpoolWaitCallbacks;Waits for outstanding wait callbacks to complete and optionally cancels pending callbacks that have not yet started to execute.
WaitForThreadpoolWorkCallbacks;Waits for outstanding work callbacks to complete and optionally cancels pending callbacks that have not yet started to execute.
BindIoCompletionCallback;Associates the I/O completion port owned by the thread pool with the specified file handle. On completion of an I/O request involving this file, a non-I/O worker thread will execute the specified callback function.
QueueUserWorkItem;Queues a work item to a worker thread in the thread pool.
RegisterWaitForSingleObject;Directs a wait thread in the thread pool to wait on the object.
UnregisterWaitEx;Waits until one or all of the specified objects are in the signaled state or the time-out interval elapses.

<Thread Ordering Service>
AvQuerySystemResponsiveness;Retrieves the system responsiveness setting used by the multimedia class scheduler service.
AvRtCreateThreadOrderingGroup;Creates a thread ordering group.
AvRtCreateThreadOrderingGroupEx;Creates a thread ordering group and associates the server thread with a task.
AvRtDeleteThreadOrderingGroup;Deletes the specified thread ordering group created by the caller.
AvRtJoinThreadOrderingGroup;Joins client threads to a thread ordering group.
AvRtLeaveThreadOrderingGroup;Enables client threads to leave a thread ordering group.
AvRtWaitOnThreadOrderingGroup;Enables client threads of a thread ordering group to wait until they should execute.

<Multimedia Class Scheduler Service>
AvRevertMmThreadCharacteristics;Indicates that a thread is no longer performing work associated with the specified task.
AvSetMmMaxThreadCharacteristics;Associates the calling thread with the specified tasks.
AvSetMmThreadCharacteristics;Associates the calling thread with the specified task.
AvSetMmThreadPriority;Adjusts the thread priority of the calling thread relative to other threads performing the same task.

<Fiber>
ConvertFiberToThread;Converts the current fiber into a thread.
ConvertThreadToFiber;Converts the current thread into a fiber.
ConvertThreadToFiberEx;Converts the current thread into a fiber.
CreateFiber;Allocates a fiber object, assigns it a stack, and sets up execution to begin at the specified start address.
CreateFiberEx;Allocates a fiber object, assigns it a stack, and sets up execution to begin at the specified start address.
DeleteFiber;Deletes an existing fiber.
FiberProc;An application-defined function used with the CreateFiber function.
FlsAlloc;Allocates a fiber local storage (FLS) index.
FlsFree;Releases an FLS index.
FlsGetValue;Retrieves the value in the calling fiber's FLS slot for a specified FLS index.
FlsSetValue;Stores a value in the calling fiber's FLS slot for a specified FLS index.
IsThreadAFiber;Determines whether the current thread is a fiber.
SwitchToFiber;Schedules a fiber.

<NUMA Support>
AllocateUserPhysicalPagesNuma;Reserves or commits a region of memory within the virtual address space of the specified process, and specifies the NUMA node for the physical memory.
GetLogicalProcessorInformation;Retrieves information about logical processors and related hardware.
GetNumaAvailableMemoryNode;Retrieves the amount of memory available in the specified node.
GetNumaAvailableMemoryNodeEx;Retrieves the amount of memory that is available in the specified node as a USHORT value.
GetNumaHighestNodeNumber;Retrieves the node that currently has the highest number.
GetNumaNodeNumberFromHandle;Retrieves the NUMA node associated with the underlying device for a file handle.
GetNumaNodeProcessorMask;Retrieves the processor mask for the specified node.
GetNumaNodeProcessorMaskEx;Retrieves the processor mask for the specified NUMA node as a USHORT value.
GetNumaProcessorNode;Retrieves the node number for the specified processor.
GetNumaProcessorNodeEx;Retrieves the node number of the specified logical processor as a USHORT value.
GetNumaProximityNode;Retrieves the node number for the specified proximity identifier.
GetNumaProximityNodeEx;Retrieves the node number as a USHORT value for the specified proximity identifier.
VirtualAllocExNuma;Reserves or commits a region of memory within the virtual address space of the specified process, and specifies the NUMA node for the physical memory.

<Processor>
GetActiveProcessorCount;Returns the number of active processors in a processor group or in the system.
GetActiveProcessorGroupCount;Returns the number of active processor groups in the system.
GetCurrentProcessorNumber;Retrieves the number of the processor the current thread was running on during the call to this function.
GetCurrentProcessorNumberEx;Retrieves the processor group and number of the logical processor in which the calling thread is running.
GetLogicalProcessorInformation;Retrieves information about logical processors and related hardware.
GetLogicalProcessorInformationEx;Retrieves information about the relationships of logical processors and related hardware.
GetMaximumProcessorCount;Returns the maximum number of logical processors that a processor group or the system can have.
GetMaximumProcessorGroupCount;Returns the maximum number of processor groups that the system can have.
QueryIdleProcessorCycleTime;Retrieves the cycle time for the idle thread of each processor in the system.
QueryIdleProcessorCycleTimeEx;Retrieves the accumulated cycle time for the idle thread on each logical processor in the specified processor group. 

<User-Mode Scheduling>
CreateUmsCompletionList;Creates a UMS completion list.
CreateUmsThreadContext;Creates a UMS thread context to represent a UMS worker thread.
DeleteUmsCompletionList;Deletes the specified UMS completion list. The list must be empty.
DeleteUmsThreadContext;Deletes the specified UMS thread context. The thread must be terminated.
DequeueUmsCompletionListItems;Retrieves UMS worker threads from the specified UMS completion list.
EnterUmsSchedulingMode;Converts the calling thread into a UMS scheduler thread.
ExecuteUmsThread;Runs the specified UMS worker thread.
GetCurrentUmsThread;Returns the UMS thread context of the calling UMS thread.
GetNextUmsListItem;Returns the next UMS thread context in a list of UMS thread contexts.
GetUmsCompletionListEvent;Retrieves a handle to the event associated with the specified UMS completion list.
GetUmsSystemThreadInformation;Queries whether the specified thread is a UMS scheduler thread, a UMS worker thread, or a non-UMS thread.
QueryUmsThreadInformation;Retrieves information about the specified UMS worker thread.
SetUmsThreadInformation;Sets application-specific context information for the specified UMS worker thread.
UmsSchedulerProc;The application-defined UMS scheduler entry point function associated with a UMS completion list.
UmsThreadYield;Yields control to the UMS scheduler thread on which the calling UMS worker thread is running.

<Obsolete>
NtGetCurrentProcessorNumber
NtQueryInformationProcess
NtQueryInformationThread
WinExec
ZwQueryInformationProcess

[Dynamic-Link Library]
AddDllDirectory;Adds a directory to the process DLL search path.
DisableThreadLibraryCalls;Disables thread attach and thread detach notifications for the specified DLL.
DllMain;An optional entry point into a DLL.
FreeLibrary;Decrements the reference count of the loaded DLL. When the reference count reaches zero, the module is unmapped from the address space of the calling process.
FreeLibraryAndExitThread;Decrements the reference count of a loaded DLL by one, and then calls ExitThread to terminate the calling thread.
GetDllDirectory;Retrieves the application-specific portion of the search path used to locate DLLs for the application.
GetModuleFileName;Retrieves the fully qualified path for the file containing the specified module.
GetModuleFileNameEx;Retrieves the fully qualified path for the file containing the specified module.
GetModuleHandle;Retrieves a module handle for the specified module.
GetModuleHandleEx;Retrieves a module handle for the specified module.
GetProcAddress;Retrieves the address of an exported function or variable from the specified DLL.
LoadLibrary;Maps the specified executable module into the address space of the calling process.
LoadLibraryEx;Maps the specified executable module into the address space of the calling process.
LoadPackagedLibrary;Maps the specified packaged module and its dependencies into the address space of the calling process. Only Windows Store apps can call this function.
RemoveDllDirectory;Removes a directory that was added to the process DLL search path by using AddDllDirectory.
SetDefaultDllDirectories;Specifies a default set of directories to search when the calling process loads a DLL.
SetDllDirectory;Modifies the search path used to locate DLLs for the application.

<Obsolete>
LoadModule

[File Management]
AddUsersToEncryptedFile;Adds user keys to the specified encrypted file.
AreFileApisANSI;Determines whether the file I/O functions are using the ANSI or OEM character set code page.
CancelIo;Cancels all pending input and output (I/O) operations that are issued by the calling thread for the specified file.
CancelIoEx;Marks any outstanding I/O operations for the specified file handle. The function only cancels I/O operations in the current process, regardless of which thread created the I/O operation.
CancelSynchronousIo;Marks pending synchronous I/O operations that are issued by the specified thread as canceled.
CheckNameLegalDOS8Dot3;Determines whether the specified name can be used to create a file on a FAT file system.
CloseEncryptedFileRaw;Closes an encrypted file after a backup or restore operation, and frees associated system resources.
CopyFile;Copies an existing file to a new file.
CopyFile2;Copies an existing file to a new file, notifying the application of its progress through a callback function.
CopyFile2ProgressRoutine;An application-defined callback function used with the CopyFile2 function.
CopyFileEx;Copies an existing file to a new file, notifying the application of its progress through a callback function.
CopyFileTransacted;Copies an existing file to a new file as a transacted operation, notifying the application of its progress through a callback function.
CopyProgressRoutine;An application-defined callback function used with the CopyFileEx, MoveFileTransacted, and MoveFileWithProgress functions.
CreateFile;Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.
CreateFile2;Creates or opens a file.
CreateFileTransacted;Creates or opens a file, file stream, or directory as a transacted operation.
CreateHardLink;Establishes a hard link between an existing file and a new file.
CreateHardLinkTransacted;Establishes a hard link between an existing file and a new file as a transacted operation.
CreateIoCompletionPort;Creates an input/output (I/O) completion port and associates it with a specified file handle, or creates an I/O completion port that is not yet associated with a file handle, allowing association at a later time.
CreateSymbolicLink;Creates a symbolic link.
CreateSymbolicLinkTransacted;Creates a symbolic link as a transacted operation.
DecryptFile;Decrypts an encrypted file or directory.
DeleteFile;Deletes an existing file.
DeleteFileTransacted;Deletes an existing file as a transacted operation.
DuplicateEncryptionInfoFile;Copies the EFS metadata from one file or directory to another.
EncryptFile;Encrypts a file or directory.
EncryptionDisable;Disables or enables encryption of the specified directory and the files in it.
ExportCallback;An application-defined callback function used with ReadEncryptedFileRaw.
FileEncryptionStatus;Retrieves the encryption status of the specified file.
FileIOCompletionRoutine;An application-defined callback function used with the ReadFileEx and WriteFileEx functions. It is called when the asynchronous input and output (I/O) operation is completed or canceled and the calling thread is in an alertable state.
FindClose;Closes a file search handle opened by the FindFirstFile, FindFirstFileEx, FindFirstFileNameW, FindFirstFileNameTransactedW, FindFirstFileTransacted, FindFirstStreamTransactedW, or FindFirstStreamW functions.
FindFirstFile;Searches a directory for a file or subdirectory with a name that matches a specific name (or partial name if wildcards are used).
FindFirstFileEx;Searches a directory for a file or subdirectory with a name and attributes that match those specified.
FindFirstFileNameTransactedW;Creates an enumeration of all the hard links to the specified file as a transacted operation. The function returns a handle to the enumeration that can be used on subsequent calls to the FindNextFileNameW function.
FindFirstFileNameW;Creates an enumeration of all the hard links to the specified file. The FindFirstFileNameW function returns a handle to the enumeration that can be used on subsequent calls to the FindNextFileNameW function.
FindFirstFileTransacted;Searches a directory for a file or subdirectory with a name that matches a specific name as a transacted operation.
FindFirstStreamTransactedW;Enumerates the first stream in the specified file or directory as a transacted operation.
FindFirstStreamW;Enumerates the first stream with a ::$DATA stream type in the specified file or directory.
FindNextFile;Continues a file search from a previous call to the FindFirstFile, FindFirstFileEx, or FindFirstFileTransacted functions.
FindNextFileNameW;Continues enumerating the hard links to a file using the handle returned by a successful call to the FindFirstFileNameW function.
FindNextStreamW;Continues a stream search started by a previous call to the FindFirstStreamW function.
FlushFileBuffers;Flushes the buffers of a specified file and causes all buffered data to be written to a file.
FreeEncryptionCertificateHashList;Frees a certificate hash list.
GetBinaryType;Determines whether a file is an executable (.exe) file, and if so, which subsystem runs the executable file.
GetCompressedFileSize;Retrieves the actual number of bytes of disk storage used to store a specified file.
GetCompressedFileSizeTransacted;Retrieves the actual number of bytes of disk storage used to store a specified file as a transacted operation.
GetExpandedName;Retrieves the original name of a compressed file, if the file was compressed by the Lempel-Ziv algorithm.
GetFileAttributes;Retrieves file system attributes for a specified file or directory.
GetFileAttributesEx;Retrieves attributes for a specified file or directory.
GetFileAttributesTransacted;Retrieves file system attributes for a specified file or directory as a transacted operation.
GetFileBandwidthReservation;Retrieves the bandwidth reservation properties of the volume on which the specified file resides.
GetFileInformationByHandle;Retrieves file information for the specified file.
GetFileInformationByHandleEx;Retrieves file information for the specified file.
GetFileSize;Retrieves the size of the specified file, in bytes.
GetFileSizeEx;Retrieves the size of the specified file.
GetFileType;Retrieves the file type of the specified file.
GetFinalPathNameByHandle;Retrieves the final path for the specified file.
GetFullPathName;Retrieves the full path and file name of the specified file.
GetFullPathNameTransacted;Retrieves the full path and file name of the specified file as a transacted operation.
GetLongPathName;Converts the specified path to its long form.
GetLongPathNameTransacted;Converts the specified path to its long form as a transacted operation.
GetQueuedCompletionStatus;Attempts to dequeue an I/O completion packet from the specified I/O completion port.
GetQueuedCompletionStatusEx;Retrieves multiple completion port entries simultaneously.
GetShortPathName;Retrieves the short path form of the specified path.
GetTempFileName;Creates a name for a temporary file. If a unique file name is generated, an empty file is created and the handle to it is released; otherwise, only a file name is generated.
GetTempPath;Retrieves the path of the directory designated for temporary files.
ImportCallback;An application-defined callback function used with WriteEncryptedFileRaw. The system calls ImportCallback one or more times, each time to retrieve a portion of a backup file's data.
LockFile;Locks the specified file for exclusive access by the calling process.
LockFileEx;Locks the specified file for exclusive access by the calling process. This function can operate either synchronously or asynchronously and can request either an exclusive or a shared lock.
LZClose;Closes a file that was opened by using the LZOpenFile function.
LZCopy;Copies a source file to a destination file.
LZInit;Allocates memory for the internal data structures required to decompress files, and then creates and initializes them.
LZOpenFile;Creates, opens, reopens, or deletes the specified file.
LZRead;Reads (at most) the specified number of bytes from a file and copies them into a buffer.
LZSeek;Moves a file pointer the specified number of bytes from a starting position.
MoveFile;Moves an existing file or a directory, including its children.
MoveFileEx;Moves an existing file or directory, including its children, with various move options.
MoveFileTransacted;Moves an existing file or a directory, including its children, as a transacted operation.
MoveFileWithProgress;Moves a file or directory, including its children. You can provide a callback function that receives progress notifications.
OpenEncryptedFileRaw;Opens an encrypted file in order to backup (export) or restore (import) the file.
OpenFile;Creates, opens, reopens, or deletes a file.
OpenFileById;Opens the file that matches the specified identifier.
PostQueuedCompletionStatus;Posts an I/O completion packet to an I/O completion port.
QueryRecoveryAgentsOnEncryptedFile;Retrieves a list of recovery agents for the specified file.
QueryUsersOnEncryptedFile;Retrieves a list of users for the specified file.
ReadEncryptedFileRaw;Backs up (export) encrypted files.
ReadFile;Reads data from the specified file or input/output (I/O) device. Reads occur at the position specified by the file pointer if supported by the device.
ReadFileEx;Reads data from the specified file or input/output (I/O) device. It reports its completion status asynchronously, calling the specified completion routine when reading is completed or canceled and the calling thread is in an alertable wait state.
ReadFileScatter;Reads data from a file and stores it in an array of buffers.
RemoveUsersFromEncryptedFile;Removes specified certificate hashes from a specified file.
ReOpenFile;Reopens the specified file system object with different access rights, sharing mode, and flags.
ReplaceFile;Replaces one file with another file, with the option of creating a backup copy of the original file.
SearchPath;Searches for a specified file in a specified path.
SetEndOfFile;Sets the physical file size for the specified file to the current position of the file pointer.
SetFileApisToANSI;Causes the file I/O functions to use the ANSI character set code page for the current process.
SetFileApisToOEM;Causes the file I/O functions for the process to use the OEM character set code page.
SetFileAttributes;Sets the attributes for a file or directory.
SetFileAttributesTransacted;Sets the attributes for a file or directory as a transacted operation.
SetFileBandwidthReservation;Requests that bandwidth for the specified file stream be reserved. The reservation is specified as a number of bytes in a period of milliseconds for I/O requests on the specified file handle.
SetFileCompletionNotificationModes;Sets the notification modes for a file handle, allowing you to specify how completion notifications work for the specified file.
SetFileInformationByHandle;Sets the file information for the specified file.
SetFileIoOverlappedRange;Associates a virtual address range with the specified file handle.
SetFilePointer;Moves the file pointer of the specified file.
SetFilePointerEx;Moves the file pointer of the specified file.
SetFileShortName;Sets the short name for the specified file.
SetFileValidData;Sets the valid data length of the specified file. This function is useful in very limited scenarios. For more information, see the Remarks section.
SetSearchPathMode;Sets the per-process mode that the SearchPath function uses when locating files.
SetUserFileEncryptionKey;Sets the user's current key to the specified certificate.
UnlockFile;Unlocks a region in an open file.
UnlockFileEx;Unlocks a region in the specified file. This function can operate either synchronously or asynchronously.
WofEnumEntries;Enumerates all the data sources from a specified provider for a specified volume.
WofEnumEntryProc;Callback function that gets called for each data source in response to a call to WofEnumEntries.
WofEnumFilesProc;Callback function that gets called for each file backed by an external data source, such as a WIM file.
WofFileEnumFiles;Enumerates all of the files which are compressed with a specified compression algorithm on a specified volume.
WofGetDriverVersion;Used to query the version of the driver used to support a particular provider.
WofIsExternalFile;Used to determine if a file is being backed by a physical file or is backed by a system data provider, and optionally indicates which provider or additional data about the file.
WofSetFileDataLocation;Used to change a file from being backed by a physical file to one backed by a system data provider.
WofShouldCompressBinaries;Indicates whether compression should be used on a particular volume, and if so, which compression algorithm should be used.
WofWimAddEntry;Adds a single WIM data source to a volume such that files can be created on the volume which are stored within the WIM.
WofWimEnumFiles;Enumerates all of the files which are being backed by a specified WIM data source on a specified volume.
WofWimRemoveEntry;Removes a single WIM data source from backing files on a volume.
WofWimSuspendEntry;Temporarily removes a WIM data source from backing files on a volume until the volume is remounted or the data source is updated with WofWimUpdateEntry.
WofWimUpdateEntry;Updates a WIM entry to point to a different WIM file location.
Wow64DisableWow64FsRedirection;Disables file system redirection for the calling thread. File system redirection is enabled by default.
Wow64EnableWow64FsRedirection;Enables or disables file system redirection for the calling thread.
Wow64RevertWow64FsRedirection;Restores file system redirection for the calling thread.
WriteEncryptedFileRaw;Restores (import) encrypted files.
WriteFile;Writes data to the specified file or input/output (I/O) device.
WriteFileEx;Writes data to the specified file or input/output (I/O) device. It reports its completion status asynchronously, calling the specified completion routine when writing is completed or canceled and the calling thread is in an alertable wait state.
WriteFileGather;Retrieves data from an array of buffers and writes the data to a file.

[Time]
<System Time>
GetSystemTime;Retrieves the current system date and time in UTC format.
GetSystemTimeAdjustment;Determines whether the system is applying periodic time adjustments to its time-of-day clock.
GetTimeFormat;Formats a system time as a time string for a specified locale.
NtQuerySystemTime;Returns the system time.
RtlLocalTimeToSystemTime;Converts the specified local time to system time.
RtlTimeToSecondsSince1970;Converts the specified system time to the number of seconds since the first second of January 1, 1970.
SetSystemTime;Sets the current system time and date.
SetSystemTimeAdjustment;Enables or disables periodic time adjustments to the system's time-of-day clock.
SystemTimeToFileTime;Converts a system time to a file time.
SystemTimeToTzSpecificLocalTime;Converts a UTC time to a specified time zone's corresponding local time.
TzSpecificLocalTimeToSystemTime;Converts a local time to a UTC time.

<Local Time>
EnumDynamicTimeZoneInformation;Enumerates dynamic daylight saving time information entries stored in the registry.
FileTimeToLocalFileTime;Converts a UTC file time to a local file time.
GetDynamicTimeZoneInformation;Retrieves the current time zone and dynamic daylight saving time settings.
GetDynamicTimeZoneInformationEffectiveYears;Retrieves a range, expressed in years, for which a DYNAMIC_TIME_ZONE_INFORMATION has valid entries.
GetLocalTime;Retrieves the current local date and time.
GetTimeZoneInformation;Retrieves the current time zone settings.
GetTimeZoneInformationForYear;Retrieves the time zone settings for the specified year and time zone.
RtlLocalTimeToSystemTime;Converts the specified local time to system time.
SetDynamicTimeZoneInformation;Sets the current time zone and dynamic daylight saving time settings.
SetLocalTime;Sets the current local time and date.
SetTimeZoneInformation;Sets the current time zone settings.
SystemTimeToTzSpecificLocalTime;Converts a UTC time to a specified time zone's corresponding local time.
SystemTimeToTzSpecificLocalTimeEx;Converts a UTC time with dynamic daylight saving time settings to a specified time zone's corresponding local time.
TzSpecificLocalTimeToSystemTime;Converts a local time to a UTC time.
TzSpecificLocalTimeToSystemTimeEx;Converts a local time with dynamic daylight saving time settings to UTC time.

<File Time>
CompareFileTime;Compares two file times.
FileTimeToLocalFileTime;Converts a UTC file time to a local file time.
FileTimeToSystemTime;Converts a file time to system time format.
GetFileTime;Retrieves the date and time that the specified file or directory was created, last accessed, and last modified.
GetSystemTimeAsFileTime;Retrieves the current system date and time in UTC format.
LocalFileTimeToFileTime;Converts a local file time to a file time based on UTC.
SetFileTime;Sets the date and time that the specified file or directory was created, last accessed, or last modified.
SystemTimeToFileTime;Converts a system time to a file time.

<MS-DOS Date and Time>
DosDateTimeToFileTime;Converts MS-DOS date and time values to a file time.
FileTimeToDosDateTime;Converts a file time to MS-DOS date and time values.

<Windows Time>
GetSystemTimes;Retrieves system timing information.
GetTickCount;Retrieves the number of milliseconds that have elapsed since the system was started, up to 49.7 days.
GetTickCount64;Retrieves the number of milliseconds that have elapsed since the system was started.

[Debugging]
CheckRemoteDebuggerPresent;Determines whether the specified process is being debugged.
ContinueDebugEvent;Enables a debugger to continue a thread that previously reported a debugging event.
DebugActiveProcess;Enables a debugger to attach to an active process and debug it.
DebugActiveProcessStop;Stops the debugger from debugging the specified process.
DebugBreak;Causes a breakpoint exception to occur in the current process.
DebugBreakProcess;Causes a breakpoint exception to occur in the specified process.
DebugSetProcessKillOnExit;Sets the action to be performed when the calling thread exits.
FatalExit;Transfers execution control to the debugger.
FlushInstructionCache;Flushes the instruction cache for the specified process.
GetThreadContext;Retrieves the context of the specified thread.
GetThreadSelectorEntry;Retrieves a descriptor table entry for the specified selector and thread.
IsDebuggerPresent;Determines whether the calling process is being debugged by a user-mode debugger.
OutputDebugString;Sends a string to the debugger for display.
ReadProcessMemory;Reads data from an area of memory in a specified process.
SetThreadContext;Sets the context for the specified thread.
WaitForDebugEvent;Waits for a debugging event to occur in a process being debugged.
Wow64GetThreadContext;Retrieves the context of the specified WOW64 thread.
Wow64GetThreadSelectorEntry;Retrieves a descriptor table entry for the specified selector and WOW64 thread.
Wow64SetThreadContext;Sets the context of the specified WOW64 thread.
WriteProcessMemory;Writes data to an area of memory in a specified process.

[National Language Support]
AdjustCalendarDate;Deprecated. Adjusts a date by a specified number of years, months, weeks or days.
CompareString;Compares two character strings, for a locale specified by identifier.
CompareStringEx;Compares two Unicode (wide character) strings, for a locale specified by name.
CompareStringOrdinal;Compares two Unicode strings to test binary equivalence.
ConvertCalDateTimeToSystemTime;Deprecated. Converts a specified CALDATETIME structure to a SYSTEMTIME structure.
ConvertDefaultLocale;Converts a default locale value to an actual locale identifier.
ConvertSystemTimeToCalDateTime;Deprecated. Converts a specified SYSTEMTIME structure to a CALDATETIME structure.
DownlevelGetLocaleScripts;Provides a list of scripts for the specified locale.
DownlevelGetParentLocaleLCID;Retrieves the locale identifier for the parent of the supplied locale.
DownlevelGetParentLocaleName;Retrieves the locale name for the parent of the supplied locale.
DownlevelGetStringScripts;Provides a list of scripts used in the specified Unicode string.
DownlevelLCIDToLocaleName;Converts a locale identifier to a locale name.
DownlevelLocaleNameToLCID;Converts a locale name to a locale identifier that can be used to get information from the operating system.
DownlevelVerifyScripts;Compares two enumerated lists of scripts.
EnumCalendarInfo;Enumerates calendar information for a specified locale.
EnumCalendarInfoEx;Enumerates calendar information for a locale specified by identifier.
EnumCalendarInfoExEx;Enumerates calendar information for a locale specified by name.
EnumCalendarInfoProc;An application-defined callback function that processes enumerated calendar information provided by the EnumCalendarInfo function.
EnumCalendarInfoProcEx;An application-defined callback function that processes enumerated calendar information provided by the EnumCalendarInfoEx function.
EnumCalendarInfoProcExEx;An application-defined callback function that processes enumerated calendar information provided by the EnumCalendarInfoExEx function.
EnumCodePagesProc;An application-defined callback function that processes enumerated code page information provided by the EnumSystemCodePages function.
EnumDateFormats;Enumerates the long date, short date, or year/month formats that are available for a specified locale.
EnumDateFormatsEx;Enumerates the long date, short date, or year/month formats that are available for a specified locale.
EnumDateFormatsExEx;Enumerates the long date, short date, or year/month formats that are available for a locale specified by name.
EnumDateFormatsProc;An application-defined callback function that processes date format information provided by the EnumDateFormats function.
EnumDateFormatsProcEx;An application-defined callback function that processes date format information provided by the EnumDateFormatsEx function.
EnumDateFormatsProcExEx;An application-defined callback function that processes date format information provided by the EnumDateFormatsExEx function.
EnumGeoInfoProc;An application-defined callback function that processes enumerated geographical location information provided by the EnumSystemGeoID function.
EnumLanguageGroupLocales;Enumerates the locales in a specified language group.
EnumLanguageGroupLocalesProc;An application-defined callback function that processes enumerated language group locale information provided by the EnumLanguageGroupLocales function.
EnumLanguageGroupsProc;An application-defined callback function that processes enumerated language group information provided by the EnumSystemLanguageGroups function.
EnumLocalesProc;An application-defined callback function that processes enumerated locale information provided by the EnumSystemLocales function.
EnumLocalesProcEx;An application-defined callback function that processes enumerated locale information provided by the EnumSystemLocalesEx function.
EnumSystemCodePages;Enumerates the code pages that are either installed on or supported by an operating system.
EnumSystemGeoID;Enumerates the geographical location identifiers (type GEOID) that are available on the operating system.
EnumSystemLanguageGroups;Enumerates the language groups that are either installed on or supported by an operating system.
EnumSystemLocales;Enumerates the locales that are either installed on or supported by an operating system.
EnumSystemLocalesEx;Enumerates the locales that are either installed on or supported by an operating system.
EnumTimeFormats;Enumerates the time formats that are available for a locale specified by identifier.
EnumTimeFormatsEx;Enumerates the time formats that are available for a locale specified by name.
EnumTimeFormatsProc;An application-defined callback function that processes enumerated time format information provided by the EnumTimeFormats function.
EnumTimeFormatsProcEx;An application-defined callback function that processes enumerated time format information provided by the EnumTimeFormatsEx function.
FindNLSString;Locates a Unicode string (wide characters) or its equivalent in another Unicode string for a locale specified by identifier.
FindNLSStringEx;Locates a Unicode string (wide characters) or its equivalent in another Unicode string for a locale specified by identifier.
FindStringOrdinal;Locates a Unicode string (wide characters) in another Unicode string for a non-linguistic comparison.
FoldString;Maps one Unicode string to another, performing the specified transformation.
GetACP;Retrieves the current Windows ANSI code page identifier for the system.
GetCalendarDateFormatEx;Deprecated. Retrieves a properly formatted date string for the specified locale using the specified date.
GetCalendarInfo;Retrieves information about a calendar for a locale specified by identifier.
GetCalendarInfoEx;Retrieves information about a calendar for a locale specified by name.
GetCalendarSupportedDateRange;Deprecated. Gets the supported date range for a specified calendar.
GetCPInfo;Retrieves information about any valid installed or available code page.
GetCPInfoEx;Retrieves information about any valid installed or available code page.
GetCurrencyFormat;Formats a number string as a currency string for a locale specified by identifier.
GetCurrencyFormatEx;Formats a number string as a currency string for a locale specified by name.
GetDateFormat;Formats a date as a date string for a locale specified by identifier.
GetDateFormatEx;Formats a date as a date string for a locale specified by name.
GetDurationFormat;Formats a duration of time as a time string for a locale specified by identifier.
GetDurationFormatEx;Formats a duration of time as a time string for a locale specified by name.
GetGeoInfo;Gets information about a specified geographical location.
GetLocaleInfo;Retrieves information about a locale specified by identifier.
GetLocaleInfoEx;Retrieves information about a locale specified by name.
GetNLSVersion;Gets information about the current version of a specified NLS capability for a locale specified by identifier.
GetNLSVersionEx;Gets information about the current version of a specified NLS capability for a locale specified by name.
GetNumberFormat;Formats a number string as a number string customized for a locale specified by identifier.
GetNumberFormatEx;Formats a number string as a number string customized for a locale specified by name.
GetOEMCP;Retrieves the current original equipment manufacturer (OEM) code page identifier for the operating system.
GetStringScripts;Provides a list of scripts used in the specified string.
GetStringTypeA;Deprecated. Retrieves character type information for the characters in the specified ANSI source string.
GetStringTypeEx;Retrieves character type information for the characters in the specified source string.
GetStringTypeW;Retrieves character type information for the characters in the specified Unicode source string.
GetSystemDefaultLangID;Returns the language identifier for the system locale.
GetSystemDefaultLCID;Returns the locale identifier for the system locale.
GetSystemDefaultLocaleName;Retrieves the system default locale name.
GetThreadLocale;Returns the locale identifier of the current locale for the calling thread.
GetTimeFormat;Formats time as a time string for a locale specified by identifier.
GetTimeFormatEx;Formats time as a time string for a locale specified by name.
GetUserDefaultLangID;Returns the language identifier for the current user locale.
GetUserDefaultLCID;Returns the locale identifier for the user default locale.
GetUserDefaultLocaleName;Retrieves the user default locale name.
GetUserGeoID;Retrieves information about the geographical location of the user.
IdnToAscii;Converts an internationalized domain name (IDN) or other internationalized label to a Unicode (wide character) representation of the ASCII string that represents the name in the Punycode transfer encoding syntax.
IdnToNameprepUnicode;Converts an internationalized domain name (IDN) or another internationalized label to the NamePrep form specified by Network Working Group RFC 3491, but does not perform the additional conversion to Punycode.
IdnToUnicode;Converts the Punycode form of an internationalized domain name (IDN) or another internationalized label to the normal Unicode UTF-16 encoding syntax.
IsCalendarLeapYear;Deprecated. Identifies whether the specified year is a leap year within the given era for the specific calendar.
IsNLSDefinedString;Determines if each character in a string has a defined result for a specified NLS capability.
IsNormalizedString;Verifies that a string is normalized according to Unicode 4.0 TR#15.
IsValidCodePage;Determines if a specified code page is valid.
IsValidLanguageGroup;Determines if a language group is installed or supported on the operating system.
IsValidLocale;Determines if the specified locale is installed or supported on the operating system.
IsValidLocaleName;Determines if the specified locale name is valid for a locale that is installed or supported on the operating system.
IsValidNLSVersion;Determines if the NLS version is valid for a given NLS function.
LCIDToLocaleName;Converts a locale identifier to a locale name.
LCMapString;For a locale specified by identifier, maps one input character string to another using a specified transformation, or generates a sort key for the input string.
LCMapStringEx;For a locale specified by name, maps one input character string to another using a specified transformation, or generates a sort key for the input string.
LoadStringByReference;Unsupported. This function may be altered or unavailable. Instead, use SHLoadIndirectString.
LocaleNameToLCID;Converts a locale name to locale identifier.
NormalizeString;Normalizes characters of a text string according to Unicode 4.0 TR#15.
NotifyUILanguageChange;Unsupported. This function may be altered or unavailable.
ResolveLocaleName;Finds a possible locale name match for the supplied name.
RtlIsValidLocaleName;Determines if a specified locale is installed or supported on the operating system.
SetCalendarInfo;Sets an item of locale information for a calendar.
SetLocaleInfo;Sets an item of information in the user override portion of the current locale.
SetThreadLocale;Sets the current locale of the calling thread.
SetUserGeoID;Sets the geographical location identifier for the user.
UpdateCalendarDayOfWeek;Gets the day of week that corresponds with a specified day and populates the DayOfWeek field in the given CALDATETIME structure.
VerifyScripts;Compares two enumerated lists of scripts.

[Structured Exception Handling]
AbnormalTermination;Indicates whether the __try block of a termination handler terminated normally.
AddVectoredContinueHandler;Registers a vectored continue handler.
AddVectoredExceptionHandler;Registers a vectored exception handler.
GetExceptionCode;Retrieves a code that identifies the type of exception that occurred.
GetExceptionInformation;Retrieves a machine-independent description of an exception, and information about the machine state that existed for the thread when the exception occurred.
RaiseException;Raises an exception in the calling thread.
RemoveVectoredContinueHandler;Unregisters a vectored continue handler.
RemoveVectoredExceptionHandler;Unregisters a vectored exception handler.
RtlAddGrowableFunctionTable;Informs the system of a dynamic function table representing a region of memory containing code.
RtlDeleteGrowableFunctionTable;Informs the system that a previously reported dynamic function table is no longer in use.
RtlGrowFunctionTable;Reports that a dynamic function table has increased in size.
SetUnhandledExceptionFilter;Enables an application to supersede the top-level exception handler of each thread and process.
UnhandledExceptionFilter;Passes unhandled exceptions to the debugger, if the process is being debugged.
VectoredHandler;An application-defined function that serves as a vectored exception handler.;RtlAddFunctionTable;Adds a dynamic function table to the dynamic function table list.
RtlCaptureContext;Retrieves a context record in the context of the caller.
RtlDeleteFunctionTable;Removes a dynamic function table from the dynamic function table list.
RtlInstallFunctionTableCallback;Adds a dynamic function table to the dynamic function table list.
RtlRestoreContext;Restores the context of the caller to the specified context record.

[Error Handling]
Beep;Generates simple tones on the speaker.
CaptureStackbackTrace;Captures a stack back trace by walking up the stack and recording the information for each frame.
FatalAppExit;Displays a message box and terminates the application when the message box is closed.
FlashWindow;Flashes the specified window one time.
FlashWindowEx;Flashes the specified window.
FormatMessage;Formats a message string.
GetErrorMode;Retrieves the error mode for the current process.
GetLastError;Retrieves the calling thread's last-error code value.
GetThreadErrorMode;Retrieves the error mode for the calling thread.
MessageBeep;Plays a waveform sound.
RtlLookupFunctionEntry;Searches the active function tables for an entry that corresponds to the specified PC value.
RtlNtStatusToDosError;Retrieves the system error code that corresponds to the specified NT error code.
RtlPcToFileHeader;Retrieves the base address of the image that contains the specified PC value.
RtlUnwind;Initiates an unwind of procedure call frames.
RtlUnwind2;Initiates an unwind of procedure call frames.
RtlUnwindEx;Initiates an unwind of procedure call frames.
RtlVirtualUnwind;Retrieves the invocation context of the function that precedes the specified function context.
SetErrorMode;Controls whether the system will handle the specified types of serious errors, or whether the process will handle them.
SetLastError;Sets the last-error code for the calling thread.
SetLastErrorEx;Sets the last-error code for the calling thread.
SetThreadErrorMode;Controls whether the system will handle the specified types of serious errors or whether the calling thread will handle them.

[Version Information]
GetFileVersionInfo
GetFileVersionInfoEx
GetFileVersionInfoSize
GetFileVersionInfoSizeEx
VerFindFile
VerInstallFile
VerLanguageName
VerQueryValue

[System Information]
CeipIsOptedIn;Checks whether the user has opted in for SQM data collection as part of the Customer Experience Improvement Program (CEIP).
DnsHostnameToComputerName;Converts a DNS name to a NetBIOS name.
EnumSystemFirmwareTables;Enumerates all system firmware tables of the specified type.
ExpandEnvironmentStrings;Replaces environment-variable strings with their defined values.
GetComputerName;Retrieves the NetBIOS name of the local computer.
GetComputerNameEx;Retrieves the NetBIOS or DNS name of the local computer.
GetComputerObjectName;Retrieves the local computer's name in a specified format.
GetCurrentHwProfile;Retrieves the current hardware profile for the local computer.
GetFirmwareEnvironmentVariable;Retrieves the value of the specified firmware environment variable from NVRAM.
GetFirmwareEnvironmentVariableEx;Retrieves the value of the specified firmware environment variable and its attributes.
GetFirmwareType;Retrieves the firmware type of the local computer.
GetIntegratedDisplaySize;Retrieves the best estimate of the diagonal size of the built-in screen, in inches.
GetNativeSystemInfo;Retrieves information about the current system for an application running under WOW64.
GetProductInfo;Retrieves the product type for the operating system on the local computer, and maps the type to the product types supported by the specified operating system.
GetSystemDirectory;Retrieves the path of the system directory.
GetSystemFirmwareTable;Retrieves the specified firmware table from the firmware table provider.
GetSystemInfo;Retrieves information about the current system.
GetSystemRegistryQuota;Retrieves the current size of the registry and the maximum size that the registry is allowed to attain on the system.
GetSystemWindowsDirectory;Retrieves the path of the shared Windows directory on a multi-user system.
GetSystemWow64Directory;Retrieves the path of the system directory used by WOW64.
GetUserName;Retrieves the user name of the current thread.
GetUserNameEx;Retrieves the name of the user or other security principal associated with the calling thread. You can specify the format of the returned name.
GetVersion;Retrieves the version number of the current operating system.
GetVersionEx;Retrieves information about the current operating system.
GetWindowsDirectory;Retrieves the path of the Windows directory.
IsNativeVhdBoot;Indicates if the OS was booted from a VHD container.
IsProcessorFeaturePresent;Determines whether a processor feature is supported by the current computer.
IsWow64Message;Determines whether the last message read from the queue of the current process originated from a WOW64 process.
IsWow64Process;Determines whether a process is running under WOW64.
QueryPerformanceCounter;Retrieves the current value of the high-resolution performance counter.
QueryPerformanceFrequency;Retrieves the frequency of the high-resolution performance counter.
RtlGetSuiteMask;Retrieves a bit mask that identifies the product suites available on the system. If this function is called in an application that runs in the context of a server silo, the suite mask for the server silo is retrieved instead.
SetComputerName;Sets a new NetBIOS name for the local computer.
SetComputerNameEx;Sets a new NetBIOS or DNS name for the local computer.
SetFirmwareEnvironmentVariable;Sets the value of the specified firmware environment variable.
SetFirmwareEnvironmentVariableEx;Sets the value of the specified firmware environment variable and its attributes.
TranslateName;Converts a directory service object name from one format to another.
VerifyVersionInfo;Compares a set of version requirements to the values for the current operating system.
VerSetConditionMask;Builds the condition mask for the VerifyVersionInfo function.
Wow64DisableWow64FsRedirection;Disables file system redirection for the calling thread.
Wow64EnableWow64FsRedirection;Enables or disables file system redirection for the calling thread.
Wow64RevertWow64FsRedirection;Restores file system redirection for the calling thread.

[Handle and Object]
CloseHandle;Closes an open object handle.
CompareObjectHandles;Compares two object handles to determine if they refer to the same underlying kernel object.
DuplicateHandle;Duplicates an object handle.
GetHandleInformation;Retrieves certain properties of an object handle.
SetHandleInformation;Sets certain properties of an object handle.

[Unicode and Character Set]
GetTextCharset;Retrieves a character set identifier for the font that is currently selected into a specified device context.
GetTextCharsetInfo;Retrieves information about the character set of the font that is currently selected into a specified device context.
IsDBCSLeadByte;Determines if a specified character is a lead byte for the system default Windows ANSI code page (CP_ACP).
IsDBCSLeadByteEx;Determines if a specified character is potentially a lead byte.
IsTextUnicode;Determines if a buffer is likely to contain a form of Unicode text.
MultiByteToWideChar;Maps a character string to a UTF-16 (wide character) string.
TranslateCharsetInfo;Translates character set information and sets all members of a destination structure to appropriate values.
WideCharToMultiByte;Maps a UTF-16 (wide character) string to a new character string.
BytesToUnicode;Do not use.
NlsDllCodePageTranslation;Do not use.
UnicodeToBytes;Do not use.

[Directory Management]
CreateDirectory;Creates a new directory.
CreateDirectoryEx;Creates a new directory with the attributes of a specified template directory.
CreateDirectoryTransacted;Creates a new directory as a transacted operation, with the attributes of a specified template directory.
FindCloseChangeNotification;Stops change notification handle monitoring.
FindFirstChangeNotification;Creates a change notification handle and sets up initial change notification filter conditions.
FindNextChangeNotification;Requests that the operating system signal a change notification handle the next time it detects an appropriate change.
GetCurrentDirectory;Retrieves the current directory for the current process.
ReadDirectoryChangesW;Retrieves information that describes the changes within the specified directory.
RemoveDirectory;Deletes an existing empty directory.
RemoveDirectoryTransacted;Deletes an existing empty directory as a transacted operation.
SetCurrentDirectory;Changes the current directory for the current process.

[Console]
AddConsoleAlias;Defines a console alias for the specified executable.
AllocConsole;Allocates a new console for the calling process.
AttachConsole;Attaches the calling process to the console of the specified process.
CreateConsoleScreenBuffer;Creates a console screen buffer.
FillConsoleOutputAttribute;Sets the text and background color attributes for a specified number of character cells.
FillConsoleOutputCharacter;Writes a character to the console screen buffer a specified number of times.
FlushConsoleInputBuffer;Flushes the console input buffer.
FreeConsole;Detaches the calling process from its console.
GenerateConsoleCtrlEvent;Sends a specified signal to a console process group that shares the console associated with the calling process.
GetConsoleAlias;Retrieves the specified alias for the specified executable.
GetConsoleAliases;Retrieves all defined console aliases for the specified executable.
GetConsoleAliasesLength;Returns the size, in bytes, of the buffer needed to store all of the console aliases for the specified executable.
GetConsoleAliasExes;Retrieves the names of all executables with console aliases defined.
GetConsoleAliasExesLength;Returns the size, in bytes, of the buffer needed to store the names of all executables that have console aliases defined.
GetConsoleCP;Retrieves the input code page used by the console associated with the calling process.
GetConsoleCursorInfo;Retrieves information about the size and visibility of the cursor for the specified console screen buffer.
GetConsoleDisplayMode;Retrieves the display mode of the current console.
GetConsoleFontSize;Retrieves the size of the font used by the specified console screen buffer.
GetConsoleHistoryInfo;Retrieves the history settings for the calling process's console.
GetConsoleMode;Retrieves the current input mode of a console's input buffer or the current output mode of a console screen buffer.
GetConsoleOriginalTitle;Retrieves the original title for the current console window.
GetConsoleOutputCP;Retrieves the output code page used by the console associated with the calling process.
GetConsoleProcessList;Retrieves a list of the processes attached to the current console.
GetConsoleScreenBufferInfo;Retrieves information about the specified console screen buffer.
GetConsoleScreenBufferInfoEx;Retrieves extended information about the specified console screen buffer.
GetConsoleSelectionInfo;Retrieves information about the current console selection.
GetConsoleTitle;Retrieves the title for the current console window.
GetConsoleWindow;Retrieves the window handle used by the console associated with the calling process.
GetCurrentConsoleFont;Retrieves information about the current console font.
GetCurrentConsoleFontEx;Retrieves extended information about the current console font.
GetLargestConsoleWindowSize;Retrieves the size of the largest possible console window.
GetNumberOfConsoleInputEvents;Retrieves the number of unread input records in the console's input buffer.
GetNumberOfConsoleMouseButtons;Retrieves the number of buttons on the mouse used by the current console.
GetStdHandle;Retrieves a handle for the standard input, standard output, or standard error device.
HandlerRoutine;An application-defined function used with the SetConsoleCtrlHandler function.
PeekConsoleInput;Reads data from the specified console input buffer without removing it from the buffer.
ReadConsole;Reads character input from the console input buffer and removes it from the buffer.
ReadConsoleInput;Reads data from a console input buffer and removes it from the buffer.
ReadConsoleOutput;Reads character and color attribute data from a rectangular block of character cells in a console screen buffer.
ReadConsoleOutputAttribute;Copies a specified number of foreground and background color attributes from consecutive cells of a console screen buffer.
ReadConsoleOutputCharacter;Copies a number of characters from consecutive cells of a console screen buffer.
ScrollConsoleScreenBuffer;Moves a block of data in a screen buffer.
SetConsoleActiveScreenBuffer;Sets the specified screen buffer to be the currently displayed console screen buffer.
SetConsoleCP;Sets the input code page used by the console associated with the calling process.
SetConsoleCtrlHandler;Adds or removes an application-defined HandlerRoutine from the list of handler functions for the calling process.
SetConsoleCursorInfo;Sets the size and visibility of the cursor for the specified console screen buffer.
SetConsoleCursorPosition;Sets the cursor position in the specified console screen buffer.
SetConsoleDisplayMode;Sets the display mode of the specified console screen buffer.
SetConsoleHistoryInfo;Sets the history settings for the calling process's console.
SetConsoleMode;Sets the input mode of a console's input buffer or the output mode of a console screen buffer.
SetConsoleOutputCP;Sets the output code page used by the console associated with the calling process.
SetConsoleScreenBufferInfoEx;Sets extended information about the specified console screen buffer.
SetConsoleScreenBufferSize;Changes the size of the specified console screen buffer.
SetConsoleTextAttribute;Sets the foreground (text) and background color attributes of characters written to the console screen buffer.
SetConsoleTitle;Sets the title for the current console window.
SetConsoleWindowInfo;Sets the current size and position of a console screen buffer's window.
SetCurrentConsoleFontEx;Sets extended information about the current console font.
SetStdHandle;Sets the handle for the standard input, standard output, or standard error device.
WriteConsole;Writes a character string to a console screen buffer beginning at the current cursor location.
WriteConsoleInput;Writes data directly to the console input buffer.
WriteConsoleOutput;Writes character and color attribute data to a specified rectangular block of character cells in a console screen buffer.
WriteConsoleOutputAttribute;Copies a number of foreground and background color attributes to consecutive cells of a console screen buffer.
WriteConsoleOutputCharacter;Copies a number of characters to consecutive cells of a console screen buffer.

[Volume Management]
DefineDosDevice;Defines, redefines, or deletes MS-DOS device names.
DeleteVolumeMountPoint;Deletes a drive letter or mounted folder.
FindFirstVolume;Retrieves the name of a volume on a computer.
FindFirstVolumeMountPoint;Retrieves the name of a mounted folder on the specified volume.
FindNextVolume;Continues a volume search started by a call to the FindFirstVolume function.
FindNextVolumeMountPoint;Continues a mounted folder search started by a call to the FindFirstVolumeMountPoint function.
FindVolumeClose;Closes the specified volume search handle.
FindVolumeMountPointClose;Closes the specified mounted folder search handle.
GetDriveType;Determines whether a disk drive is a removable, fixed, CD-ROM, RAM disk, or network drive.
GetLogicalDrives;Retrieves a bitmask representing the currently available disk drives.
GetLogicalDriveStrings;Fills a buffer with strings that specify valid drives in the system.
GetVolumeInformation;Retrieves information about the file system and volume associated with the specified root directory.
GetVolumeInformationByHandleW;Retrieves information about the file system and volume associated with the specified file.
GetVolumeNameForVolumeMountPoint;Retrieves a volume GUID path for the volume that is associated with the specified volume mount point ( drive letter, volume GUID path, or mounted folder).
GetVolumePathName;Retrieves the volume mount point where the specified path is mounted.
GetVolumePathNamesForVolumeName;Retrieves a list of drive letters and mounted folder paths for the specified volume.
QueryDosDevice;Retrieves information about MS-DOS device names.
SetVolumeLabel;Sets the label of a file system volume.
SetVolumeMountPoint;Associates a volume with a drive letter or a directory on another volume.

[Resource]
BeginUpdateResource
CopyImage
EndUpdateResource
EnumResLangProc
EnumResNameProc
EnumResourceLanguages
EnumResourceLanguagesEx
EnumResourceNames
EnumResourceNamesEx
EnumResourceTypes
EnumResourceTypesEx
EnumResTypeProc
FindResource
FindResourceEx
FreeResource
LoadImage
LoadResource
LockResource
SizeofResource
UpdateResource

[Disk Management]
GetDiskFreeSpace;Retrieves information about the specified disk, including the amount of free space on the disk.
GetDiskFreeSpaceEx;Retrieves information about the amount of space that is available on a disk volume, which is the total amount of space, the total amount of free space, and the total amount of free space available to the user that is associated with the calling thread.
CreateFile;Creates or opens a file or I/O device. The most commonly used I/O devices are as follows: file, file stream, directory, physical disk, volume, console buffer, tape drive, communications resource, mailslot, and pipe.
DeleteFile;Deletes an existing file.

[Atom]
AddAtom
DeleteAtom
FindAtom
GetAtomName
GlobalAddAtom
GlobalDeleteAtom
GlobalFindAtom
GlobalGetAtomName
InitAtomTable

[Delphi]
SetHandleCount;Sets the number of file handles available to a process. 

[Registry]
GetSystemRegistryQuota;Retrieves the current size of the registry and the maximum size that the registry is allowed to attain on the system.
RegCloseKey;Closes a handle to the specified registry key.
RegConnectRegistry;Establishes a connection to a predefined registry handle on another computer.
RegCopyTree;Copies the specified registry key, along with its values and subkeys, to the specified destination key.
RegCreateKeyEx;Creates the specified registry key.
RegCreateKeyTransacted;Creates the specified registry key and associates it with a transaction.
RegDeleteKey;Deletes a subkey and its values.
RegDeleteKeyEx;Deletes a subkey and its values from the specified platform-specific view of the registry.
RegDeleteKeyTransacted;Deletes a subkey and its values from the specified platform-specific view of the registry as a transacted operation.
RegDeleteKeyValue;Removes the specified value from the specified registry key and subkey.
RegDeleteTree;Deletes the subkeys and values of the specified key recursively.
RegDeleteValue;Removes a named value from the specified registry key.
RegDisablePredefinedCache;Disables handle caching for the predefined registry handle for HKEY_CURRENT_USER for the current process.
RegDisablePredefinedCacheEx;Disables handle caching for all predefined registry handles for the current process.
RegDisableReflectionKey;Disables registry reflection for the specified key.
RegEnableReflectionKey;Enables registry reflection for the specified disabled key.
RegEnumKeyEx;Enumerates the subkeys of the specified open registry key.
RegEnumValue;Enumerates the values for the specified open registry key.
RegFlushKey;Writes all attributes of the specified open registry key into the registry.
RegGetKeySecurity;Retrieves a copy of the security descriptor protecting the specified open registry key.
RegGetValue;Retrieves the type and data for the specified registry value.
RegLoadKey;Creates a subkey under HKEY_USERS or HKEY_LOCAL_MACHINE and stores registration information from a specified file into that subkey.
RegLoadMUIString;Loads the specified string from the specified key and subkey.
RegNotifyChangeKeyValue;Notifies the caller about changes to the attributes or contents of a specified registry key.
RegOpenCurrentUser;Retrieves a handle to the HKEY_CURRENT_USER key for the user the current thread is impersonating.
RegOpenKeyEx;Opens the specified registry key.
RegOpenKeyTransacted;Opens the specified registry key and associates it with a transaction.
RegOpenUserClassesRoot;Retrieves a handle to the HKEY_CLASSES_ROOT key for the specified user.
RegOverridePredefKey;Maps a predefined registry key to a specified registry key.
RegQueryInfoKey;Retrieves information about the specified registry key.
RegQueryMultipleValues;Retrieves the type and data for a list of value names associated with an open registry key.
RegQueryReflectionKey;Determines whether reflection has been disabled or enabled for the specified key.
RegQueryValueEx;Retrieves the type and data for a specified value name associated with an open registry key.
RegReplaceKey;Replaces the file backing a registry key and all its subkeys with another file.
RegRestoreKey;Reads the registry information in a specified file and copies it over the specified key.
RegSaveKey;Saves the specified key and all of its subkeys and values to a new file.
RegSaveKeyEx;Saves the specified key and all of its subkeys and values to a new file. You can specify the format for the saved key or hive.
RegSetKeyValue;Sets the data for the specified value in the specified registry key and subkey.
RegSetKeySecurity;Sets the security of an open registry key.
RegSetValueEx;Sets the data and type of a specified value under a registry key.
RegUnLoadKey;Unloads the specified registry key and its subkeys from the registry.

<Initialization-File only 16-bit>
GetPrivateProfileInt;Retrieves an integer associated with a key in the specified section of an initialization file.
GetPrivateProfileSection;Retrieves all the keys and values for the specified section of an initialization file.
GetPrivateProfileSectionNames;Retrieves the names of all sections in an initialization file.
GetPrivateProfileString;Retrieves a string from the specified section in an initialization file.
GetPrivateProfileStruct;Retrieves the data associated with a key in the specified section of an initialization file.
GetProfileInt;Retrieves an integer from a key in the specified section of the Win.ini file.
GetProfileSection;Retrieves all the keys and values for the specified section of the Win.ini file.
GetProfileString;Retrieves the string associated with a key in the specified section of the Win.ini file.
WritePrivateProfileSection;Replaces the keys and values for the specified section in an initialization file.
WritePrivateProfileString;Copies a string into the specified section of an initialization file.
WritePrivateProfileStruct;Copies data into a key in the specified section of an initialization file.
WriteProfileSection;Replaces the contents of the specified section in the Win.ini file with specified keys and values.
WriteProfileString;Copies a string into the specified section of the Win.ini file.

<Obsolete>
RegCreateKey
RegEnumKey
RegOpenKey
RegQueryValue
RegSetValue

[Message]
BroadcastSystemMessage
BroadcastSystemMessageEx
DispatchMessage
GetInputState
GetMessage
GetMessageExtraInfo
GetMessagePos
GetMessageTime
GetQueueStatus
InSendMessage
InSendMessageEx
PeekMessage
PostMessage
PostQuitMessage
PostThreadMessage
RegisterWindowMessage
ReplyMessage
SendAsyncProc
SendMessage
SendMessageCallback
SendMessageTimeout
SendNotifyMessage
SetMessageExtraInfo
TranslateMessage
WaitMessage

[Dialog Box]
CreateDialog
CreateDialogIndirect
CreateDialogIndirectParam
CreateDialogParam
DefDlgProc
DialogBox
DialogBoxIndirect
DialogBoxIndirectParam
DialogBoxParam
DialogProc
EndDialog
GetDialogBaseUnits
GetDlgCtrlID
GetDlgItem
GetDlgItemInt
GetDlgItemText
GetNextDlgGroupItem
GetNextDlgTabItem
IsDialogMessage
MapDialogRect
MessageBox
MessageBoxEx
MessageBoxIndirect
SendDlgItemMessage
SetDlgItemInt
SetDlgItemText

[Windows Class]
GetClassInfo
GetClassInfoEx
GetClassLong
GetClassLongPtr
GetClassName
GetClassWord
GetWindowLong
GetWindowLongPtr
RegisterClass
RegisterClassEx
SetClassLong
SetClassLongPtr
SetClassWord
SetWindowLong
SetWindowLongPtr
UnregisterClass

[Mouse Input]
_TrackMouseEvent;Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time. This function calls TrackMouseEvent if it exists, otherwise it emulates it.
DragDetect;Captures the mouse and tracks its movement until the user releases the left button, presses the ESC key, or moves the mouse outside the drag rectangle around the specified point. The width and height of the drag rectangle are specified by the SM_CXDRAG and SM_CYDRAG values returned by the GetSystemMetrics function.
GetCapture;Retrieves a handle to the window (if any) that has captured the mouse. Only one window at a time can capture the mouse; this window receives mouse input whether or not the cursor is within its borders.
GetDoubleClickTime;Retrieves the current double-click time for the mouse. A double-click is a series of two clicks of the mouse button, the second occurring within a specified time after the first. The double-click time is the maximum number of milliseconds that may occur between the first and second click of a double-click. The maximum double-click time is 5000 milliseconds.
GetMouseMovePointsEx;Retrieves a history of up to 64 previous coordinates of the mouse or pen.
mouse_event;The mouse_event function synthesizes mouse motion and button clicks.
ReleaseCapture;Releases the mouse capture from a window in the current thread and restores normal mouse input processing. A window that has captured the mouse receives all mouse input, regardless of the position of the cursor, except when a mouse button is clicked while the cursor hot spot is in the window of another thread.
SetCapture;Sets the mouse capture to the specified window belonging to the current thread.
SetDoubleClickTime;Sets the double-click time for the mouse. A double-click is a series of two clicks of a mouse button, the second occurring within a specified time after the first. The double-click time is the maximum number of milliseconds that may occur between the first and second clicks of a double-click.
SwapMouseButton;Reverses or restores the meaning of the left and right mouse buttons.
TrackMouseEvent;Posts messages when the mouse pointer leaves a window or hovers over a window for a specified amount of time.

[Painting and Drawing]
BeginPaint;Prepares a window for painting.
DrawAnimatedRects;Draws a rectangle and animates it to indicate icon or window activity.
DrawCaption;Draws a window caption.
DrawEdge;Draws one or more edges of rectangle.
DrawFocusRect;Draws a rectangle in the style that indicates the rectangle has the focus.
DrawFrameControl;Draws a frame control.
DrawState;Displays an image and applies a visual effect to indicate a state.
DrawStateProc;A callback function that renders a complex image for DrawState.
EndPaint;Marks the end of painting in a window.
ExcludeUpdateRgn;Prevents drawing within invalid areas of a window.
GdiFlush;Flushes the calling thread's current batch.
GdiGetBatchLimit;Returns the maximum number of function calls that can be accumulated in the calling thread's current batch.
GdiSetBatchLimit;Sets the maximum number of function calls that can be accumulated in the calling thread's current batch.
GetBkColor;Returns the background color for a device context.
GetBkMode;Returns the background mix mode for a device context.
GetBoundsRect;Gets the accumulated bounding rectangle for a device context.
GetROP2;Gets the foreground mix mode of a device context.
GetUpdateRect;Gets the coordinates of the smallest rectangle that encloses the update region of a window.
GetUpdateRgn;Gets the update region of a window.
GetWindowDC;Gets the device context for a window, including title bar, menus, and scroll bars.
GetWindowRgn;Gets a copy of the window region of a window.
GetWindowRgnBox;Gets the dimensions of the tightest bounding rectangle for the window region of a window.
GrayString;Draws gray text at a location.
InvalidateRect;Adds a rectangle to a window's update region.
InvalidateRgn;Invalidates the client area within a region.
LockWindowUpdate;Disables or enables drawing in a window.
OutputProc;A callback function used with the GrayString function. It is used to draw a string.
PaintDesktop;Fills the clipping region in a device context with a pattern.
RedrawWindow;Updates a region in a window's client area.
SetBkColor;Sets the background to a color value.
SetBkMode;Sets the background mix mode of a device context.
SetBoundsRect;Controls the accumulation of bounding rectangle information for a device context.
SetROP2;Sets the foreground mix mode.
SetWindowRgn;Sets the window region of a window.
UpdateWindow;Updates the client area of a window.
ValidateRect;Validates the client area within a rectangle.
ValidateRgn;Validates the client area within a region.
WindowFromDC;Returns a handle to the window associated with a device context.

[Cryptography Functions]
<CryptXML>
CryptXmlCreateReference;Creates a reference to an XML signature.
CryptXmlAddObject;Adds the Object element to the Signature in the Document Context opened for encoding.
CryptXmlClose;Closes a cryptographic XML object handle.
CryptXmlDigestReference;Used by an application to digest the resolved reference. This function applies transforms before updating the digest.
CryptXmlDllCloseDigest;Frees the CRYPT_XML_DIGEST allocated by the CryptXmlDllCreateDigest function.
CryptXmlDllCreateDigest;Creates a digest object for the specified method.
CryptXmlDllCreateKey;Parses the KeyValue element and creates a Cryptography API: Next Generation (CNG) BCrypt key handle to verify a signature.
CryptXmlDllDigestData;Puts data into the digest.
CryptXmlDllEncodeAlgorithm;Encodes SignatureMethod or DigestMethod elements for agile algorithms with default parameters.
CryptXmlDllEncodeKeyValue;Encodes a KeyValue element.
CryptXmlDllFinalizeDigest;Retrieves the digest value.
CryptXmlDllGetAlgorithmInfo;Decodes the XML algorithm and returns information about the algorithm.
CryptXmlDllGetInterface;Retrieves a pointer to the cryptographic extension functions for the specified algorithm.
CryptXmlDllSignData;Signs data.
CryptXmlDllVerifySignature;Verifies a signature.
CryptXmlEncode;Encodes signature data by using the supplied XML writer callback function.
CryptXmlGetAlgorithmInfo;Decodes the CRYPT_XML_ALGORITHM structure and returns information about the algorithm.
CryptXmlGetDocContext;Returns the document context specified by the supplied handle.
CryptXmlGetReference;Returns the Reference element specified by the supplied handle.
CryptXmlGetSignature;Returns an XML Signature element.
CryptXmlGetStatus;Returns a CRYPT_XML_STATUS structure that contains status information about the object specified by the supplied handle.
CryptXmlGetTransforms;Returns information about the default transform chain engine.
CryptXmlImportPublicKey;Imports the public key specified by the supplied handle.
CryptXmlOpenToEncode;Opens an XML digital signature to encode and returns a handle of the opened Signature element. The handle encapsulates a document context with a single CRYPT_XML_SIGNATURE structure and remains open until the CryptXmlClose function is called.
CryptXmlOpenToDecode;Opens an XML digital signature to decode and returns the handle of the document context that encapsulates a CRYPT_XML_SIGNATURE structure. The document context can include one or more Signature elements.
CryptXmlSetHMACSecret;Sets the HMAC secret on the handle before calling the CryptXmlSign or CryptXmlVerify function.
CryptXmlSign;Creates a cryptographic signature of a SignedInfo element.
CryptXmlVerifySignature;Performs a cryptographic signature validation of a SignedInfo element.
PFN_CRYPT_XML_WRITE_CALLBACK;Creates a transform for a specified data provider.
PFN_CRYPT_XML_CREATE_TRANSFORM;Writes cryptographic XML data.
PFN_CRYPT_XML_DATA_PROVIDER_READ;Reads cryptographic XML data.
PFN_CRYPT_XML_DATA_PROVIDER_CLOSE;Releases the cryptographic XML data provider.
PFN_CRYPT_XML_ENUM_ALG_INFO;Enumerates predefined and registered CRYPT_XML_ALGORITHM_INFO entries.

<Signer>
SignerFreeSignerContext;Frees a SIGNER_CONTEXT structure allocated by a previous call to the SignerSignEx function.
SignError;Calls the GetLastError function and converts the return code to an HRESULT.
SignerSign;Signs the specified file.
SignerSignEx;Signs the specified file and returns a pointer to the signed data.
SignerSignEx2;Signs and time stamps the specified file, allowing multiple nested signatures.
SignerTimeStamp;Time stamps the specified subject. This function supports Authenticode time stamping. To perform X.509 Public Key Infrastructure (RFC 3161) time stamping, use the SignerTimeStampEx2 function.
SignerTimeStampEx;Time stamps the specified subject and optionally returns a pointer to a SIGNER_CONTEXT structure that contains a pointer to a BLOB. This function supports Authenticode time stamping. To perform X.509 Public Key Infrastructure (RFC 3161) time stamping, use the SignerTimeStampEx2 function.
SignerTimeStampEx2;Time stamps the specified subject and optionally returns a pointer to a SIGNER_CONTEXT structure that contains a pointer to a BLOB. This function can be used to perform X.509 Public Key Infrastructure, RFC 3161–compliant, time stamps.
SignerTimeStampEx3;Time stamps the specified subject and supports setting time stamps on multiple signatures.

<Service Provider>
CryptAcquireContext;Acquires a handle to the current user's key container within a particular CSP.
CryptContextAddRef;Increments the reference count on an HCRYPTPROV handle.
CryptEnumProviders;Enumerates the providers on a computer.
CryptEnumProviderTypes;Enumerates the types of providers supported on the computer.
CryptGetDefaultProvider;Determines the default CSP either for the current user or for the computer for a specified provider type.
CryptGetProvParam;Retrieves the parameters that govern the operations of a CSP.
CryptInstallDefaultContext;Installs a previously acquired HCRYPTPROV context to be used as a default context.
CryptReleaseContext;Releases the handle acquired by the CryptAcquireContext function.
CryptSetProvider and CryptSetProviderEx;Specifies the user default CSP for a particular CSP type.
CryptSetProvParam;Specifies attributes of a CSP.
CryptUninstallDefaultContext;Removes a default context previously installed by CryptInstallDefaultContext.
FreeCryptProvFromCertEx;Releases the handle either to a cryptographic service provider (CSP) or to a Cryptography API: Next Generation (CNG) key.

<Key Generation/Exchange>
Function	Description
CryptDeriveKey;Creates a key derived from a password.
CryptDestroyKey;Destroys a key.
CryptDuplicateKey;Makes an exact copy of a key, including the state of the key.
CryptExportKey;Transfers a key from the CSP into a key BLOB in the application's memory space.
CryptGenKey;Creates a random key.
CryptGenRandom;Generates random data.
CryptGetKeyParam;Retrieves a key's parameters.
CryptGetUserKey;Gets a handle to the key exchange or signature key.
CryptImportKey;Transfers a key from a key BLOB to a CSP.
CryptSetKeyParam;Specifies a key's parameters.

<Object Decoding/Encoding>
CryptDecodeObject;Decodes a structure of type lpszStructType.
CryptDecodeObjectEx;Decodes a structure of type lpszStructType. CryptDecodeObjectEx supports the one-pass memory allocation option.
CryptEncodeObject;Encodes a structure of type lpszStructType.
CryptEncodeObjectEx;Encodes a structure of type lpszStructType. CryptEncodeObjectEx supports the one-pass memory allocation option.

<Data Encryption/Decryption>
CryptDecrypt;Decrypts a section of ciphertext by using the specified encryption key.
CryptEncrypt;Encrypts a section of plaintext by using the specified encryption key.
CryptProtectData;Performs encryption on the data in a DATA_BLOB structure.
CryptProtectMemory;Encrypts memory to protect sensitive information.
CryptUnprotectData;Performs a decryption and integrity check of the data in a DATA_BLOB.
CryptUnprotectMemory;Decrypts memory that was encrypted using CryptProtectMemory.

<Hash and Digital Signature>
CryptCreateHash;Creates an empty hash object.
CryptDestroyHash;Destroys a hash object.
CryptDuplicateHash;Duplicates a hash object.
CryptGetHashParam;Retrieves a hash object parameter.
CryptHashData;Hashes a block of data, adding it to the specified hash object.
CryptHashSessionKey;Hashes a session key, adding it to the specified hash object.
CryptSetHashParam;Sets a hash object parameter.
CryptSignHash;Signs the specified hash object.
CryptUIWizDigitalSign;Displays a wizard that digitally signs a document or a BLOB.
CryptUIWizFreeDigitalSignContext;Releases a pointer to a CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT structure.
CryptVerifySignature;Verifies a digital signature, given a handle to the hash object.
PFNCFILTERPROC;Filters the certificates that appear in the digital signature wizard displayed by the CryptUIWizDigitalSign function.

<Certificate Store>
CryptCreateHash;Creates an empty hash object.
CryptDestroyHash;Destroys a hash object.
CryptDuplicateHash;Duplicates a hash object.
CryptGetHashParam;Retrieves a hash object parameter.
CryptHashData;Hashes a block of data, adding it to the specified hash object.
CryptHashSessionKey;Hashes a session key, adding it to the specified hash object.
CryptSetHashParam;Sets a hash object parameter.
CryptSignHash;Signs the specified hash object.
CryptUIWizDigitalSign;Displays a wizard that digitally signs a document or a BLOB.
CryptUIWizFreeDigitalSignContext;Releases a pointer to a CRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT structure.
CryptVerifySignature;Verifies a digital signature, given a handle to the hash object.
PFNCFILTERPROC;Filters the certificates that appear in the digital signature wizard displayed by the CryptUIWizDigitalSign function.

<Certificate and Certificate Store Maintenance>
CertAddSerializedElementToStore;Adds the serialized certificate or CRL element to the store.
CertCreateContext;Creates the specified context from the encoded bytes. The new context is not put into a store.
CertEnumSubjectInSortedCTL;Enumerates the TrustedSubjects in a sorted CTL context.
CertFindSubjectInCTL;Finds the specified subject in a CTL.
CertFindSubjectInSortedCTL;Finds the specified subject in a sorted CTL.
OpenPersonalTrustDBDialog	Displays the Certificates dialog box.
OpenPersonalTrustDBDialogEx Displays the Certificates dialog box.

<Certificate>
CertAddCertificateContextToStore;Adds a certificate context to the certificate store.
CertAddCertificateLinkToStore;Adds a link in a certificate store to a certificate context in a different store.
CertAddEncodedCertificateToStore;Converts the encoded certificate to a certificate context, and then adds the context to the certificate store.
CertAddRefServerOcspResponse;Increments the reference count for an HCERT_SERVER_OCSP_RESPONSE handle.
CertAddRefServerOcspResponseContext;Increments the reference count for a CERT_SERVER_OCSP_RESPONSE_CONTEXT structure.
CertCloseServerOcspResponse;Closes an online certificate status protocol (OCSP) server response handle.
CertCreateCertificateContext;Creates a certificate context from an encoded certificate. The created context is not put in a certificate store.
CertCreateSelfSignCertificate;Creates a self-signed certificate.
CertDeleteCertificateFromStore;Deletes a certificate from the certificate store.
CertDuplicateCertificateContext;Duplicates a certificate context by incrementing its reference count.
CertEnumCertificatesInStore;Enumerates the certificate contexts in the certificate store.
CertFindCertificateInStore;Finds the first, or next, certificate context in the certificate store that meets a search criterion.
CertFreeCertificateContext;Frees a certificate context.
CertGetIssuerCertificateFromStore;Gets a certificate context from the certificate store for the first, or next, issuer of the specified subject certificate.
CertGetServerOcspResponseContext;Retrieves a non-blocking, time valid online certificate status protocol (OCSP) response context for the specified handle.
CertGetSubjectCertificateFromStore;Gets from the certificate store the subject certificate context, which is uniquely identified by its issuer and serial number.
CertGetValidUsages;Returns an array of usages that consist of the intersection of the valid usages for all certificates in an array of certificates.
CertOpenServerOcspResponse;Opens a handle to an online certificate status protocol (OCSP) response associated with a server certificate chain.
CertRetrieveLogoOrBiometricInfo;Performs a URL retrieval of logo or biometric information specified in either the szOID_LOGOTYPE_EXT or szOID_BIOMETRIC_EXT certificate extension.
CertSelectCertificate;Presents a dialog box that allows the user to select certificates from a set of certificates that match a given criteria.
CertSelectCertificateChains;Retrieves certificate chains based on specified selection criteria.
CertSelectionGetSerializedBlob;A helper function used to retrieve a serialized certificate BLOB from a CERT_SELECTUI_INPUT structure.
CertSerializeCertificateStoreElement;Serializes a certificate context's encoded certificate and an encoded representation of its properties.
CertVerifySubjectCertificateContext;Performs the enabled verification checks on the subject certificate using the issuer.
CryptUIDlgCertMgr;Displays a dialog box that allows the user to manage certificates.
CryptUIDlgSelectCertificate;Displays a dialog box that allows a user to select a certificate.
CryptUIDlgSelectCertificateFromStore;Displays a dialog box that allows the selection of a certificate from a specified store.
CryptUIDlgViewCertificate;Presents a dialog box that displays a specified certificate.
CryptUIDlgViewContext;Displays a certificate, CRL, or CTL.
CryptUIDlgViewSignerInfo;Displays a dialog box that contains the signer information for a signed message.
GetFriendlyNameOfCert;Retrieves the display name for a certificate.
RKeyCloseKeyService;Closes a key service handle.
RKeyOpenKeyService;Opens a key service handle on a remote computer.
RKeyPFXInstall;Installs a certificate on a remote computer.

<Certificate Revokation List>
CertAddCRLContextToStore;Adds a CRL context to the certificate store.
CertAddCRLLinkToStore;Adds a link in a store to a CRL context in a different store.
CertAddEncodedCRLToStore;Converts the encoded CRL to a CRL context, and then adds the context to the certificate store.
CertCreateCRLContext;Creates a CRL context from an encoded CRL. The created context is not put in a certificate store.
CertDeleteCRLFromStore;Deletes a CRL from the certificate store.
CertDuplicateCRLContext;Duplicates a CRL context by incrementing the reference count.
CertEnumCRLsInStore;Enumerates the CRL contexts in a store.
CertFindCertificateInCRL;Searches the certificate revocation list (CRL) for the specified certificate.
CertFindCRLInStore;Finds the first, or next, CRL context in the certificate store that matches a specific criterion.
CertFreeCRLContext;Frees a CRL context.
CertGetCRLFromStore;Gets the first, or next, CRL context from the certificate store for the specified issuer certificate.
CertSerializeCRLStoreElement;Serializes the CRL context's encoded CRL and its properties.

<Certificate Trust List>
CertAddCTLContextToStore;Adds a CTL context to the certificate store.
CertAddCTLLinkToStore;Adds a link in a store to a CRL context in a different store.
CertAddEncodedCTLToStore;Converts the encoded CTL to a CTL context, and then adds the context to the certificate store.
CertCreateCTLContext;Creates a CTL context from an encoded certificate trust list. The created context is not put in a certificate store.
CertDeleteCTLFromStore;Deletes a CTL from the certificate store.
CertDuplicateCTLContext;Duplicates a CTL context by incrementing the reference count.
CertEnumCTLsInStore;Enumerates the CTL contexts in the certificate store.
CertFindCTLInStore;Finds the first, or next, CTL context in the certificate store that matches a specific criteria.
CertFreeCTLContext;Frees a CTL context.
CertModifyCertificatesToTrust;Modifies the set of certificates in a CTL for a given purpose.
CertSerializeCTLStoreElement;Serializes the CTL context's encoded CTL and its properties.

<Extended Property>
CertAddCTLContextToStore;Adds a CTL context to the certificate store.
CertAddCTLLinkToStore;Adds a link in a store to a CRL context in a different store.
CertAddEncodedCTLToStore;Converts the encoded CTL to a CTL context, and then adds the context to the certificate store.
CertCreateCTLContext;Creates a CTL context from an encoded certificate trust list. The created context is not put in a certificate store.
CertDeleteCTLFromStore;Deletes a CTL from the certificate store.
CertDuplicateCTLContext;Duplicates a CTL context by incrementing the reference count.
CertEnumCTLsInStore;Enumerates the CTL contexts in the certificate store.
CertFindCTLInStore;Finds the first, or next, CTL context in the certificate store that matches a specific criteria.
CertFreeCTLContext;Frees a CTL context.
CertModifyCertificatesToTrust;Modifies the set of certificates in a CTL for a given purpose.
CertSerializeCTLStoreElement;Serializes the CTL context's encoded CTL and its properties.

<MakeCert>
FreeCryptProvFromCert;Releases the handle to a cryptographic service provider (CSP) and optionally deletes the temporary container created by the GetCryptProvFromCert function.
GetCryptProvFromCert;Gets a handle to a CSP and a key specification for a certificate context.
PvkFreeCryptProv;Releases the handle to a CSP and optionally deletes the temporary container created by the PvkGetCryptProv function.
PvkGetCryptProv;Gets a handle to a CSP based on either a private key file name or a key container name.
PvkPrivateKeyAcquireContextFromMemory;Creates a temporary container in the CSP and loads a private key from memory into the container.
PvkPrivateKeySave;Saves a private key and its corresponding public key to a specified file.
SignError;Calls GetLastError and converts the return code to an HRESULT. 

<Certificate Verification>
CertVerifyCTLUsage;Verifies the usage of a CTL.
CryptMsgEncodeAndSignCTL;Encodes and signs a CTL as a message.
CryptMsgGetAndVerifySigner;Retrieves and verifies a CTL from a message.
CryptMsgSignCTL;Signs a message that contains a CTL.
CertCreateCertificateChainEngine;Creates a new, nondefault chain engine for an application.
CertCreateCTLEntryFromCertificateContextProperties;Creates a CTL entry whose attributes are the certificate context's properties.
CertDuplicateCertificateChain;Duplicates a certificate chain by incrementing the chain's reference count and returning a pointer to the chain.
CertFindChainInStore;Finds the first, or next, certificate chain context in a store.
CertFreeCertificateChain;Frees a certificate chain by reducing its reference count.
CertFreeCertificateChainEngine;Frees a nondefault certificate chain engine.
CertFreeCertificateChainList;Frees the array of pointers to chain contexts.
CertGetCertificateChain;Builds a chain context starting from an end certificate and going back to a trusted root certificate, if possible.
CertIsValidCRLForCertificate;Checks a CRL to determine whether it would include a specific certificate if that certificate were revoked.
CertSetCertificateContextPropertiesFromCTLEntry;Sets properties on the certificate context using the attributes in the CTL entry.
CertVerifyCertificateChainPolicy;Checks a certificate chain to verify its validity, including its compliance with any specified validity policy criteria.

<Low-level Message>
CryptMsgCalculateEncodedLength;Calculates the length of an encoded cryptographic message.
CryptMsgClose;Closes a handle of a cryptographic message.
CryptMsgControl;Performs a special control function after the final CryptMsgUpdate of an encoded or decoded cryptographic message.
CryptMsgCountersign;Countersigns an already existing signature in a message.
CryptMsgCountersignEncoded;Countersigns an already existing signature (encoded SignerInfo, as defined by PKCS #7).
CryptMsgDuplicate;Duplicates a cryptographic message handle by incrementing the reference count. The reference count keeps track of the lifetime of the message.
CryptMsgGetParam;Acquires a parameter after encoding or decoding a cryptographic message.
CryptMsgOpenToDecode;Opens a cryptographic message for decoding.
CryptMsgOpenToEncode;Opens a cryptographic message for encoding.
CryptMsgUpdate;Updates the contents of a cryptographic message.
CryptMsgVerifyCountersignatureEncoded;Verifies a countersignature in terms of the SignerInfo structure (as defined by PKCS #7).
CryptMsgVerifyCountersignatureEncodedEx;Verifies that the pbSignerInfoCounterSignature parameter contains the encrypted hash of the encryptedDigest field of the pbSignerInfo parameter structure.

<Simplified Message>
CryptDecodeMessage;Decodes a cryptographic message.
CryptDecryptAndVerifyMessageSignature;Decrypts the specified message, and verifies the signer.
CryptDecryptMessage;Decrypts the specified message.
CryptEncryptMessage;Encrypts the message for the recipient or recipients.
CryptGetMessageCertificates;Returns the certificate store that contains the message's certificates and CRLs.
CryptGetMessageSignerCount;Returns the count of signers in the signed message.
CryptHashMessage;Creates a hash of the message.
CryptSignAndEncryptMessage;Signs the message, and then encrypts it for the recipient or recipients.
CryptSignMessageWithKey;Signs a message using a CSP's private key specified in the parameters to the function.
CryptSignMessage;Signs the message.
CryptVerifyDetachedMessageHash;Verifies a hashed message that contains a detached hash.
CryptVerifyDetachedMessageSignature;Verifies a signed message that contains a detached signature or signatures.
CryptVerifyMessageHash;Verifies a hashed message.
CryptVerifyMessageSignature;Verifies a signed message.
CryptVerifyMessageSignatureWithKey;Verifies a signed message's signature by using specified public key information.

<Data Management>
CertCompareCertificate;Compares two certificates to determine whether they are identical.
CertCompareCertificateName;Compares two certificate names to determine whether they are identical.
CertCompareIntegerBlob;Compares two integer BLOBs.
CertComparePublicKeyInfo;Compares two public keys to determine whether they are identical.
CertFindAttribute;Finds the first attribute identified by its object identifier (OID).
CertFindExtension;Finds the first extension identified by its OID.
CertFindRDNAttr;Finds the first RDN attribute identified by its OID in the name list of the Relative Distinguished Names.
CertGetIntendedKeyUsage;Acquires the intended key usage bytes from the certificate.
CertGetPublicKeyLength;Acquires the public/private key's bit length from the public key BLOB.
CertIsRDNAttrsInCertificateName;Compares the attributes in the certificate name with the specified CERT_RDN to determine whether all attributes are included there.
CertIsStrongHashToSign;Determines whether the specified hash algorithm and the public key in the signing certificate can be used to perform strong signing.
CertVerifyCRLRevocation;Verifies that the subject certificate is not on the certificate revocation list (CRL).
CertVerifyCRLTimeValidity;Verifies the time validity of a CRL.
CertVerifyRevocation;Verifies that the subject certificate is not on the CRL.
CertVerifyTimeValidity;Verifies the time validity of a certificate.
CertVerifyValidityNesting;Verifies that the subject's time validity nests within the issuer's time validity.
CryptExportPKCS8;This function is superseded by the CryptExportPKCS8Ex function.
CryptExportPKCS8Ex;Exports the private key in PKCS #8 format.
CryptExportPublicKeyInfo;Exports the public key information associated with the provider's corresponding private key.
CryptExportPublicKeyInfoEx;Exports the public key information associated with the provider's corresponding private key. This function differs from CryptExportPublicKeyInfo in that the user can specify the public key algorithm, thereby overriding the default provided by the CSP.
CryptExportPublicKeyInfoFromBCryptKeyHandle;Exports the public key info associated with a provider's corresponding private key.
CryptFindCertificateKeyProvInfo;Enumerates the cryptographic providers and their key containers to find the private key that corresponds to a certificate's public key.
CryptFindLocalizedName;Finds the localized name for a specified name, for example, finds the localized name for the store name of the Root system.
CryptHashCertificate;Hashes the encoded content.
CryptHashCertificate2;Hashes a block of data by using a Cryptography API: Next Generation (CNG) hash provider.
CryptHashPublicKeyInfo;Computes the hash of the encoded public key information.
CryptHashToBeSigned;Computes the hash of the "to be signed" information in the encoded signed content (CERT_SIGNED_CONTENT_INFO).
CryptImportPKCS8;Imports the private key in PKCS #8 format to a cryptographic service provider (CSP).
CryptImportPublicKeyInfo;Converts and imports public key information into the provider, and returns a handle of the public key.
CryptImportPublicKeyInfoEx;Converts and imports the public key information into the provider, and returns a handle of the public key. Additional parameters (over those specified by CryptImportPublicKeyInfo) that can be used to override defaults are provided to supplement CERT_PUBLIC_KEY_INFO.
CryptImportPublicKeyInfoEx2;Imports a public key into a CNG asymmetric provider.
CryptMemAlloc;Allocates memory for a buffer. This memory is used by all Crypt32.lib functions that return allocated buffers.
CryptMemFree;Frees memory allocated by CryptMemAlloc or CryptMemRealloc.
CryptMemRealloc;Frees memory currently allocated for a buffer, and allocates memory for a new buffer.
CryptQueryObject;Retrieves information about the content of a BLOB or a file.
CryptSignAndEncodeCertificate;Encodes the "to be signed" information, signs this encoded information, and encodes the resulting signed, encoded information.
CryptSignCertificate;Signs the "to be signed" information in the encoded, signed content.
CryptSIPAddProvider;Adds a Subject Interface Package (SIP).
CryptSIPCreateIndirectData;Returns a SIP_INDIRECT_DATA structure that contains a hash of the supplied SIP_SUBJECTINFO structure, the digest algorithm, and an encoding attribute. The hash can be used as an indirect reference to the data.
CryptSIPGetCaps;Retrieves the capabilities of an SIP.
CryptSIPGetSignedDataMsg;Retrieves an Authenticode signature from the file.
CryptSIPLoad;Loads the dynamic link library that implements a subject interface package and assigns appropriate library export functions to a SIP_DISPATCH_INFO structure.
CryptSIPPutSignedDataMsg;Stores an Authenticode Signature in the target file.
CryptSIPRemoveProvider;Removes a SIP added by a previous call to the CryptSIPAddProvider function.
CryptSIPRemoveSignedDataMsg;Removes a specified Authenticode signature.
CryptSIPRetrieveSubjectGuid;Retrieves a GUID based on the header information in a specified file.
CryptSIPRetrieveSubjectGuidForCatalogFile;Retrieves the subject GUID associated with the specified file.
CryptSIPVerifyIndirectData;Validates the indirect hashed data against the supplied subject.
CryptUpdateProtectedState;Migrates the current user's master keys after the user's security identifier (SID) has changed.
CryptVerifyCertificateSignature;Verifies the signature of a subject certificate or a CRL by using the public key information.
CryptVerifyCertificateSignatureEx;An extended version of CryptVerifyCertificateSignature.
GetEncSChannel;Stores the encrypted Schannel DLL contents in memory.
pCryptSIPGetCaps;Implemented by an SIP to report capabilities.

<Data Conversion>
CertAlgIdToOID;Converts a CryptoAPI algorithm identifier (ALG_ID) to an Abstract Syntax Notation One (ASN.1) object identifier (OID) string.
CertGetNameString;Acquires the subject or issuer name from a certificate, and converts it to a null-terminated character string.
CertNameToStr;Converts a certificate name BLOB to a zero-terminated string.
CertOIDToAlgId;Converts the ASN.1 Object Identifier string to the CSP algorithm identifier.
CertRDNValueToStr;Converts a Name Value to a null-terminated string.
CertStrToName;Converts a null-terminated X.500 string to an encoded certificate name.
CryptBinaryToString;Converts a binary sequence into a formatted string.
CryptFormatObject;Formats encoded data, and returns a Unicode string.
CryptStringToBinary;Converts a formatted string to a binary sequence.

<Enhanced Key Usage>
CertAddEnhancedKeyUsageIdentifier;Adds a usage identifier to a certificate's EKU property.
CertGetEnhancedKeyUsage;Acquires, from a certificate, information about the EKU extension or property.
CertRemoveEnhancedKeyUsageIdentifier;Removes the usage identifier from a certificate's EKU extended property.
CertSetEnhancedKeyUsage;Sets the EKU property for a certificate.

<Key Identifier>
CryptCreateKeyIdentifierFromCSP;Creates a key identifier from a CSP's public key BLOB.
CryptEnumKeyIdentifierProperties;Enumerates key identifiers and their properties.
CryptGetKeyIdentifierProperty;Acquires a specific property from a specified key identifier.
CryptSetKeyIdentifierProperty;Sets a property of a specified key identifier.

<OID Support>
CryptEncodeObject
CryptEncodeObjectEx
CryptDecodeObject
CryptDecodeObjectEx
CertVerifyRevocation
CertOpenStore
CryptEnumOIDFunction;Enumerates the registered OID functions identified by their encoding type, function name, and OID.
CryptEnumOIDInfo;Enumerates the registered OID information identified by their group, and calls pfnEnumOIDInfo for matches.
CryptFindOIDInfo;Uses the specified key and group to find OID information.
CryptFreeOIDFunctionAddress;Releases the handle count that was incremented and returned by CryptGetOIDFunctionAddress or CryptGetDefaultOIDFunctionAddress.
CryptGetDefaultOIDDllList;Acquires the list of registered default DLL entries for the specified function set and encoding type.
CryptGetDefaultOIDFunctionAddress;Either acquires the first or next installed default function, or loads the DLL that contains the default function.
CryptGetOIDFunctionAddress;Searches the list of installed functions for an encoding type and OID match. If a match is not found there, the registry is searched for a match.
CryptGetOIDFunctionValue;Acquires the value for the specified encoding type, function name, OID, and value name.
CryptInitOIDFunctionSet;Initializes and returns a handle of the OID function set identified by the function name supplied.
CryptInstallOIDFunctionAddress;Installs a set of callable OID function addresses.
CryptRegisterDefaultOIDFunction;Registers the DLL that contains the default function to be called for the specified encoding type and function name.
CryptRegisterOIDFunction;Registers the DLL that contains the function to be called for the specified encoding type, function name, and OID.
CryptRegisterOIDInfo;Registers the OID information specified in the CRYPT_OID_INFO structure, persisting it to the registry.
CryptSetOIDFunctionValue;Sets the value for the specified encoding type, function name, OID, and value name.
CryptUnregisterDefaultOIDFunction;Removes the registration for the DLL that contains the default function to be called for the specified encoding type and function name.
CryptUnregisterOIDFunction;Removes the registration for the DLL that contains the function to be called for the specified encoding type, function name, and OID.
CryptUnregisterOIDInfo;Removes the registration for the specified OID information.

<Remote Object Retrieval>
CryptGetObjectUrl;Acquires the URL of the remote object from a certificate, CTL, or CRL.
CryptRetrieveObjectByUrl;Retrieves the PKI object from a location specified by a URL.

<PFX>
PFXExportCertStore;Exports from the referenced certificate store the certificates and, if available, their associated private keys.
PFXExportCertStoreEx;Exports from the referenced certificate store the certificates and, if available, their associated private keys.
PFXImportCertStore;Imports a PFX BLOB, and returns the handle of a store that contains certificates and any associated private keys.
PFXIsPFXBlob;Attempts to decode the outer layer of a BLOB as a PFX packet.
PFXVerifyPassword;Attempts to decode the outer layer of a BLOB as a PFX packet and to decrypt it with the given password.

<CSP Connection>
CPAcquireContext;Acquires a handle to a particular key container within the CSP.
CPGetProvParam;Retrieves attributes of the CSP.
CPReleaseContext;Releases the handle acquired by CPAcquireContext.
CPSetProvParam;Sets specific attributes of a CSP.

<CSP Key Generation and Exchange>
CPDeriveKey;Creates a key derived from a password.
CPDestroyKey;Destroys a key.
CPDuplicateKey;Makes an exact copy of a key, including the state of the key.
CPExportKey;Transfers a key from the CSP into a key BLOB in the application's memory space.
CPGenKey;Creates a random key.
CPGenRandom;Generates random data.
CPGetKeyParam;Retrieves a key's parameters.
CPGetUserKey;Gets a handle to the key exchange or signature key.
CPImportKey;Transfers a key from a key BLOB to a CSP.
CPSetKeyParam;Specifies a key's parameters.

<CSP Data Encryption>
CPDecrypt;Decrypts a section of ciphertext using the specified encryption key.
CPEncrypt;Encrypts a section of plaintext using the specified encryption key.

<CSP Hashing and Digital Signature>
CPCreateHash;Creates a hash object, and returns a handle to it.
CPDestroyHash;Destroys a hash object.
CPDuplicateHash;Makes an exact copy of a hash object and the state the hash is in.
CPGetHashParam;Retrieves a hash object parameter.
CPHashData;Hashes a block of data, adding it to the specified hash object.
CPHashSessionKey;Hashes a session key, adding it to the specified hash object.
CPSetHashParam;Sets a hash object parameter.
CPSignHash;Signs the specified hash object.
CPVerifySignature;Verifies a digital signature.

<CSP Auxiliary>
OffloadModExpo;Offloads modular exponentiation from a CSP to a hardware accelerator.

<Certificate Services Backup and Restore>
CertSrvBackupClose;Closes an opened file.
CertSrvBackupEnd;Ends a backup session.
CertSrvBackupFree;Frees a buffer allocated by the backup and restore APIs.
CertSrvBackupGetBackupLogs;Returns a list of log files that need to be backed up.
CertSrvBackupGetDatabaseNames;Returns a list of database files that need to be backed up.
CertSrvBackupGetDynamicFileList;Retrieves the list of Certificate Services dynamic file names that need to be backed up for the given backup context.
CertSrvBackupOpenFile;Opens a file in preparation for backing it up.
CertSrvBackupPrepare;Prepares the database for the online backup.
CertSrvBackupRead;Reads the contents of an opened file.
CertSrvBackupTruncateLogs;Truncates the log files.
CertSrvIsServerOnline;Determines whether a Certificate Services server is online (actively running).
CertSrvRestoreEnd;Ends a restore session.
CertSrvRestoreGetDatabaseLocations;Retrieves database locations (used for both backup and restore scenarios).
CertSrvRestorePrepare;Begins a restore session.
CertSrvRestoreRegister;Registers a restore operation.
CertSrvRestoreRegisterComplete;Completes a previously registered restore operation.
CertSrvRestoreRegisterThroughFile;Registers a restore operation.
CertSrvServerControl;Sends a control command to the Certificate Services instance.

<Callback>
CertChainFindByIssuerCallback;An application-defined callback function that allows the application to filter certificates that might be added to the certificate chain.
CertDllOpenStoreProv;Defines the store provider open function.
CertEnumPhysicalStoreCallback;Callback function used by the CertEnumPhysicalStore function to format and present information on each physical store found.
CertEnumSystemStoreCallback;Callback function used by the CertEnumSystemStore function to format and present information on each physical store found.
CertEnumSystemStoreLocationCallback;Callback function used by the CertEnumSystemStoreLocation function to format and present information on each physical store found.
CertStoreProvCloseCallback;Determines what happens when an open store's reference count becomes zero.
CertStoreProvControl;Allows an application to be notified when there is a difference between the contents of a cached store in use and the contents of that store as it is persisted to storage.
CertStoreProvDeleteCertCallback;Determines actions to be taken before a certificate is deleted from a certificate store.
CertStoreProvDeleteCRLCallback;Determines actions to be taken before a certificate revocation list (CRL) is deleted from a certificate store.
CertStoreProvDeleteCTL;Determines whether a CTL can be deleted.
CertStoreProvFindCert;Finds the first, or next, certificate in a store that matches specified criteria.
CertStoreProvFindCRL;Finds the first, or next, CRL in a store that matches specified criteria.
CertStoreProvFindCTL;Finds the first, or next, CTL in a store that matches specified criteria.
CertStoreProvFreeFindCert;Frees a previously found certificate context.
CertStoreProvFreeFindCRL;Frees a previously found CRL context.
CertStoreProvFreeFindCTL;Frees a previously found CTL context.
CertStoreProvGetCertProperty;Retrieves a specified property of a certificate.
CertStoreProvGetCRLProperty;Retrieves a specified property of a CRL.
CertStoreProvGetCTLProperty;Retrieves a specified property of a CTL.
CertStoreProvReadCertCallback;Currently not used but might be exported to future CSPs.
CertStoreProvReadCRLCallback;Currently not used but might be exported to future CSPs.
CertStoreProvReadCTL;Read the provider's copy of the CTL context, and, if it exists, create a new CTL context.
CertStoreProvSetCertPropertyCallback;Determines actions to be taken before a call to CertSetCertificateContextProperty or CertGetCertificateContextProperty.
CertStoreProvSetCRLPropertyCallback;Determines actions to be taken before a call to CertSetCRLContextProperty or CertGetCRLContextProperty.
CertStoreProvSetCTLProperty;Determines whether a property can be set on a CTL.
CertStoreProvWriteCertCallback;Determines actions to be taken before adding a certificate to a store.
CertStoreProvWriteCRLCallback;Determines actions to be taken before adding a CRL to a store.
CertStoreProvWriteCTL;Determines whether a CTL can be added to the store.
CRYPT_ENUM_KEYID_PROP;Callback function used by the CryptEnumKeyIdentifierProperties function.
CRYPT_ENUM_OID_FUNCTION;Callback function used by the CryptEnumOIDFunction function.
CRYPT_ENUM_OID_INFO;Callback function used by the CryptEnumOIDInfo function.
CryptGetSignerCertificateCallback;Callback function used with the CRYPT_VERIFY_MESSAGE_PARA structure to get and verify a message signer's certificate.
PCRYPT_DECRYPT_PRIVATE_KEY_FUNC;Callback function used by the CryptImportPKCS8 function.
PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC;Callback function used when creating the CRYPT_ENCRYPTED_PRIVATE_KEY_INFO structure.
PCRYPT_RESOLVE_HCRYPTPROV_FUNC;Callback function used by the CryptImportPKCS8 function.
PFN_CDF_PARSE_ERROR_CALLBACK;A user-defined function called for Catalog Definition Function errors while parsing a catalog definition file (CDF).
PFN_CERT_CREATE_CONTEXT_SORT_FUNC;Called for each sorted context entry when a context is created.
PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY;A CNG object identifier (OID) installable function for import of an already decrypted content encryption key (CEK).
PFN_CMSG_CNG_IMPORT_KEY_AGREE;Imports a content encryption key for a key transport recipient of an enveloped message.
PFN_CMSG_CNG_IMPORT_KEY_TRANS;A CNG OID installable function for import and decryption of a key-transport-recipient, encrypted, content encryption key (CEK).
PFN_CMSG_EXPORT_KEY_AGREE;Encrypts and exports the content encryption key for a key agreement recipient of an enveloped message.
PFN_CMSG_EXPORT_KEY_TRANS;Encrypts and exports the content encryption key for a key transport recipient of an enveloped message.
PFN_CMSG_EXPORT_MAIL_LIST;Encrypts and exports the content encryption key for a mailing list recipient of an enveloped message.
PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY;Generates the symmetric key used to encrypt content for an enveloped message.
PFN_CMSG_IMPORT_KEY_AGREE;Imports a content encryption key for a key transport recipient of an enveloped message.
PFN_CMSG_IMPORT_KEY_TRANS;Imports a content encryption key for a key transport recipient of an enveloped message.
PFN_CMSG_IMPORT_MAIL_LIST;Imports a content encryption key for a key transport recipient of an enveloped message.
PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC;Called by CryptExportPublicKeyInfoEx to export a public key BLOB and encode it.
PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC;Called to decode and return the hash algorithm identifier and optionally the signature parameters.
PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC;Called to sign and encode a computed hash.
PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC;Called to decrypt an encoded signature and compare it to a computed hash.
PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC;Called by CryptImportPublicKeyInfoEx2 to decode the public key algorithm identifier, load the algorithm provider, and import the key pair.
PFNCCERTDISPLAYPROC;A user-defined callback function that allows the caller of the CryptUIDlgSelectCertificate function to handle the display of certificates that the user selects to view.
PFNCMFILTERPROC;Filters each certificate to decide if it will appear in the certificate selection dialog box displayed by the CertSelectCertificate function.
PFNCMHOOKPROC;Called before messages are processed by the certificate selection dialog box produced by the CertSelectCertificate function.

<Catalog Definition>
CryptCATCDFClose;Closes a catalog definition file and frees the memory for the corresponding CRYPTCATCDF structure.
CryptCATCDFEnumAttributesWithCDFTag;Enumerates the attributes of member files in the CatalogFiles section of a CDF.
CryptCATCDFEnumCatAttributes;Enumerates catalog-level attributes within the CatalogHeader section of a CDF.
CryptCATCDFEnumMembersByCDFTagEx;Enumerates the individual file members in the CatalogFiles section of a CDF.
CryptCATCDFOpen;Opens an existing CDF for reading and initializes a CRYPTCATCDF structure. 

<Catalog>
CryptCATAdminAcquireContext;Acquires a handle to a catalog administrator context. This handle can be used by subsequent calls to the CryptCATAdminAddCatalog, CryptCATAdminEnumCatalogFromHash, and CryptCATAdminRemoveCatalog functions.
CryptCATAdminAcquireContext2;Acquires a handle to a catalog administrator context for a given hash algorithm and hash policy.
CryptCATAdminAddCatalog;Adds a catalog to the catalog database.
CryptCATAdminCalcHashFromFileHandle;Calculates the hash for a file.
CryptCATAdminCalcHashFromFileHandle2;Calculates the hash for a file by using the specified algorithm.
CryptCATAdminEnumCatalogFromHash;Enumerates the catalogs that contain a specified hash.
CryptCATAdminReleaseCatalogContext;Releases a handle to a catalog context previously returned by the CryptCATAdminAddCatalog function.
CryptCATAdminReleaseContext;Releases the handle previously assigned by the CryptCATAdminAcquireContext function.
CryptCATAdminRemoveCatalog;Deletes a catalog file and removes that catalog's entry from the Windows catalog database.
CryptCATAdminResolveCatalogPath;Retrieves the fully qualified path of the specified catalog.
CryptCATCatalogInfoFromContext;Retrieves catalog information from a specified catalog context.
CryptCATClose;Closes a catalog handle opened previously by the CryptCATOpen function.
CryptCATEnumerateAttr;Enumerates the attributes associated with a member of a catalog.
CryptCATEnumerateCatAttr;Enumerates the attributes associated with a catalog.
CryptCATEnumerateMember;Enumerates the members of a catalog.
CryptCATGetAttrInfo;Retrieves information about an attribute of a member of a catalog.
CryptCATGetMemberInfo;Retrieves member information from the catalog's PKCS #7. In addition to retrieving the member information for a specified reference tag, this function opens a member context.
CryptCATOpen;Opens a catalog, and returns a context handle to the open catalog.
IsCatalogFile;Retrieves a Boolean value that indicates whether the specified file is a catalog file.

<WinTrust>
WintrustAddActionID;Adds a trust provider action to the user's system.
WintrustGetRegPolicyFlags;Retrieves policy flags for a policy provider.
WintrustAddDefaultForUsage;Specifies the default usage identifier and callback information for a provider
WintrustGetDefaultForUsage;Retrieves the default usage identifier and callback information.
WintrustLoadFunctionPointers;Loads function entry points for a specified action GUID.
WintrustRemoveActionID;Removes an action added by the WintrustAddActionID function.
WintrustSetDefaultIncludePEPageHashes;Sets the default setting that determines whether page hashes are included when creating subject interface package (SIP) indirect data for portable executable files.
WintrustSetRegPolicyFlags;Sets policy flags for a policy provider.
WinVerifyTrust;Performs a trust verification action on a specified object.
WinVerifyTrustEx;Performs a trust verification action on a specified object and takes a pointer to a WINTRUST_DATA structure.
WTHelperCertCheckValidSignature;Checks whether a signature is valid.
WTHelperCertFindIssuerCertificate;Finds an issuer certificate from the specified certificate stores that matches the specified subject certificate.
WTHelperCertIsSelfSigned;Checks whether a certificate is self-signed.
WTHelperGetFileHash;Verifies the signature of a signed file and obtains the hash value and algorithm identifier for the file.
WTHelperGetProvCertFromChain;Retrieves a trust provider certificate from the certificate chain.
WTHelperGetProvPrivateDataFromChain;Receives a CRYPT_PROVIDER_PRIVDATA structure from the chain by using the provider ID.
WTHelperGetProvSignerFromChain;Retrieves a signer or countersigner by index from the chain.
WTHelperProvDataFromStateData;Retrieves trust provider information from a specified handle.

<Object Locator>
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH;Specifies that an object has changed.
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET;Retrieves an object.
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE;Releases the provider.
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD;Releases the password used to encrypt a PFX byte array.
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE;Releases the object returned by the provider.
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER;Releases memory for an object identifier.
PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE;Initializes the provider.

[Service]
Handler;An application-defined callback function used with the RegisterServiceCtrlHandler function.
HandlerEx;An application-defined callback function used with the RegisterServiceCtrlHandlerEx function.
RegisterServiceCtrlHandler;Registers a function to handle service control requests.
RegisterServiceCtrlHandlerEx;Registers a function to handle extended service control requests.
ServiceMain;An application-defined function that serves as the starting point for a service.
SetServiceBits;Registers a service type with the service control manager and the Server service.
SetServiceStatus;Updates the service control manager's status information for the calling service.
StartServiceCtrlDispatcher;Connects the main thread of a service process to the service control manager.
ChangeServiceConfig;Changes the configuration parameters of a service.
ChangeServiceConfig2;Changes the optional configuration parameters of a service.
CloseServiceHandle;Closes the specified handle to a service control manager object or a service object.
ControlService;Sends a control code to a service.
ControlServiceEx;Sends a control code to a service.
CreateService;Creates a service object and adds it to the specified service control manager database.
DeleteService;Marks the specified service for deletion from the service control manager database.
EnumDependentServices;Retrieves the name and status of each service that depends on the specified service.
EnumServicesStatusEx;Enumerates services in the specified service control manager database based on the specified information level.
GetServiceDisplayName;Retrieves the display name of the specified service.
GetServiceKeyName;Retrieves the service name of the specified service.
NotifyBootConfigStatus;Reports the boot status to the service control manager.
NotifyServiceStatusChange;Enables an application to receive notification when the specified service is created or deleted or when its status changes.
OpenSCManager;Establishes a connection to the service control manager on the specified computer and opens the specified service control manager database.
OpenService;Opens an existing service.
QueryServiceConfig;Retrieves the configuration parameters of the specified service.
QueryServiceConfig2;Retrieves the optional configuration parameters of the specified service.
QueryServiceDynamicInformation;Retrieves dynamic information related to the current service start.
QueryServiceObjectSecurity;Retrieves a copy of the security descriptor associated with a service object.
QueryServiceStatusEx;Retrieves the current status of the specified service based on the specified information level.
SetServiceObjectSecurity;Sets the security descriptor of a service object.
StartService;Starts a service.

<Obsolete>
EnumServicesStatus 
LockServiceDatabase 
QueryServiceLockStatus 
QueryServiceStatus 
UnlockServiceDatabase 

[Authorization]
AccessCheck;Determines whether a security descriptor grants a specified set of access rights to the client identified by an access token.
AccessCheckAndAuditAlarm;Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread.
AccessCheckByType;Determines whether a security descriptor grants a specified set of access rights to the client identified by an access token.
AccessCheckByTypeAndAuditAlarm;Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread.
AccessCheckByTypeResultList;Determines whether a security descriptor grants a specified set of access rights to the client identified by an access token.
AccessCheckByTypeResultListAndAuditAlarm;Determines whether a security descriptor grants a specified set of access rights to the client being impersonated by the calling thread.
AccessCheckByTypeResultListAndAuditAlarmByHandle;Determines whether a security descriptor grants a specified set of access rights to the client that the calling thread is impersonating.
AddAccessAllowedAce;Adds an access-allowed access control entry (ACE) to an access control list (ACL). The access is granted to a specified security identifier (SID).
AddAccessAllowedAceEx;Adds an access-allowed access control entry (ACE) to the end of a discretionary access control list (DACL).
AddAccessAllowedObjectAce;Adds an access-allowed access control entry (ACE) to the end of a discretionary access control list (DACL).
AddAccessDeniedAce;Adds an access-denied access control entry (ACE) to an access control list (ACL). The access is denied to a specified security identifier (SID).
AddAccessDeniedAceEx;Adds an access-denied access control entry (ACE) to the end of a discretionary access control list (DACL).
AddAccessDeniedObjectAce;Adds an access-denied access control entry (ACE) to the end of a discretionary access control list (DACL). The new ACE can deny access to an object, or to a property set or property on an object.
AddAce;Adds one or more access control entries (ACEs) to a specified access control list (ACL).
AddAuditAccessAce;Adds a system-audit access control entry (ACE) to a system access control list (ACL). The access of a specified security identifier (SID) is audited.
AddAuditAccessAceEx;Adds a system-audit access control entry (ACE) to the end of a system access control list (SACL).
AddAuditAccessObjectAce;Adds a system-audit access control entry (ACE) to the end of a system access control list (SACL).
AddConditionalAce;Adds a conditional access control entry (ACE) to the specified access control list (ACL).
AddMandatoryAce;Adds a SYSTEM_MANDATORY_LABEL_ACE access control entry (ACE) to the specified system access control list (SACL).
AddResourceAttributeAce;Adds a SYSTEM_RESOURCE_ATTRIBUTE_ACEaccess control entry (ACE) to the end of a system access control list (SACL).
AddScopedPolicyIDAce;Adds a SYSTEM_SCOPED_POLICY_ID_ACEaccess control entry (ACE) to the end of a system access control list (SACL).
AdjustTokenGroups;Enables or disables groups already present in the specified access token. Access to TOKEN_ADJUST_GROUPS is required to enable or disable groups in an access token.
AdjustTokenPrivileges;Enables or disables privileges in the specified access token. Enabling or disabling privileges in an access token requires TOKEN_ADJUST_PRIVILEGES access.
AllocateAndInitializeSid;Allocates and initializes a security identifier (SID) with up to eight subauthorities.
AllocateLocallyUniqueId;Allocates a locally unique identifier (LUID).
AreAllAccessesGranted;Checks whether a set of requested access rights has been granted. The access rights are represented as bit flags in an access mask.
AreAnyAccessesGranted;Tests whether any of a set of requested access rights has been granted. The access rights are represented as bit flags in an access mask.
AuditComputeEffectivePolicyBySid;Computes the effective audit policy for one or more subcategories for the specified security principal. The function computes effective audit policy by combining system audit policy with per-user policy.
AuditComputeEffectivePolicyByToken;Computes the effective audit policy for one or more subcategories for the security principal associated with the specified token. The function computes effective audit policy by combining system audit policy with per-user policy.
AuditEnumerateCategories;Enumerates the available audit-policy categories.
AuditEnumeratePerUserPolicy;Enumerates users for whom per-user auditing policy is specified.
AuditEnumerateSubCategories;Enumerates the available audit-policy subcategories.
AuditFree;Frees the memory allocated by audit functions for the specified buffer.
AuditLookupCategoryGuidFromCategoryId;Retrieves a GUID structure that represents the specified audit-policy category.
AuditLookupCategoryIdFromCategoryGuid;Retrieves an element of the POLICY_AUDIT_EVENT_TYPE enumeration that represents the specified audit-policy category.
AuditLookupCategoryName;Retrieves the display name of the specified audit-policy category.
AuditLookupSubCategoryName;Retrieves the display name of the specified audit-policy subcategory.
AuditQueryGlobalSacl;retrieves a global system access control list (SACL) that delegates access to the audit messages.
AuditQueryPerUserPolicy;Retrieves per-user audit policy in one or more audit-policy subcategories for the specified principal.
AuditQuerySecurity;Retrieves security descriptor that delegates access to audit policy.
AuditQuerySystemPolicy;Retrieves system audit policy for one or more audit-policy subcategories.
AuditSetGlobalSacl;sets a global system access control list (SACL) that delegates access to the audit messages.
AuditSetPerUserPolicy;Sets per-user audit policy in one or more audit subcategories for the specified principal.
AuditSetSecurity;Sets a security descriptor that delegates access to audit policy.
AuditSetSystemPolicy;Sets system audit policy for one or more audit-policy subcategories.
AuthzAccessCheck;Determines which access bits can be granted to a client for a given set of security descriptors.
AuthzAccessCheckCallback;An application-defined function that handles callback access control entries (ACEs) during an access check. AuthzAccessCheckCallback is a placeholder for the application-defined function name. The application registers this callback by calling AuthzInitializeResourceManager.
AuthzAddSidsToContext;Creates a copy of an existing context and appends a given set of security identifiers (SIDs) and restricted SIDs.
AuthzCachedAccessCheck;Performs a fast access check based on a cached handle containing the static granted bits from a previous AuthzAccessCheck call.
AuthzComputeGroupsCallback;An application-defined function that creates a list of security identifiers (SIDs) that apply to a client. AuthzComputeGroupsCallback is a placeholder for the application-defined function name.
AuthzEnumerateSecurityEventSources;Retrieves the registered security event sources that are not installed by default.
AuthzFreeAuditEvent;Frees the structure allocated by the AuthzInitializeObjectAccessAuditEvent function.
AuthzFreeCentralAccessPolicyCache;Decreases the CAP cache reference count by one so that the CAP cache can be deallocated.
AuthzFreeCentralAccessPolicyCallback;The AuthzFreeCentralAccessPolicyCallback function is an application-defined function that frees memory allocated by the AuthzGetCentralAccessPolicyCallback function. AuthzFreeCentralAccessPolicyCallback is a placeholder for the application-defined function name.
AuthzFreeContext;Frees all structures and memory associated with the client context. The list of handles for a client is freed in this call.
AuthzFreeGroupsCallback;An application-defined function that frees memory allocated by the AuthzComputeGroupsCallback function. AuthzFreeGroupsCallback is a placeholder for the application-defined function name.
AuthzFreeHandle;Finds and deletes a handle from the handle list.
AuthzFreeResourceManager;Frees a resource manager object.
AuthzGetCentralAccessPolicyCallback;The AuthzGetCentralAccessPolicyCallback function is an application-defined function that retrieves the central access policy. AuthzGetCentralAccessPolicyCallback is a placeholder for the application-defined function name.
AuthzGetInformationFromContext;Returns information about an Authz context.
AuthzInitializeCompoundContext;creates a user-mode context from the given user and device security contexts.
AuthzInitializeContextFromAuthzContext;Creates a new client context based on an existing client context.
AuthzInitializeContextFromSid;Creates a user-mode client context from a user security identifier (SID).
AuthzInitializeContextFromToken;Initializes a client authorization context from a kernel token. The kernel token must have been opened for TOKEN_QUERY.
AuthzInitializeObjectAccessAuditEvent;Initializes auditing for an object.
AuthzInitializeObjectAccessAuditEvent2;Allocates and initializes an AUTHZ_AUDIT_EVENT_HANDLE handle for use with the AuthzAccessCheck function.
AuthzInitializeRemoteResourceManager;Allocates and initializes a remote resource manager. The caller can use the resulting handle to make RPC calls to a remote instance of the resource manager configured on a server.
AuthzInitializeResourceManager;Uses Authz to verify that clients have access to various resources.
AuthzInitializeResourceManagerEx;Allocates and initializes a resource manager structure.
AuthzInstallSecurityEventSource;Installs the specified source as a security event source.
AuthzModifyClaims;Adds, deletes, or modifies user and device claims in the Authz client context.
AuthzModifySecurityAttributes;Modifies the security attribute information in the specified client context.
AuthzModifySids;Adds, deletes, or modifies user and device groups in the Authz client context.
AuthzOpenObjectAudit;Reads the system access control list (SACL) of the specified security descriptor and generates any appropriate audits specified by that SACL.
AuthzRegisterCapChangeNotification;Registers a CAP update notification callback.
AuthzRegisterSecurityEventSource;Registers a security event source with the Local Security Authority (LSA).
AuthzReportSecurityEvent;Generates a security audit for a registered security event source.
AuthzReportSecurityEventFromParams;Generates a security audit for a registered security event source by using the specified array of audit parameters.
AuthzSetAppContainerInformation;Sets the app container and capability information in a current Authz context.
AuthzUninstallSecurityEventSource;Removes the specified source from the list of valid security event sources.
AuthzUnregisterCapChangeNotification;Removes a previously registered CAP update notification callback.
AuthzUnregisterSecurityEventSource;Unregisters a security event source with the Local Security Authority (LSA).
BuildExplicitAccessWithName;Initializes an EXPLICIT_ACCESS structure with data specified by the caller. The trustee is identified by a name string.
BuildImpersonateExplicitAccessWithName;The BuildImpersonateExplicitAccessWithName function is not supported.
BuildImpersonateTrustee;The BuildImpersonateTrustee function is not supported.
BuildSecurityDescriptor;Allocates and initializes a new security descriptor.
BuildTrusteeWithName;Initializes a TRUSTEE structure. The caller specifies the trustee name. The function sets other members of the structure to default values.
BuildTrusteeWithObjectsAndName;Initializes a TRUSTEE structure with the object-specific access control entry (ACE) information and initializes the remaining members of the structure to default values. The caller also specifies the name of the trustee.
BuildTrusteeWithObjectsAndSid;Initializes a TRUSTEE structure with the object-specific access control entry (ACE) information and initializes the remaining members of the structure to default values. The caller also specifies the SID structure that represents the security identifier of the trustee.
BuildTrusteeWithSid;Initializes a TRUSTEE structure. The caller specifies the security identifier (SID) of the trustee. The function sets other members of the structure to default values and does not look up the name associated with the SID.
CheckTokenCapability;Checks the capabilities of a given token.
CheckTokenMembership;Determines whether a specified security identifier (SID) is enabled in an access token.
CheckTokenMembershipEx;Determines whether the specified SID is enabled in the specified token.
ConvertSecurityDescriptorToStringSecurityDescriptor;Converts a security descriptor to a string format. You can use the string format to store or transmit the security descriptor.
ConvertSidToStringSid;Converts a security identifier (SID) to a string format suitable for display, storage, or transmission.
ConvertStringSecurityDescriptorToSecurityDescriptor;Converts a string-format security descriptor into a valid, functional security descriptor.
ConvertStringSidToSid;Converts a string-format security identifier (SID) into a valid, functional SID. You can use this function to retrieve a SID that the ConvertSidToStringSid function converted to string format.
ConvertToAutoInheritPrivateObjectSecurity;Converts a security descriptor and its access control lists (ACLs) to a format that supports automatic propagation of inheritable access control entries (ACEs).
CopySid;Copies a security identifier (SID) to a buffer.
CreatePrivateObjectSecurity;Allocates and initializes a self-relative security descriptor for a new private object. A protected server calls this function when it creates a new private object.
CreatePrivateObjectSecurityEx;Allocates and initializes a self-relative security descriptor for a new private object created by the resource manager calling this function.
CreatePrivateObjectSecurityWithMultipleInheritance;Allocates and initializes a self-relative security descriptor for a new private object created by the resource manager calling this function.
CreateRestrictedToken;Creates a new access token that is a restricted version of an existing access token. The restricted token can have disabled security identifiers (SIDs), deleted privileges, and a list of restricting SIDs.
CreateSecurityPage;Creates a basic security property page that enables the user to view and edit the access rights allowed or denied by the access control entries (ACEs) in an object's discretionary access control list (DACL).
CreateWellKnownSid;Creates a SID for predefined aliases.
DeleteAce;Deletes an access control entry (ACE) from an access control list (ACL).
DestroyPrivateObjectSecurity;Deletes a private object's security descriptor.
DSCreateSecurityPage;Creates a security property page for an Active Directory object.
DSCreateISecurityInfoObject;Creates an instance of the ISecurityInformation interface associated with the specified directory service (DS) object.
DSCreateISecurityInfoObjectEx;Creates an instance of the ISecurityInformation interface associated with the specified directory service (DS) object on the specified server.
DSEditSecurity;Displays a modal dialog box for editing security on a Directory Services (DS) object.
DuplicateToken;Creates a new access token that duplicates one already in existence.
DuplicateTokenEx;Creates a new access token that duplicates an existing token. This function can create either a primary token or an impersonation token.
EditSecurity;Displays a property sheet that contains a basic security property page. This property page enables the user to view and edit the access rights allowed or denied by the ACEs in an object's DACL.
EditSecurityAdvanced;Extends the EditSecurity function to include the security page type when displaying the property sheet that contains a basic security property page.
EqualDomainSid;Determines whether two SIDs are from the same domain.
EqualPrefixSid;Tests two security-identifier (SID) prefix values for equality. A SID prefix is the entire SID except for the last subauthority value.
EqualSid;Tests two security identifier (SID) values for equality. Two SIDs must match exactly to be considered equal.
FindFirstFreeAce;Retrieves a pointer to the first free byte in an access control list (ACL).
FreeInheritedFromArray;Frees memory allocated by the GetInheritanceSource function.
FreeSid;Frees a security identifier (SID) previously allocated by using the AllocateAndInitializeSid function.
GetAce;Obtains a pointer to an access control entry (ACE) in an access control list (ACL).
GetAclInformation;Retrieves information about an access control list (ACL).
GetAppContainerNamedObjectPath;Retrieves the named object path for the app container.
GetAuditedPermissionsFromAcl;Retrieves the audited access rights for a specified trustee.
GetCurrentProcessToken;Retrieves a pseudo-handle that you can use as a shorthand way to refer to the access token associated with a process.
GetCurrentThreadEffectiveToken;Retrieves a pseudo-handle that you can use as a shorthand way to refer to the token that is currently in effect for the thread, which is the thread token if one exists and the process token otherwise.
GetCurrentThreadToken;Retrieves a pseudo-handle that you can use as a shorthand way to refer to the impersonation token that was assigned to the current thread.
GetEffectiveRightsFromAcl;Retrieves the effective access rights that an ACL structure grants to a specified trustee. The trustee's effective access rights are the access rights that the ACL grants to the trustee or to any groups of which the trustee is a member.
GetExplicitEntriesFromAcl;Retrieves an array of structures that describe the access control entries (ACEs) in an access control list (ACL).
GetFileSecurity;Obtains specified information about the security of a file or directory. The information obtained is constrained by the caller's access rights and privileges.
GetInheritanceSource;Returns information about the source of inherited access control entries (ACEs) in an access control list (ACL).
GetKernelObjectSecurity;Retrieves a copy of the security descriptor that protects a kernel object.
GetLengthSid;Returns the length, in bytes, of a valid security identifier (SID).
GetMultipleTrustee;The GetMultipleTrustee function is not supported.
GetMultipleTrusteeOperation;The GetMultipleTrusteeOperation function is not supported.
GetNamedSecurityInfo;Retrieves a copy of the security descriptor for an object specified by name.
GetPrivateObjectSecurity;Retrieves information from a private object's security descriptor.
GetSecurityDescriptorControl;Retrieves a security descriptor control and revision information.
GetSecurityDescriptorDacl;Retrieves a pointer to the discretionary access control list (DACL) in a specified security descriptor.
GetSecurityDescriptorGroup;Retrieves the primary group information from a security descriptor.
GetSecurityDescriptorLength;Returns the length, in bytes, of a structurally valid security descriptor. The length includes the length of all associated structures.
GetSecurityDescriptorOwner;Retrieves the owner information from a security descriptor.
GetSecurityDescriptorRMControl;Retrieves the resource manager control bits.
GetSecurityDescriptorSacl;Retrieves a pointer to the system access control list (SACL) in a specified security descriptor.
GetSecurityInfo;Retrieves a copy of the security descriptor for an object specified by a handle.
GetSidIdentifierAuthority;Returns a pointer to the SID_IDENTIFIER_AUTHORITY structure in a specified security identifier (SID).
GetSidLengthRequired;Returns the length, in bytes, of the buffer required to store a SID with a specified number of subauthorities.
GetSidSubAuthority;Returns a pointer to a specified subauthority in a security identifier (SID). The subauthority value is a relative identifier (RID).
GetSidSubAuthorityCount;Returns a pointer to the member in a security identifier (SID) structure that contains the subauthority count.
GetTokenInformation;Retrieves a specified type of information about an access token. The calling process must have appropriate access rights to obtain the information.
GetTrusteeForm;Retrieves the trustee name from the specified TRUSTEE structure. This value indicates whether the structure uses a name string or a security identifier (SID) to identify the trustee.
GetTrusteeName;Retrieves the trustee name from the specified TRUSTEE structure.
GetTrusteeType;Retrieves the trustee type from the specified TRUSTEE structure. This value indicates whether the trustee is a user, a group, or the trustee type is unknown.
GetUserObjectSecurity;Retrieves security information for the specified user object.
GetWindowsAccountDomainSid;Receives a security identifier (SID) and returns a SID representing the domain of that SID.
ImpersonateAnonymousToken;Enables the specified thread to impersonate the system's anonymous logon token.
ImpersonateLoggedOnUser;Lets the calling thread impersonate the security context of a logged-on user. The user is represented by a token handle.
ImpersonateNamedPipeClient;Impersonates a named-pipe client application.
ImpersonateSelf;Obtains an access token that impersonates the security context of the calling process. The token is assigned to the calling thread.
InitializeAcl;Initializes a new ACL structure.
InitializeSecurityDescriptor;Initializes a new security descriptor.
InitializeSid;Initializes a security identifier (SID).
IsTokenRestricted;Indicates whether a token contains a list of restricted security identifiers (SIDs).
IsValidAcl;Validates an access control list (ACL).
IsValidSecurityDescriptor;Determines whether the components of a security descriptor are valid.
IsValidSid;Validates a security identifier (SID) by verifying that the revision number is within a known range, and that the number of subauthorities is less than the maximum.
IsWellKnownSid;Compares a SID to a well-known SID and returns TRUE if they match.
LookupAccountName;Accepts the name of a system and an account as input. It retrieves a security identifier (SID) for the account and the name of the domain on which the account was found.
LookupAccountSid;Accepts a security identifier (SID) as input. It retrieves the name of the account for this SID and the name of the first domain on which this SID is found.
LookupPrivilegeDisplayName;Retrieves the display name that represents a specified privilege.
LookupPrivilegeName;Retrieves the name that corresponds to the privilege represented on a specific system by a specified locally unique identifier (LUID).
LookupPrivilegeValue;Retrieves the locally unique identifier (LUID) used on a specified system to locally represent the specified privilege name.
LookupSecurityDescriptorParts;Retrieves security information from a self-relative security descriptor.
MakeAbsoluteSD;Creates a security descriptor in absolute format by using a security descriptor in self-relative format as a template.
MakeSelfRelativeSD;Creates a security descriptor in self-relative format by using a security descriptor in absolute format as a template.
MapGenericMask;Maps the generic access rights in an access mask to specific and standard access rights. The function applies a mapping supplied in a GENERIC_MAPPING structure.
NtCompareTokens;Compares two access tokens and determines whether they are equivalent with respect to a call to the AccessCheck function.
ObjectCloseAuditAlarm;Generates an audit message in the security event log when a handle to a private object is deleted.
ObjectDeleteAuditAlarm;Generates audit messages when an object is deleted.
ObjectOpenAuditAlarm;Generates audit messages when a client application attempts to gain access to an object or to create a new one.
ObjectPrivilegeAuditAlarm;Generates an audit message in the security event log.
OpenProcessToken;Opens the access token associated with a process.
OpenThreadToken;Opens the access token associated with a thread.
PrivilegeCheck;Determines whether a specified set of privileges are enabled in an access token.
PrivilegedServiceAuditAlarm;Generates an audit message in the security event log.
QuerySecurityAccessMask;Creates an access mask that represents the access permissions necessary to query the specified object security information.
QueryServiceObjectSecurity;Retrieves a copy of the security descriptor associated with a service object.
RegGetKeySecurity;Retrieves a copy of the security descriptor protecting the specified open registry key.
RegSetKeySecurity;Sets the security of an open registry key.
RevertToSelf;Terminates the impersonation of a client application.
RtlConvertSidToUnicodeString;Converts a security identifier (SID) to its Unicode character representation.
SetAclInformation;Sets information about an access control list (ACL).
SetEntriesInAcl;Creates a new access control list (ACL) by merging new access control or audit control information into an existing ACL structure.
SetFileSecurity;Sets the security of a file or directory object.
SetKernelObjectSecurity;Sets the security of a kernel object.
SetNamedSecurityInfo;Sets specified security information in the security descriptor of a specified object.
SetPrivateObjectSecurity;Modifies a private object's security descriptor.
SetPrivateObjectSecurityEx;Modifies the security descriptor of a private object maintained by the resource manager calling this function.
SetSecurityAccessMask;Creates an access mask that represents the access permissions necessary to set the specified object security information.
SetSecurityDescriptorControl;Sets the control bits of a security descriptor. The function can set only the control bits that relate to automatic inheritance of ACEs.
SetSecurityDescriptorDacl;Sets information in a discretionary access control list (DACL). If a DACL is already present in the security descriptor, the DACL is replaced.
SetSecurityDescriptorGroup;Sets the primary group information of an absolute-format security descriptor, replacing any primary group information already present in the security descriptor.
SetSecurityDescriptorOwner;Sets the owner information of an absolute-format security descriptor. It replaces any owner information already present in the security descriptor.
SetSecurityDescriptorRMControl;Sets the resource manager control bits in the SECURITY_DESCRIPTOR structure.
SetSecurityDescriptorSacl;Sets information in a system access control list (SACL). If there is already a SACL present in the security descriptor, it is replaced.
SetSecurityInfo;Sets specified security information in the security descriptor of a specified object. The caller identifies the object by a handle.
SetServiceObjectSecurity;Sets the security descriptor of a service object.
SetThreadToken;Assigns an impersonation token to a thread. The function can also cause a thread to stop using an impersonation token.
SetTokenInformation;Sets various types of information for a specified access token.
SetUserObjectSecurity;Sets the security of a user object. This can be, for example, a window or a DDE conversation.
TreeResetNamedSecurityInfo;Resets specified security information in the security descriptor of a specified tree of objects.
TreeSetNamedSecurityInfo;Sets specified security information in the security descriptor of a specified tree of objects.

[Shell]
PathAllocCanonicalize;Converts a path string into a canonical form.
PathAllocCombine;Concatenates two path fragments into a single path. This function also canonicalizes any relative path elements, replacing path elements such as "." and "..".
PathCchAddBackslash;Adds a backslash to the end of a string to create the correct syntax for a path. If the source path already has a trailing backslash, no backslash will be added.
PathCchAddBackslashEx;Adds a backslash to the end of a string to create the correct syntax for a path. If the source path already has a trailing backslash, no backslash will be added.
PathCchAddExtension;Adds a file name extension to a path string.
PathCchAppend;Appends one path to the end of another.
PathCchAppendEx;Appends one path to the end of another.
PathCchCanonicalize;Converts a path string into a canonical form.
PathCchCanonicalizeEx;Simplifies a path by removing navigation elements such as "." and ".." to produce a direct, well-formed path.
PathCchCombine;Combines two path fragments into a single path. This function also canonicalizes any relative path elements, removing "." and ".." elements to simplify the final path.
PathCchCombineEx;Combines two path fragments into a single path. This function also canonicalizes any relative path elements, removing "." and ".." elements to simplify the final path.
PathCchFindExtension;Searches a path to find its file name extension, such as ".exe" or ".ini". This function does not search for a specific extension; it searches for the presence of any extension.
PathCchIsRoot;Determines whether a path string refers to the root of a volume.
PathCchRemoveBackslash;Removes the trailing backslash from the end of a path string.
PathCchRemoveBackslashEx;Removes the trailing backslash from the end of a path string.
PathCchRemoveExtension;Removes the file name extension from a path, if one is present.
PathCchRemoveFileSpec;Removes the last element in a path string, whether that element is a file name or a directory name. The element's leading backslash is also removed.
PathCchRenameExtension;Replaces a file name's extension at the end of a path string with a new extension. If the path string does not end with an extension, the new extension is added.
PathCchSkipRoot;Retrieves a pointer to the first character in a path following the drive letter or Universal Naming Convention (UNC) server/share path elements.
PathCchStripPrefix;Removes the "\\?\" prefix, if present, from a file path.
PathCchStripToRoot;Removes all file and directory elements in a path except for the root information.
PathIsUNCEx;Determines if a path string is a valid UNC path, as opposed to a path based on a drive letter.
AssocCreateForClasses;Retrieves an object that implements an IQueryAssociations interface.
AssocGetDetailsOfPropKey;Retrieves the value for a given property key using the file association information provided by the Namespace Extensions.
CDefFolderMenu_Create2;Creates a context menu for a selected group of file folder objects.
CIShutdown;Shuts down the content indexer and closes all open catalogs.
CommandLineToArgvW;Parses a Unicode command line string and returns an array of pointers to the command line arguments, along with a count of such arguments, in a way that is similar to the standard C run-time argv and argc values.
CPlApplet;Serves as the entry point for a Control Panel application. This is a library-defined callback function.
CreateAppContainerProfile;Creates a per-user, per-app profile for Windows Store apps.
CreateEnvironmentBlock;Retrieves the environment variables for the specified user. This block can then be passed to the CreateProcessAsUser function.
CreateMRUListW;Creates a new most recently used (MRU) list.
CreateProfile;Creates a new user profile.
DefScreenSaverProc;Provides default processing for any messages that a screen saver application does not process.
DefSubclassProc;Calls the next handler in a window's subclass chain. The last handler in the subclass chain calls the original window procedure for the window.
DeleteAppContainerProfile;Deletes the specified per-user, per-app profile.
DeleteProfile;Deletes the user profile and all user-related settings from the specified computer. The caller must have administrative privileges to delete a user's profile.
DestroyEnvironmentBlock;Frees environment variables created by the CreateEnvironmentBlock function.
DeriveAppContainerSidFromAppContainerName;Gets the SID of the specified profile.
DeriveRestrictedAppContainerSidFromAppContainerSidAndRestrictedName;DeriveRestrictedAppContainerSidFromAppContainerSidAndRestrictedName is reserved for future use.
DllGetVersion;Implemented by many of the Windows Shell DLLs to allow applications to obtain DLL-specific version information.
DragAcceptFiles;Registers whether a window accepts dropped files.
DragFinish;Releases memory that the system allocated for use in transferring file names to the application.
DragQueryFile;Retrieves the names of dropped files that result from a successful drag-and-drop operation.
DragQueryPoint;Retrieves the position of the mouse pointer at the time a file was dropped during a drag-and-drop operation.
DuplicateIcon;Creates a duplicate of a specified icon.
ExpandEnvironmentStringsForUser;Expands the source string by using the environment block established for the specified user.
ExtractAssociatedIcon;Gets a handle to an icon stored as a resource in a file or an icon stored in a file's associated executable file.
ExtractIcon;Gets a handle to an icon from the specified executable file, DLL, or icon file.
To retrieve an array of handles to large or small icons, use the ExtractIconEx function.
ExtractIconEx;The ExtractIconEx function creates an array of handles to large or small icons extracted from the specified executable file, DLL, or icon file.
FileIconInit;Initializes or reinitializes the system image list.
FindExecutable;Retrieves the name of and handle to the executable (.exe) file associated with a specific document file.
FreeConfirmConflictItem;Frees the resources that have been allocated for a CONFIRM_CONFLICT_ITEM structure.
FreeIDListArray;Frees the memory used by an pointer to an item identifier list (PIDL) list array.
FreeIDListArrayChild;Releases the memory space for the array of pointers to child item IDs. This releases both the PITEMID_CHILDs within the array and the array itself.
FreeIDListArrayFull;Releases the memory space for the PIDL array. This releases both the PIDLIST_ABSOLUTEs within the array and the array itself.
FreeKnownFolderDefinitionFields;Frees the allocated fields in the result from IKnownFolder::GetFolderDefinition.
FreeMRUList;Frees the handle associated with the MRU list and writes cached data to the registry.
GetAllUsersProfileDirectory;Retrieves the path to the root of the directory that contains program data shared by all users.
GetAppContainerFolderPath;Gets the path of the local app data folder for the specified app container.
GetAppContainerRegistryLocation;Gets the location of the registry storage associated with an app container.
GetContractDelegateWindow;Retrieves a window that has been set as a delegate for an app's primary foreground window for the purpose of associating the delegate window with the app's contracts. Use this function if you are a developer writing a Windows Store app in native C++.
GetCurrentProcessExplicitAppUserModelID;Retrieves the application-defined, explicit Application User Model ID (AppUserModelID) for the current process.
GetDefaultUserProfileDirectory;Retrieves the path to the root of the default user's profile.
GetMenuContextHelpId;Retrieves the Help context identifier associated with the specified menu.
GetProfilesDirectory;Retrieves the path to the root directory where user profiles are stored.
GetProfileType;Retrieves the type of profile loaded for the current user.
GetScaleFactorForDevice;Gets the preferred scale factor for a display device.
GetScaleFactorForMonitor;Gets the scale factor of a specific monitor. This function replaces GetScaleFactorForDevice.
GetUserProfileDirectory;Retrieves the path to the root directory of the specified user's profile.
GetWindowContextHelpId;Retrieves the Help context identifier, if any, associated with the specified window.
GetWindowSubclass;Retrieves the reference data for the specified window subclass callback.
IDListContainerIsConsistent;Verifies that the container structure of an IDList is valid.
ILAppendID;Appends or prepends an SHITEMID structure to an ITEMIDLIST structure.
ILClone;Clones an ITEMIDLIST structure.
ILCloneChild;Clones a child ITEMIDLIST structure.
ILCloneFirst;Clones the first SHITEMID structure in an ITEMIDLIST structure.
ILCloneFull;Clones a full, or absolute, ITEMIDLIST structure.
ILCombine;Combines two ITEMIDLIST structures.
ILCreateFromPath;Returns the ITEMIDLIST structure associated with a specified file path.
ILFindChild;Determines whether a specified ITEMIDLIST structure is the child of another ITEMIDLIST structure.
ILFindLastID;Returns a pointer to the last SHITEMID structure in an ITEMIDLIST structure.
ILFree;Frees an ITEMIDLIST structure allocated by the Shell.
ILGetNext;Retrieves the next SHITEMID structure in an ITEMIDLIST structure.
ILGetSize;Returns the size, in bytes, of an ITEMIDLIST structure.
ILIsAligned;Verifies whether a constant ITEMIDLIST is aligned on a pointer boundary, which is a DWORD on 32-bit architectures and a QWORD on 64-bit architectures.
ILIsChild;Verifies whether a PIDL is a child PIDL, which is a PIDL with exactly one SHITEMID.
ILIsEmpty;Verifies whether an ITEMIDLIST structure is empty.
ILIsEqual;Tests whether two ITEMIDLIST structures are equal in a binary comparison.
ILIsParent;Tests whether an ITEMIDLIST structure is the parent of another ITEMIDLIST structure.
ILNext(PCUIDLIST_RELATIVE);Retrieves the next SHITEMID structure in an ITEMIDLIST structure.
ILNext(PUIDLIST_RELATIVE);Retrieves the next SHITEMID structure in an ITEMIDLIST structure.
ILRemoveLastID;Removes the last SHITEMID structure from an ITEMIDLIST structure.
ILSaveToStream;Saves an ITEMIDLIST structure to a stream.
ILSkip(PCUIDLIST_RELATIVE, UINT);Skips a given number of bytes in a constant, unaligned, relative ITEMIDLIST structure.
ILSkip(PUIDLIST_RELATIVE, UINT);Skips a given number of bytes in an unaligned, relative ITEMIDLIST structure.
InetIsOffline;Determines whether the system is connected to the Internet.
InitNetworkAddressControl;Initializes the network address control window class.
LoadUserProfile;Loads the specified user's profile. The profile can be a local user profile or a roaming user profile.
MIMEAssociationDialog;Runs the unregistered MIME content type dialog box.
PathMakeUniqueName;Creates a unique path name from a template.
PathYetAnotherMakeUniqueName;Creates a unique filename based on an existing filename.
RegisterAppStateChangeNotification;Enables an app to register a callback function through which it can be notified that its library is going into or coming out of a suspended state. The app can use this information to perform any necessary operations, such as preserving state, that should be performed at that point.
RegisterDialogClasses;Registers any nonstandard window classes required by a screen saver's configuration dialog box.
RegisterScaleChangeEvent;Registers for an event that is triggered when the scale has possibly changed. This function replaces RegisterScaleChangeNotifications.
RegisterScaleChangeNotifications;Registers a window to receive callbacks when scaling information changes.
RemoveWindowSubclass;Removes a subclass callback from a window.
RevokeScaleChangeNotifications;Revokes the registration of a window, preventing it from receiving callbacks when scaling information changes.
ScreenSaverConfigureDialog;Receives messages sent to a screen saver's configuration dialog box. A screen saver that allows user configuration must define this function.
ScreenSaverProc;Receives messages sent to the specified screen saver window.
SetContractDelegateWindow;Associates an app window other than the primary foreground window with an app's contracts. Use this function if you are a developer writing a Windows Store app in native C++.
SetCurrentProcessExplicitAppUserModelID;Specifies a unique application-defined AppUserModelID that identifies the current process to the taskbar. This identifier allows an application to group its associated processes and windows under a single taskbar button.
SetMenuContextHelpId;Associates a Help context identifier with a menu.
SetWindowContextHelpId;Associates a Help context identifier with the specified window.
SetWindowSubclass;Installs or updates a window subclass callback.
SHAddToRecentDocs;Notifies the system that an item has been accessed, for the purposes of tracking those items used most recently and most frequently. This function can also be used to clear all usage data.
SHAppBarMessage;Sends an appbar message to the system.
SHAssocEnumHandlers;Returns an enumeration object for a specified set of file name extension handlers.
SHAssocEnumHandlersForProtocolByApplication;Gets an enumeration interface that provides access to handlers associated with a given protocol.
SHBindToFolderIDListParent;Given a Shell namespace item specified in the form of a folder, and an item identifier list relative to that folder, this function binds to the parent of the namespace item and optionally returns a pointer to the final component of the item identifier list.
SHBindToFolderIDListParentEx;Extends the SHBindToFolderIDListParent function by allowing the caller to specify a bind context.
SHBindToObject;Retrieves and binds to a specified object by using the Shell namespace IShellFolder::BindToObject method.
SHBindToParent;Takes a pointer to a fully qualified item identifier list (PIDL), and returns a specified interface pointer on the parent object.
SHBrowseForFolder;Displays a dialog box that enables the user to select a Shell folder.
SHChangeNotification_Lock;Locks the shared memory associated with a Shell change notification event.
SHChangeNotification_Unlock;Unlocks shared memory for a change notification.
SHChangeNotify;Notifies the system of an event that an application has performed. An application should use this function if it performs an action that may affect the Shell.
SHChangeNotifyDeregister;Unregisters the client's window process from receiving SHChangeNotify messages.
SHChangeNotifyRegister;Registers a window to receive notifications from the file system or Shell, if the file system supports notifications.
SHChangeNotifyRegisterThread;Enables asynchronous register and deregister of a thread.
SHCreateAssociationRegistration;Creates an IApplicationAssociationRegistration object based on the stock implementation of the interface provided by Windows.
SHCreateDataObject;Creates a data object in a parent folder.
SHCreateDefaultContextMenu;Creates an object that represents the Shell's default context menu implementation.
SHCreateDefaultExtractIcon;Creates a standard icon extractor, whose defaults can be further configured via the IDefaultExtractIconInit interface.
SHCreateDefaultPropertiesOp;Creates a file operation that sets the default properties on the Shell item that have not already been set.
SHCreateItemFromIDList;Creates and initializes a Shell item object from a PIDL. The resulting shell item object supports the IShellItem interface.
SHCreateItemFromParsingName;Creates and initializes a Shell item object from a parsing name.
SHCreateItemFromRelativeName;Creates and initializes a Shell item object from a relative parsing name.
SHCreateItemInKnownFolder;Creates a Shell item object for a single file that exists inside a known folder.
SHCreateItemWithParent;Create a Shell item, given a parent folder and a child item ID.
SHCreateShellFolderView;Creates a new instance of the default Shell folder view object (DefView).
SHCreateShellFolderViewEx;Creates a new instance of the default Shell folder view object. It is recommended that you use SHCreateShellFolderView rather than this function.
SHCreateShellItem;Creates an IShellItem object.
SHCreateShellItemArray;Creates a Shell item array object.
SHCreateShellItemArrayFromDataObject;Creates a Shell item array object from a data object.
SHCreateShellItemArrayFromIDLists;Creates a Shell item array object from a list of ITEMIDLIST structures.
SHCreateShellItemArrayFromShellItem;Creates an array of one element from a single Shell item.
SHDefExtractIcon;Provides a default handler to extract an icon from a file.
SHDoDragDrop;Executes a drag-and-drop operation. Supports drag source creation on demand, as well as drag images.
Shell_NotifyIcon;Sends a message to the taskbar's status area.
Shell_NotifyIconGetRect;Gets the screen coordinates of the bounding rectangle of a notification icon.
ShellAbout;Displays a ShellAbout dialog box.
ShellDDEInit;Registers the Shell Dynamic Data Exchange (DDE) services in the current process, notifying the system that the current process wishes to host DDE objects.
ShellExecute;Performs an operation on a specified file.
ShellExecuteEx;Performs an operation on a specified file.
SHEmptyRecycleBin;Empties the Recycle Bin on the specified drive.
SHEnumerateUnreadMailAccounts;Enumerates the user accounts that have unread email.
SHEvaluateSystemCommandTemplate;Enforces strict validation of parameters used in a call to CreateProcess or ShellExecute.
SHFileOperation;Copies, moves, renames, or deletes a file system object. This function has been replaced in Windows Vista by IFileOperation.
SHFreeNameMappings;Frees a file name mapping object that was retrieved by the SHFileOperation function.
SHGetDataFromIDList;Retrieves extended property data from a relative identifier list.
SHGetDesktopFolder;Retrieves the IShellFolder interface for the desktop folder, which is the root of the Shell's namespace.
SHGetDiskFreeSpace;Retrieves disk space information for a disk volume.
SHGetDiskFreeSpaceEx;Retrieves disk space information for a disk volume.
SHGetDriveMedia;Returns the type of media that is in the given drive.
SHGetFileInfo;Retrieves information about an object in the file system, such as a file, folder, directory, or drive root.
SHGetIconOverlayIndex;Returns the index of the overlay icon in the system image list.
SHGetIDListFromObject;Retrieves the PIDL of an object.
SHGetImageList;Retrieves an image list.
SHGetInstanceExplorer;Retrieves an interface that allows hosted Shell extensions and other components to prevent their host process from closing prematurely. The host process is typically Windows Explorer or Windows Internet Explorer, but this function can also be used by other applications.
SHGetItemFromDataObject;Creates an IShellItem or related object based on an item specified by an IDataObject.
SHGetItemFromObject;Retrieves an IShellItem for an object.
SHGetKnownFolderIDList;Retrieves the path of a known folder as an ITEMIDLIST structure.
SHGetKnownFolderItem;Retrieves an IShellItem object that represents a known folder.
SHGetKnownFolderPath;Retrieves the full path of a known folder identified by the folder's KNOWNFOLDERID.
SHGetLocalizedName;Retrieves the localized name of a file in a Shell folder.
SHGetNameFromIDList;Retrieves the display name of an item identified by its IDList.
SHGetNameFromPropertyKey;Retrieves the property's canonical name given its PROPERTYKEY.
SHGetNewLinkInfo;Creates a name for a new shortcut based on the shortcut's proposed target. This function does not create the shortcut, just the name.
SHGetPathFromIDList;Converts an item identifier list to a file system path.
SHGetPathFromIDListEx;Converts an item identifier list to a file system path. This function extends SHGetPathFromIDList by allowing you to set the initial size of the string buffer and declare the options below.
SHGetSettings;Retrieves the current Shell option settings.
SHGetStockIconInfo;Retrieves information about system-defined Shell icons.
SHGetTemporaryPropertyForItem;Retrieves the temporary property for the given item. A temporary property is a read/write store that holds properties only for the lifetime of the IShellItem object, rather than being persisted back into the item.
SHGetUnreadMailCount;Retrieves a specified user's unread message count for any or all email accounts.
SHIsFileAvailableOffline;Determines whether a file or folder is available for offline use. This function also determines whether the file would be opened from the network, from the local Offline Files cache, or from both locations.
SHLoadInProc;Creates an instance of the specified object class from within the context of the Shell's process.
SHLoadNonloadedIconOverlayIdentifiers;Signals the Shell that during the next operation requiring overlay information, it should load icon overlay identifiers that either failed creation or were not present for creation at startup. Identifiers that have already been loaded are not affected.
SHLocalStrDup;Makes a copy of a string in newly allocated memory.
SHMultiFileProperties;Displays a merged property sheet for a set of files. Property values common to all the files are shown while those that differ display the string (multiple values).
SHOpenFolderAndSelectItems;Opens a Windows Explorer window with specified items in a particular folder selected.
SHOpenWithDialog;Displays the Open With dialog box.
ShowShareFolderUI;Displays the Folder Sharing tab on the properties sheet for the specified folder.
SHParseDisplayName;Translates a Shell namespace object's display name into an item identifier list and returns the attributes of the object. This function is the preferred method to convert a string to a PIDL.
SHPathPrepareForWrite;Checks to see if the path exists. This includes remounting mapped network drives, prompting for ejectable media to be reinserted, creating the paths, prompting for the media to be formatted, and providing the appropriate user interfaces, if necessary. Read/write permissions for the medium are not checked.
SHQueryRecycleBin;Retrieves the size of the Recycle Bin and the number of items in it, for a specified drive.
SHQueryUserNotificationState;Checks the state of the computer for the current user to determine whether sending a notification is appropriate.
SHRemoveLocalizedName;Removes the localized name of a file in a Shell folder.
SHRunControlPanel;Opens a Control Panel item.
SHSetDefaultProperties;Applies the default set of properties on a Shell item.
SHSetInstanceExplorer;Provides an interface that allows hosted Shell extensions and other components to prevent their host process from closing prematurely. The host process is typically Windows Explorer or Internet Explorer, but this function can also be used by other applications.
SHSetKnownFolderPath;Redirects a known folder to a new location.
SHSetLocalizedName;Sets the localized name of a file in a Shell folder.
SHSetTemporaryPropertyForItem;Sets a temporary property for the specified item. A temporary property is kept in a read/write store that holds properties only for the lifetime of the IShellItem object, instead of writing them back into the item.
SHSetUnreadMailCount;Stores the current user's unread message count for a specified email account in the registry.
SHTestTokenMembership;Uses CheckTokenMembership to test whether the given token is a member of the local group with the specified RID.
SHUpdateImage;Notifies the Shell that an image in the system image list has changed.
SoftwareUpdateMessageBox;Displays a standard message box that can be used to notify a user that an application has been updated.
StgMakeUniqueName;Creates a unique name for a stream or storage object from a template.
StrStrNIW;Finds the first occurrence of a substring within a string. The comparison is case-insensitive.
StrStrNW;Finds the first occurrence of a substring within a string. The comparison is case-sensitive.
TranslateURL;Applies common translations to a given URL string, creating a new URL string.
UnloadUserProfile;Unloads a user's profile that was loaded by the LoadUserProfile function. The caller must have administrative privileges on the computer. For more information, see the Remarks section of the LoadUserProfile function.
UnregisterAppStateChangeNotification;Cancels a change notification registered through RegisterAppStateChangeNotification.
UnregisterScaleChangeEvent;Unregisters for the scale change event registered through RegisterScaleChangeEvent. This function replaces RevokeScaleChangeNotifications.
URLAssociationDialog;Invokes the unregistered URL protocol dialog box. This dialog box allows the user to select an application to associate with a previously unknown protocol.
WinExecError;Retrieves the error value generated if the WinExec function cannot run a specified application.
WinHelp;Launches Windows Help (Winhelp.exe) and passes additional data that indicates the nature of the help requested by the application.

[COM Fundamentals]
BindMoniker;Locates an object by means of its moniker, activates the object if it is inactive, and retrieves a pointer to the specified interface on that object.
CLSIDFromProgID;Looks up a CLSID in the registry, given a ProgID.
CLSIDFromProgIDEx;Triggers automatic installation if the COMClassStore policy is enabled.
CLSIDFromString;Converts a string generated by the StringFromCLSID function back into the original CLSID.
CoAddRefServerProcess;Increments a global per-process reference count.
CoAllowSetForegroundWindow;Enables the COM server process called to take focus away from the client application by using the IForegroundTransfer interface.
CoAllowUnmarshalerCLSID;Adds an unmarshaler CLSID to the allowed list for the calling process only.
CoCancelCall;Requests cancellation of an outbound DCOM method call pending on a specified thread.
CoCopyProxy;Makes a private copy of the specified proxy.
CoCreateFreeThreadedMarshaler;Creates an aggregatable object capable of context-dependent marshaling.
CoCreateGuid;Creates a GUID, a unique 128-bit integer used for CLSIDs and interface identifiers.
CoCreateInstance;Creates a single uninitialized object of the class associated with a specified CLSID.
CoCreateInstanceEx;Creates an instance of a specific class on a specific computer.
CoCreateInstanceFromApp;Creates an instance of a specific class on a specific computer from within an app container.
CoDisableCallCancellation;Undoes the action of a call to CoEnableCallCancellation.
CoDisconnectContext;Disconnects all proxy connections that are being maintained on behalf of all interface pointers that point to objects in the current context.
CoDisconnectObject;Disconnects all remote process connections being maintained on behalf of all the interface pointers that point to a specified object.
CoDosDateTimeToFileTime;Converts the MS-DOS representation of the time and date to a FILETIME structure used by Windows.
CoEnableCallCancellation;Enables cancellation of synchronous calls on the calling thread.
CoEnterApplicationThreadLifetimeLoop;Waits for and dispatches incoming calls and input to the components in an ASTA thread until its reference count drops to zero.
CoFileTimeNow;Returns the current time as a FILETIME structure.
CoFileTimeToDosDateTime;Converts a FILETIME into MS-DOS date and time values.
CoFreeAllLibraries;Frees all the DLLs that have been loaded with the CoLoadLibrary function (called internally by CoGetClassObject), regardless of whether they are currently in use.
CoFreeLibrary;Frees a library that, when loaded, was specified to be freed explicitly.
CoFreeUnusedLibraries;Unloads any DLLs that are no longer in use.
CoFreeUnusedLibrariesEx;Unloads any DLLs that are no longer in use and whose unload delay has expired.
CoGetApartmentType;Queries the current apartment type and type qualifier.
CoGetApplicationThreadReference;Gets a reference to the current ASTA thread to participate in ASTA cooperative lifetime management.
CoGetCallContext;Retrieves the context of the current call on the current thread.
CoGetCallerTID;Returns a pointer to a DWORD that contains the apartment ID of the caller's thread.
CoGetCancelObject;Obtains a pointer to a call control interface, normally ICancelMethodCalls, on the cancel object corresponding to an outbound COM method call pending on the same or another client thread.
CoGetClassObject;Provides a pointer to an interface on a class object associated with a specified CLSID.
CoGetContextToken;Returns a pointer to an implementation of IObjContext for the current context.
CoGetCurrentLogicalThreadId;Returns the logical thread id of the current physical thread.
CoGetCurrentProcess;Returns a value that is unique to the current thread. CoGetCurrentProcess can be used to avoid thread ID reuse problems.
CoGetInstanceFromFile;Creates a new object and initializes it from a file using IPersistFile::Load.
CoGetInstanceFromIStorage;Creates a new object and initializes it from a storage object through an internal call to IPersistFile::Load.
CoGetInterceptor;Instantiates the appropriate interceptor for the indicated interface to be intercepted and returns the newly created interceptor.
CoGetInterfaceAndReleaseStream;Unmarshals a buffer containing an interface pointer and releases the stream when an interface pointer has been marshaled from another thread to the calling thread.
CoGetMalloc;Retrieves a pointer to the default OLE task memory allocator (which supports the system implementation of the IMalloc interface) so applications can call its methods to manage memory.
CoGetMarshalSizeMax;Returns an upper bound on the number of bytes needed to marshal the specified interface pointer to the specified object.
CoGetObject;Converts a display name into a moniker that identifies the object named, and then binds to the object identified by the moniker.
CoGetObjectContext;Returns the context for the current object.
CoGetPSClsid;Returns the CLSID of the DLL that implements the proxy and stub for the specified interface.
CoGetStandardMarshal;Creates a default, or standard, marshaling object in either the client process or the server process, depending on the caller, and returns a pointer to that object's IMarshal implementation.
CoGetStdMarshalEx;Creates an aggregated standard marshaler for use with lightweight client-side handlers.
CoGetSystemSecurityPermissions;Returns the default values of the Security Descriptors of the machine-wide launch and access permissions, as well as launch and access limits.
CoGetTreatAsClass;Returns the CLSID of an object that can emulate the specified object.
CoHandlePriorityEventsFromMessagePump;Provides an opportunity for short-running infrastructural COM calls and other high-priority or short-running COM work to be dispatched between messages.
CoImpersonateClient;Enables the server to impersonate the client of the current call for the duration of the call.
CoInitialize;Initializes the COM library on the current thread and identifies the concurrency model as single-thread apartment (STA).
CoInitializeEx;Initializes the COM library for use by the calling thread, sets the thread's concurrency model, and creates a new apartment for the thread if one is required.
CoInitializeSecurity;Registers security and sets the default security values for the process.
CoInstall;Installs the requested COM server application.
CoInvalidateRemoteMachineBindings;Tells the service control manager to flush any cached RPC binding handles for the specified computer.
CoIsHandlerConnected;Determines whether a remote object is connected to the corresponding in-process object.
CoIsOle1Class;Determines whether the specified CLSID represents an OLE 1 object.
CoLoadLibrary;Loads a specific DLL into the caller's process.
CoLockObjectExternal;Called either to lock an object to ensure that it stays in memory, or to release such a lock.
CoMarshalHresult;Marshals an HRESULT to the specified stream, from which it can be unmarshaled using the CoUnmarshalHresult function.
CoMarshalInterface;Writes into a stream the data required to initialize a proxy object in some client process.
CoMarshalInterThreadInterfaceInStream;Marshals an interface pointer from one thread to another thread in the same process.
CoQueryAuthenticationServices;Retrieves a list of the authentication services registered when the process called CoInitializeSecurity.
CoQueryClientBlanket;Called by the server to find out about the client that invoked the method executing on the current thread.
CoQueryProxyBlanket;Retrieves the authentication information the client uses to make calls on the specified proxy.
CoRegisterClassObject;Registers an EXE class object with OLE so other applications can connect to it.
CoRegisterInitializeSpy;Registers an implementation of the IInitializeSpy interface. The IInitializeSpy interface is defied to allow developers to perform initialization and cleanup on COM apartments.
CoRegisterMallocSpy;Registers an implementation of the IMallocSpy interface, thereafter requiring OLE to call its wrapper methods around every call to the corresponding IMalloc method.
CoRegisterMessageFilter;Registers with OLE the instance of an IMessageFilter interface, which is to be used for handling concurrency issues on the current thread.
CoRegisterPSClsid;Enables a downloaded DLL to register its custom interfaces within its running process so that the marshaling code will be able to marshal those interfaces.
CoRegisterSurrogate;Registers the surrogate process through its ISurrogate interface pointer.
CoReleaseMarshalData;Destroys a previously marshaled data packet.
CoReleaseServerProcess;Decrements the global per-process reference count.
CoResumeClassObjects;Called by a server that can register multiple class objects to inform the SCM about all registered classes, and permits activation requests for those class objects.
CoRevertToSelf;Restores the authentication information on a thread of execution.
CoRevokeClassObject;Informs OLE that a class object, previously registered with the CoRegisterClassObject function, is no longer available for use.
CoRevokeInitializeSpy;Revokes a registered implementation of the IInitializeSpy interface.
CoRevokeMallocSpy;Revokes a registered IMallocSpy object.
CoSetCancelObject;Sets (registers) or resets (unregisters) a cancel object for use during subsequent cancel operations on the current thread.
CoSetMessageDispatcher;Registers or unregisters the per-thread message dispatcher that is to be invoked when there are window messages available to dispatch within COM wait APIs on an ASTA thread.
CoSetProxyBlanket;Sets the authentication information that will be used to make calls on the specified proxy.
CoSuspendClassObjects;Prevents any new activation requests from the SCM on all class objects registered within the process.
CoSwitchCallContext;Switches the call context object used by CoGetCallContext.
CoTaskMemAlloc;Allocates a block of task memory in the same way that IMalloc::Alloc does.
CoTaskMemFree;Frees a block of task memory previously allocated through a call to the CoTaskMemAlloc or CoTaskMemRealloc function.
CoTaskMemRealloc;Changes the size of a previously allocated block of task memory.
CoTestCancel;Determines whether the call being executed on the server has been canceled by the client.
CoTreatAsClass;Establishes or removes an emulation, in which objects of one class are treated as objects of a different class.
CoUninitialize;Closes the COM library on the current thread, unloads all DLLs loaded by the thread, frees any other resources that the thread maintains, and forces all RPC connections on the thread to close.
CoUnmarshalHresult;Unmarshals an HRESULT type from the specified stream.
CoUnmarshalInterface;Initializes a newly created proxy using data written into the stream by a previous call to the CoMarshalInterface function, and returns an interface pointer to that proxy.
CoWaitForMultipleHandles;Waits for specified handles to be signaled or for a specified timeout period to elapse.
CoWaitForMultipleObjects;A replacement for CoWaitForMultipleHandles primarily intended for use by Windows Store apps and components. This replacement API hides the options for CoWaitForMultipleHandles that are not supported in ASTA.
CreateAntiMoniker;Creates and returns a new anti-moniker.
CreateAsyncBindCtx;Creates an asynchronous bind context for use with asynchronous monikers.
CreateBindCtx;Returns a pointer to an implementation of IBindCtx (a bind context object). This object stores information about a particular moniker-binding operation.
CreateClassMoniker;Creates a class moniker that refers to the specified class.
CreateFileMoniker;Creates a file moniker based on the specified path.
CreateGenericComposite;Performs a generic composition of two monikers and supplies a pointer to the resulting composite moniker.
CreateItemMoniker;Creates an item moniker that identifies an object within a containing object (typically a compound document).
CreateObjrefMoniker;Creates an OBJREF moniker based on a pointer to an object.
CreatePointerMoniker;Creates a pointer moniker based on a pointer to an object.
DllCanUnloadNow;Determines whether the DLL that implements this function is in use. If not, the caller can unload the DLL from memory.
DllDebugObjectRPCHook;Exported by DLLs to enable remote debugging.
DllGetClassObject;Retrieves the class object from a DLL object handler or object application.
DllRegisterServer;Instructs an in-process server to create its registry entries for all classes supported in this server module.
DllUnregisterServer;Instructs an in-process server to remove only those entries created through DllRegisterServer.
GetClassFile;Returns the CLSID associated with the specified filename.
GetRunningObjectTable;Returns a pointer to the IRunningObjectTable interface on the local running object table (ROT).
IIDFromString;Converts a string generated by the StringFromIID function back into the original interface identifier (IID).
Initialize;Initializes a thread to use Windows Runtime APIs.
IsAccelerator;Determines whether the specified keystroke maps to an accelerator in the specified accelerator table.
IsEqualCLSID;Determines whether two CLSIDs are equal.
IsEqualGUID;Determines whether two GUIDs are equal.
IsEqualIID;Determines whether two interface identifiers are equal.
MkParseDisplayName;Converts a string into a moniker that identifies the object named by the string.
MonikerCommonPrefixWith;Creates a new moniker based on the common prefix that this moniker (the one comprising the data of this moniker object) shares with another moniker.
MonikerRelativePathTo;Provides a moniker that, when composed onto the end of the first specified moniker (or one with a similar structure), yields the second specified moniker.
OleDoAutoConvert;Automatically converts an object to a new class if automatic conversion for that object class is set in the registry.
OleGetAutoConvert;Determines whether the registry is set for objects of a specified CLSID to be automatically converted to another CLSID, and if so, retrieves the new CLSID.
OleGetIconOfClass;Returns a handle to a metafile containing an icon and a string label for the specified CLSID.
OleGetIconOfFile;Returns a handle to a metafile containing an icon and string label for the specified file name.
OleIconToCursor;Converts an icon to a cursor.
OleRegGetMiscStatus;Returns miscellaneous information about the presentation and behaviors supported by the specified CLSID from the registry.
OleRegGetUserType;Gets the user type of the specified class from the registry.
OleSetAutoConvert;Specifies a CLSID for automatic conversion to a different class when an object of that class is loaded.
ProgIDFromCLSID;Retrieves the ProgID for a given CLSID.
StringFromCLSID;Converts a CLSID into a string of printable characters. Different CLSIDs always convert to different strings.
StringFromGUID2;Converts a globally unique identifier (GUID) into a string of printable characters.
StringFromIID;Converts an interface identifier into a string of printable characters.

[COM OLE and Data Transfer]
CreateDataAdviseHolder
CreateDataCache
CreateFormatEnumerator
CreateOleAdviseHolder
DoDragDrop
OleCreate
OleCreateDefaultHandler
OleCreateEmbeddingHelper
OleCreateEx
OleCreateFontIndirect
OleCreateFromData
OleCreateFromDataEx
OleCreateFromFile
OleCreateFromFileEx
OleCreateLink
OleCreateLinkEx
OleCreateLinkFromData
OleCreateLinkFromDataEx
OleCreateLinkToFile
OleCreateLinkToFileEx
OleCreateMenuDescriptor
OleCreatePictureIndirect
OleCreateStaticFromData
OleDestroyMenuDescriptor
OleDraw
OleDuplicateData
OleFlushClipboard
OleGetClipboard
OleInitialize
OleIsCurrentClipboard
OleIsRunning
OleLoad
OleLoadFromStream
OleLoadPicture
OleLoadPictureEx
OleLockRunning
OleMetafilePictFromIconAndLabel
OleNoteObjectVisible
OleQueryCreateFromData
OleQueryLinkFromData
OleRegEnumFormatEtc
OleRegEnumVerbs
OleRun
OleSave
OleSaveToStream
OleSetClipboard
OleSetContainedObject
OleSetMenuDescriptor
OleTranslateAccelerator
OleUIAddVerbMenu
OleUIBusy
OleUICanConvertOrActivateAs
OleUIChangeIcon
OleUIChangeSource
OleUIConvert
OleUIEditLinks
OleUIInsertObject
OleUIObjectProperties
OleUIPasteSpecial
OleUIPromptUser
OleUIUpdateLinks
OleUninitialize
RegisterDragDrop
ReleaseStgMedium
RevokeDragDrop

[Structured Storage]
CreateILockBytesOnHGlobal
CreateStreamOnHGlobal
FmtIdToPropStgName
FreePropVariantArray
GetConvertStg
GetHGlobalFromILockBytes
GetHGlobalFromStream
OleConvertIStorageToOLESTREAM
OleConvertIStorageToOLESTREAMEx
OleConvertOLESTREAMToIStorage
OleConvertOLESTREAMToIStorageEx
PropStgNameToFmtId
PropVariantClear
PropVariantCopy
PropVariantInit
ReadClassStg
ReadClassStm
ReadFmtUserTypeStg
StgConvertPropertyToVariant
SetConvertStg
StgConvertVariantToProperty
StgCreateDocfile
StgCreateDocfileOnILockBytes
StgCreatePropSetStg
StgCreatePropStg
StgCreateStorageEx
StgDeserializePropVariant
StgGetIFillLockBytesOnFile
StgGetIFillLockBytesOnILockBytes
StgIsStorageFile
StgIsStorageILockBytes
StgOpenAsyncDocfileOnIFillLockBytes
StgOpenLayoutDocfile
StgOpenPropStg
StgOpenStorage
StgOpenStorageEx
StgOpenStorageOnILockBytes
StgPropertyLengthAsVariant
StgSerializePropVariant
StgSetTimes
WriteClassStg
WriteClassStm
WriteFmtUserTypeStg

[Public Device Installation]
DiInstallDevice
DiInstallDriver
DiRollbackDriver
DiShowUpdateDevice
DiUninstallDevice
InstallSelectedDriver
SetupDiAskForOEMDisk
SetupDiBuildClassInfoList
SetupDiBuildClassInfoListEx
SetupDiBuildDriverInfoList
SetupDiCallClassInstaller
SetupDiCancelDriverInfoSearch
SetupDiChangeState
SetupDiClassGuidsFromName
SetupDiClassGuidsFromNameEx
SetupDiClassNameFromGuid
SetupDiClassNameFromGuidEx
SetupDiCreateDeviceInfo
SetupDiCreateDeviceInfoList
SetupDiCreateDeviceInfoListEx
SetupDiCreateDeviceInterface
SetupDiCreateDeviceInterfaceRegKey
SetupDiCreateDevRegKey
SetupDiDeleteDeviceInfo
SetupDiDeleteDeviceInterfaceData
SetupDiDeleteDeviceInterfaceRegKey
SetupDiDeleteDevRegKey
SetupDiDestroyClassImageList
SetupDiDestroyDeviceInfoList
SetupDiDestroyDriverInfoList
SetupDiDrawMiniIcon
SetupDiEnumDeviceInfo
SetupDiEnumDeviceInterfaces
SetupDiEnumDriverInfo
SetupDiFinishInstallAction
SetupDiGetActualModelsSection
SetupDiGetActualSectionToInstall
SetupDiGetActualSectionToInstallEx
SetupDiGetClassBitmapIndex
SetupDiGetClassDescription
SetupDiGetClassDescriptionEx
SetupDiGetClassDevPropertySheets
SetupDiGetClassDevs
SetupDiGetClassDevsEx
SetupDiGetClassImageIndex
SetupDiGetClassImageList
SetupDiGetClassImageListEx
SetupDiGetClassInstallParams
SetupDiGetClassProperty
SetupDiGetClassPropertyEx
SetupDiGetClassPropertyKeys
SetupDiGetClassPropertyKeysEx
SetupDiGetClassRegistryProperty
SetupDiGetCustomDeviceProperty
SetupDiGetDeviceInfoListClass
SetupDiGetDeviceInfoListDetail
SetupDiGetDeviceInstallParams
SetupDiGetDeviceInstanceId
SetupDiGetDeviceInterfaceAlias
SetupDiGetDeviceInterfaceDetail
SetupDiGetDeviceInterfaceProperty
SetupDiGetDeviceInterfacePropertyKeys
SetupDiGetDeviceProperty
SetupDiGetDevicePropertyKeys
SetupDiGetDeviceRegistryProperty
SetupDiGetDriverInfoDetail
SetupDiGetDriverInstallParams
SetupDiGetHwProfileFriendlyName
SetupDiGetHwProfileFriendlyNameEx
SetupDiGetHwProfileList
SetupDiGetHwProfileListEx
SetupDiGetINFClass
SetupDiGetSelectedDevice
SetupDiGetSelectedDriver
SetupDiGetWizardPage
SetupDiInstallClass
SetupDiInstallClassEx
SetupDiInstallDevice
SetupDiInstallDeviceInterfaces
SetupDiInstallDriverFiles
SetupDiLoadClassIcon
SetupDiLoadDeviceIcon
SetupDiOpenClassRegKey
SetupDiOpenClassRegKeyEx
SetupDiOpenDeviceInfo
SetupDiOpenDeviceInterface
SetupDiOpenDeviceInterfaceRegKey
SetupDiOpenDevRegKey
SetupDiRegisterCoDeviceInstallers
SetupDiRegisterDeviceInfo
SetupDiRemoveDevice
SetupDiRemoveDeviceInterface
SetupDiRestartDevices
SetupDiSelectBestCompatDrv
SetupDiSelectDevice
SetupDiSelectOEMDrv
SetupDiSetClassInstallParams
SetupDiSetClassProperty
SetupDiSetClassPropertyEx
SetupDiSetClassRegistryProperty
SetupDiSetDeviceInstallParams
SetupDiSetDeviceInterfaceDefault
SetupDiSetDeviceInterfaceProperty
SetupDiSetDeviceProperty
SetupDiSetDeviceRegistryProperty
SetupDiSetDriverInstallParams
SetupDiSetSelectedDevice
SetupDiSetSelectedDriver
SetupDiUnremoveDevice
UpdateDriverForPlugAndPlayDevices

[Winsock]
accept;Permits an incoming connection attempt on a socket.
AcceptEx;Accepts a new connection, returns the local and remote address, and receives the first block of data sent by the client application.
bind;Associates a local address with a socket.
closesocket;Closes an existing socket.
connect;Establishes a connection to a specified socket.
ConnectEx;Establishes a connection to a specified socket, and optionally sends data once the connection is established. Only supported on connection-oriented sockets.
DisconnectEx;Closes a connection on a socket, and allows the socket handle to be reused.
EnumProtocols;Retrieves information about a specified set of network protocols that are active on a local host.
freeaddrinfo;Frees address information that the getaddrinfo function dynamically allocates in addrinfo structures.
FreeAddrInfoEx;Frees address information that the GetAddrInfoEx function dynamically allocates in addrinfoex structures.
FreeAddrInfoW;Frees address information that the GetAddrInfoW function dynamically allocates in addrinfoW structures.
gai_strerror;Assists in printing error messages based on the EAI_* errors returned by the getaddrinfo function.
GetAcceptExSockaddrs;Parses the data obtained from a call to the AcceptEx function.
GetAddressByName;Queries a namespace, or a set of default namespaces, to retrieve network address information for a specified network service. This process is known as service name resolution. A network service can also use the function to obtain local address information that it can use with the bind function.
getaddrinfo;Provides protocol-independent translation from an ANSI host name to an address.
GetAddrInfoEx;Provides protocol-independent name resolution with additional parameters to qualify which name space providers should handle the request.
GetAddrInfoExCancel;Cancels an asynchronous operation by the GetAddrInfoEx function.
GetAddrInfoExOverlappedResult;Gets the return code for an OVERLAPPED structure used by an asynchronous operation for the GetAddrInfoEx function.
GetAddrInfoW;Provides protocol-independent translation from a Unicode host name to an address.
gethostbyaddr;Retrieves the host information corresponding to a network address.
gethostbyname;Retrieves host information corresponding to a host name from a host database. Deprecated: use getaddrinfo instead.
gethostname;Retrieves the standard host name for the local computer.
GetHostNameW;Retrieves the standard host name for the local computer as a Unicode string.
getipv4sourcefilter;Retrieves the multicast filter state for an IPv4 socket.
GetNameByType;Retrieves the name of a network service for the specified service type.
getnameinfo;Provides name resolution from an IPv4 or IPv6 address to an ANSI host name and from a port number to the ANSI service name.
GetNameInfoW;Provides name resolution from an IPv4 or IPv6 address to a Unicode host name and from a port number to the Unicode service name.
getpeername;Retrieves the address of the peer to which a socket is connected.
getprotobyname;Retrieves the protocol information corresponding to a protocol name.
getprotobynumber;Retrieves protocol information corresponding to a protocol number.
getservbyname;Retrieves service information corresponding to a service name and protocol.
getservbyport;Retrieves service information corresponding to a port and protocol.
GetService;Retrieves information about a network service in the context of a set of default namespaces or a specified namespace.
getsockname;Retrieves the local name for a socket.
getsockopt;Retrieves a socket option.
getsourcefilter;Retrieves the multicast filter state for an IPv4 or IPv6 socket.
GetTypeByName;Retrieves a service type GUID for a network service specified by name.
htond;Converts a double from host to TCP/IP network byte order (which is big-endian).
htonf;Converts a float from host to TCP/IP network byte order (which is big-endian).
htonl;Converts a u_long from host to TCP/IP network byte order (which is big-endian).
htonll;Converts an unsigned __int64 from host to TCP/IP network byte order (which is big-endian).
htons;Converts a u_short from host to TCP/IP network byte order (which is big-endian).
inet_addr;Converts a string containing an (Ipv4) Internet Protocol dotted address into a proper address for the in_addr structure.
inet_ntoa;Converts an (IPv4) Internet network address into a string in Internet standard dotted format.
InetNtop;converts an IPv4 or IPv6 Internet network address into a string in Internet standard format. The ANSI version of this function is inet_ntop.
InetPton;Converts an IPv4 or IPv6 Internet network address in its standard text presentation form into its numeric binary form. The ANSI version of this function is inet_pton.
ioctlsocket;Controls the I/O mode of a socket.
listen;Places a socket a state where it is listening for an incoming connection.
ntohd;Converts an unsigned __int64 from TCP/IP network order to host byte order (which is little-endian on Intel processors) and returns a double.
ntohf;Converts an unsigned __int32 from TCP/IP network order to host byte order (which is little-endian on Intel processors) and returns a float.
ntohl;Converts a u_long from TCP/IP network order to host byte order (which is little-endian on Intel processors).
ntohll;Converts an unsigned __int64 from TCP/IP network order to host byte order (which is little-endian on Intel processors).
ntohs;Converts a u_short from TCP/IP network byte order to host byte order (which is little-endian on Intel processors).
recv;Receives data from a connected or bound socket.
recvfrom;Receives a datagram and stores the source address.
RIOCloseCompletionQueue;Closes an existing completion queue used for I/O completion notification by send and receive requests with the Winsock registered I/O extensions.
RIOCreateCompletionQueue;Creates an I/O completion queue of a specific size for use with the Winsock registered I/O extensions.
RIOCreateRequestQueue;Creates a registered I/O socket descriptor using a specified socket and I/O completion queues for use with the Winsock registered I/O extensions.
RIODequeueCompletion;Removes entries from an I/O completion queue for use with the Winsock registered I/O extensions.
RIODeregisterBuffer;Deregisters a registered buffer used with the Winsock registered I/O extensions.
RIONotify;Registers the method to use for notification behavior with an I/O completion queue for use with the Winsock registered I/O extensions.
RIOReceive;Receives network data on a connected registered I/O TCP socket or a bound registered I/O UDP socket for use with the Winsock registered I/O extensions.
RIOReceiveEx;Receives network data on a connected registered I/O TCP socket or a bound registered I/O UDP socket with additional options for use with the Winsock registered I/O extensions.
RIORegisterBuffer;Registers a RIO_BUFFERID, a registered buffer descriptor, with a specified buffer for use with the Winsock registered I/O extensions.
RIOResizeCompletionQueue;Resizes an I/O completion queue to be either larger or smaller for use with the Winsock registered I/O extensions.
RIOResizeRequestQueue;Resizes a request queue to be either larger or smaller for use with the Winsock registered I/O extensions.
RIOSend;Sends network data on a connected registered I/O TCP socket or a bound registered I/O UDP socket for use with the Winsock registered I/O extensions.
RIOSendEx;Sends network data on a connected registered I/O TCP socket or a bound registered I/O UDP socket with additional options for use with the Winsock registered I/O extensions.
select;Determines the status of one or more sockets, waiting if necessary, to perform synchronous I/O.
send;Sends data on a connected socket.
sendto;Sends data to a specific destination.
SetAddrInfoEx;Registers a host and service name along with associated addresses with a specific namespace provider.
setipv4sourcefilter;Sets the multicast filter state for an IPv4 socket.
SetService;Registers or removes from the registry a network service within one or more namespaces. Can also add or remove a network service type within one or more namespaces.
SetSocketMediaStreamingMode;Indicates whether the network is to be used for transferring streaming media that requires quality of service.
setsockopt;Sets a socket option.
setsourcefilter;Sets the multicast filter state for an IPv4 or IPv6 socket.
shutdown;Disables sends or receives on a socket.
socket;Creates a socket that is bound to a specific service provider.
TransmitFile;Transmits file data over a connected socket handle.
TransmitPackets;Transmits in-memory data or file data over a connected socket.
WSAAccept;Conditionally accepts a connection based on the return value of a condition function, provides quality of service flow specifications, and allows the transfer of connection data.
WSAAddressToString;Converts all components of a sockaddr structure into a human-readable string representation of the address.
WSAAsyncGetHostByAddr;Asynchronously retrieves host information that corresponds to an address.
WSAAsyncGetHostByName;Asynchronously retrieves host information that corresponds to a host name.
WSAAsyncGetProtoByName;Asynchronously retrieves protocol information that corresponds to a protocol name.
WSAAsyncGetProtoByNumber;Asynchronously retrieves protocol information that corresponds to a protocol number.
WSAAsyncGetServByName;Asynchronously retrieves service information that corresponds to a service name and port.
WSAAsyncGetServByPort;Asynchronously retrieves service information that corresponds to a port and protocol.
WSAAsyncSelect;Requests Windows message-based notification of network events for a socket.
WSACancelAsyncRequest;Cancels an incomplete asynchronous operation.
WSACleanup;Terminates use of the Ws2_32.DLL.
WSACloseEvent;Closes an open event object handle.
WSAConnect;Establishes a connection to another socket application, exchanges connect data, and specifies needed quality of service based on the specified FLOWSPEC structure.
WSAConnectByList;Establishes a connection to one out of a collection of possible endpoints represented by a set of destination addresses (host names and ports).
WSAConnectByName;Establishes a connection to another socket application on a specified host and port
WSACreateEvent;Creates a new event object.
WSADeleteSocketPeerTargetName;Removes the association between a peer target name and an IP address for a socket.
WSADuplicateSocket;Returns a structure that can be used to create a new socket descriptor for a shared socket.
WSAEnumNameSpaceProviders;Retrieves information about available namespaces.
WSAEnumNameSpaceProvidersEx;Retrieves information about available namespaces.
WSAEnumNetworkEvents;Discovers occurrences of network events for the indicated socket, clear internal network event records, and reset event objects (optional).
WSAEnumProtocols;Retrieves information about available transport protocols.
WSAEventSelect;Specifies an event object to be associated with the specified set of FD_XXX network events.
__WSAFDIsSet;Specifies whether a socket is included in a set of socket descriptors.
WSAGetLastError;Returns the error status for the last operation that failed.
WSAGetOverlappedResult;Retrieves the results of an overlapped operation on the specified socket.
WSAGetQOSByName;Initializes a QOS structure based on a named template, or it supplies a buffer to retrieve an enumeration of the available template names.
WSAGetServiceClassInfo;Retrieves the class information (schema) pertaining to a specified service class from a specified namespace provider.
WSAGetServiceClassNameByClassId;Retrieves the name of the service associated with the specified type.
WSAHtonl;Converts a u_long from host byte order to network byte order.
WSAHtons;Converts a u_short from host byte order to network byte order.
WSAImpersonateSocketPeer;Used to impersonate the security principal corresponding to a socket peer in order to perform application-level authorization.
WSAInstallServiceClass;Registers a service class schema within a namespace.
WSAIoctl;Controls the mode of a socket.
WSAJoinLeaf;Joins a leaf node into a multipoint session, exchanges connect data, and specifies needed quality of service based on the specified structures.
WSALookupServiceBegin;Initiates a client query that is constrained by the information contained within a WSAQUERYSET structure.
WSALookupServiceEnd;Frees the handle used by previous calls to WSALookupServiceBegin and WSALookupServiceNext.
WSALookupServiceNext;Retrieve the requested service information.
WSANSPIoctl;Developers to make I/O control calls to a registered namespace.
WSANtohl;Converts a u_long from network byte order to host byte order.
WSANtohs;Converts a u_short from network byte order to host byte order.
WSAPoll;Determines status of one or more sockets.
WSAProviderConfigChange;Notifies the application when the provider configuration is changed.
WSAQuerySocketSecurity;Queries information about the security applied to a connection on a socket.
WSARecv;Receives data from a connected socket.
WSARecvDisconnect;Terminates reception on a socket, and retrieves the disconnect data if the socket is connection oriented.
WSARecvEx;Receives data from a connected socket.
WSARecvFrom;Receives a datagram and stores the source address.
WSARecvMsg;Receives data and optional control information from connected and unconnected sockets.
WSARemoveServiceClass;Permanently removes the service class schema from the registry.
WSAResetEvent;Resets the state of the specified event object to nonsignaled.
WSARevertImpersonation;Terminates the impersonation of a socket peer.
WSASend;Sends data on a connected socket.
WSASendDisconnect;Initiates termination of the connection for the socket and sends disconnect data.
WSASendMsg;Sends data and optional control information from connected and unconnected sockets.
WSASendTo;Sends data to a specific destination, using overlapped I/O where applicable.
WSASetEvent;Sets the state of the specified event object to signaled.
WSASetLastError;Sets the error code.
WSASetService;Registers or removes from the registry a service instance within one or more namespaces.
WSASetSocketPeerTargetName;Used to specify the peer target name (SPN) that corresponds to a peer IP address. This target name is meant to be specified by client applications to securely identify the peer that should be authenticated.
WSASetSocketSecurity;Enables and applies security for a socket.
WSASocket;Creates a socket that is bound to a specific transport-service provider.
WSAStartup;Initiates use of WS2_32.DLL by a process.
WSAStringToAddress;Converts a numeric string to a sockaddr structure.
WSAWaitForMultipleEvents;Returns either when one or all of the specified event objects are in the signaled state, or when the time-out interval expires.

[Shell Path Handling]
PathAddBackslash;Adds a backslash to the end of a string to create the correct syntax for a path. If the source path already has a trailing backslash, no backslash will be added.
PathAddExtension;Adds a file name extension to a path string.
PathAppend;Appends one path to the end of another.
PathBuildRoot;Creates a root path from a given drive number.
PathCanonicalize;Simplifies a path by removing navigation elements such as "." and ".." to produce a direct, well-formed path.
PathCombine;Concatenates two strings that represent properly formed paths into one path; also concatenates any relative path elements.
PathCommonPrefix;Compares two paths to determine if they share a common prefix. A prefix is one of these types: "C:\\", ".", "..", "..\\".
PathCompactPath;Truncates a file path to fit within a given pixel width by replacing path components with ellipses.
PathCompactPathEx;Truncates a path to fit within a certain number of characters by replacing path components with ellipses.
PathCreateFromUrl;Converts a file URL to a Microsoft MS-DOS path.
PathCreateFromUrlAlloc;Creates a path from a file URL.
PathFileExists;Determines whether a path to a file system object such as a file or folder is valid.
PathFindExtension;Searches a path for an extension.
PathFindFileName;Searches a path for a file name.
PathFindNextComponent;Parses a path and returns the portion of that path that follows the first backslash.
PathFindOnPath;Searches for a file.
PathFindSuffixArray;Determines whether a given file name has one of a list of suffixes.
PathGetArgs;Finds the command line arguments within a given path.
PathGetCharType;Determines the type of character in relation to a path.
PathGetDriveNumber;Searches a path for a drive letter within the range of 'A' to 'Z' and returns the corresponding drive number.
PathIsContentType;Determines if a file's registered content type matches the specified content type. This function obtains the content type for the specified file type and compares that string with the pszContentType. The comparison is not case-sensitive.
PathIsDirectory;Verifies that a path is a valid directory.
PathIsDirectoryEmpty;Determines whether a specified path is an empty directory.
PathIsFileSpec;Searches a path for any path-delimiting characters (for example, ':' or '\' ). If there are no path-delimiting characters present, the path is considered to be a File Spec path.
PathIsHTMLFile;Determines if a file is an HTML file. The determination is made based on the content type that is registered for the file's extension.
PathIsLFNFileSpec;Determines whether a file name is in long format.
PathIsNetworkPath;Determines whether a path string represents a network resource.
PathIsPrefix;Searches a path to determine if it contains a valid prefix of the type passed by pszPrefix. A prefix is one of these types: "C:\\", ".", "..", "..\\".
PathIsRelative;Searches a path and determines if it is relative.
PathIsRoot;Determines whether a path string refers to the root of a volume.
PathIsSameRoot;Compares two paths to determine if they have a common root component.
PathIsSystemFolder;Determines if an existing folder contains the attributes that make it a system folder. Alternately, this function indicates if certain attributes qualify a folder to be a system folder.
PathIsUNC;Determines if a path string is a valid Universal Naming Convention (UNC) path, as opposed to a path based on a drive letter.
PathIsUNCServer;Determines if a string is a valid UNC for a server path only.
PathIsUNCServerShare;Determines if a string is a valid UNC share path, \\server\share.
PathIsURL;Tests a given string to determine if it conforms to a valid URL format.
PathMakePretty;Converts an all-uppercase path to all lowercase characters to give the path a consistent appearance.
PathMakeSystemFolder;Gives an existing folder the proper attributes to become a system folder.
PathMatchSpec;Searches a string using a MS-DOS wildcard match type.
PathMatchSpecEx;Matches a file name from a path against one or more file name patterns.
PathParseIconLocation;Parses a file location string that contains a file location and icon index, and returns separate values.
PathQuoteSpaces;Searches a path for spaces. If spaces are found, the entire path is enclosed in quotation marks.
PathRelativePathTo;Creates a relative path from one file or folder to another.
PathRemoveArgs;Removes any arguments from a given path.
PathRemoveBackslash;Removes the trailing backslash from a given path.
PathRemoveBlanks;Removes all leading and trailing spaces from a string.
PathRemoveExtension;Removes the file name extension from a path, if one is present.
PathRemoveFileSpec;Removes the trailing file name and backslash from a path, if they are present.
PathRenameExtension;Replaces the extension of a file name with a new extension. If the file name does not contain an extension, the extension will be attached to the end of the string.
PathSearchAndQualify;Determines if a given path is correctly formatted and fully qualified.
PathSetDlgItemPath;Sets the text of a child control in a window or dialog box, using PathCompactPath to ensure the path fits in the control.
PathSkipRoot;Retrieves a pointer to the first character in a path following the drive letter or UNC server/share path elements.
PathStripPath;Removes the path portion of a fully qualified path and file.
PathStripToRoot;Removes all file and directory elements in a path except for the root information.
PathUndecorate;Removes the decoration from a path string.
PathUnExpandEnvStrings;Replaces certain folder names in a fully qualified path with their associated environment string.
PathUnmakeSystemFolder;Removes the attributes from a folder that make it a system folder. This folder must actually exist in the file system.
PathUnquoteSpaces;Removes quotes from the beginning and end of a path.
SHSkipJunction;Checks a bind context to see if it is safe to bind to a particular component object.
UrlApplyScheme;Determines a scheme for a specified URL string, and returns a string with an appropriate prefix.
UrlCanonicalize;Converts a URL string into canonical form.
UrlCombine;When provided with a relative URL and its base, returns a URL in canonical form.
UrlCompare;Makes a case-sensitive comparison of two URL strings.
UrlCreateFromPath;Converts a MS-DOS path to a canonicalized URL.
UrlEscape;Converts characters or surrogate pairs in a URL that might be altered during transport across the Internet ("unsafe" characters) into their corresponding escape sequences. Surrogate pairs are characters between U+10000 to U+10FFFF (in UTF-32) or between DC00 to DFFF (in UTF-16).
UrlEscapeSpaces;A macro that converts space characters into their corresponding escape sequence.
UrlGetLocation;Retrieves the location from a URL.
UrlGetPart;Accepts a URL string and returns a specified part of that URL.
UrlHash;Hashes a URL string.
UrlIs;Tests whether a URL is a specified type.
UrlIsFileUrl;Tests a URL to determine if it is a file URL.
UrlIsNoHistory;Returns whether a URL is a URL that browsers typically do not include in navigation history.
UrlIsOpaque;Returns whether a URL is opaque.
UrlUnescape;Converts escape sequences back into ordinary characters.
UrlUnescapeInPlace;Converts escape sequences back into ordinary characters and overwrites the original string.

[Shell Color Palette Handling]
ColorAdjustLuma;Changes the luminance of a RGB value. Hue and saturation are not affected.
ColorHLSToRGB;Converts colors from hue-luminance-saturation (HLS) to RGB format.
ColorRGBToHLS;Converts colors from RGB to hue-luminance-saturation (HLS) format.
SHCreateShellPalette;Creates a halftone palette for the specified device context.

[Shell Miscellaneous Utility]
DllInstall;Handles installation and setup for a DLL.
GetProcessReference;Retrieves the process-specific object supplied by SetProcessReference, incrementing the reference count to keep the process alive.
HashData;Hashes an array of data.
IsInternetESCEnabled;Determines whether Windows Internet Explorer is in the Enhanced Security Configuration.
IsOS;Checks for specified operating systems and operating system features.
IStream_Copy;Copies a stream to another stream.
IStream_Read;Reads bytes from a specified stream and returns a value that indicates whether all bytes were successfully read.
IStream_ReadPidl;Reads a pointer to an item identifier list (PIDL) from an IStream object into a PIDLIST_RELATIVE object.
IStream_ReadStr;Reads from a stream and writes into a string.
IStream_Reset;Moves the seek position in a specified stream to the beginning of the stream.
IStream_Size;Retrieves the size, in bytes, of a specified stream.
IStream_Write;Writes data of unknown format from a buffer to a specified stream.
IStream_WritePidl;Writes a PIDL from a PCUIDLIST_RELATIVE object into an IStream object.
IStream_WriteStr;Reads from a string and writes into a stream.
IUnknown_AtomicRelease;Releases a Component Object Model (COM) pointer and sets it to NULL.
IUnknown_GetSite;Calls the specified object's IObjectWithSite::GetSite method.
IUnknown_GetWindow;Attempts to retrieve a window handle from a COM object by querying for various interfaces that have a GetWindow method.
IUnknown_QueryService;Retrieves an interface for a service from a specified object.
IUnknown_Set;Changes the value of a COM interface pointer and releases the previous interface.
IUnknown_SetSite;Sets the specified object's site by calling its IObjectWithSite::SetSite method.
ParseURL;Performs rudimentary parsing of a URL.
QISearch;A table-driven implementation of the IUnknown::QueryInterface method.
SetProcessReference;Provides a COM object that allows hosted Shell extensions and other components to prevent their host process from closing prematurely. The host process is typically Windows Explorer or Internet Explorer, but this function can also be used by other applications.
SHAutoComplete;Instructs system edit controls to use AutoComplete to help complete URLs or file system paths.
SHCreateMemStream;Creates a memory stream using a similar process to CreateStreamOnHGlobal.
SHCreateStreamOnFileEx;Opens or creates a file and retrieves a stream to read or write to that file.
SHCreateThread;Creates a thread.
SHCreateThreadRef;Creates a per-thread reference to a COM object.
SHCreateThreadWithHandle;Creates a new thread and retrieves its handle.
SHGetThreadRef;Retrieves the per-thread object reference set by SHSetThreadRef.
SHGlobalCounterDecrement;Decrements a global counter.
SHGlobalCounterGetValue;Gets the current value of a global counter.
SHGlobalCounterIncrement;Increments a global counter.
SHIsLowMemoryMachine;SHReleaseThreadRef;Releases a thread reference before the thread procedure returns.
SHSetThreadRef;Stores a per-thread reference to a COM object. This allows the caller to control the thread's lifetime so that it can ensure that Windows won't shut down the thread before the caller is ready.

[Shell Registry Handling]
AssocCreate;Returns a pointer to an IQueryAssociations object.
AssocGetPerceivedType;Retrieves a file's perceived type based on its extension.
AssocIsDangerous;Determines whether a file type is considered a potential security risk.
AssocQueryKey;Searches for and retrieves a key related to a file or protocol association from the registry.
AssocQueryString;Searches for and retrieves a file or protocol association-related string from the registry.
AssocQueryStringByKey;Searches for and retrieves a file association-related string from the registry starting from a specified key.
SHCopyKey;Recursively copies the subkeys and values of the source subkey to the destination key. SHCopyKey does not copy the security attributes of the keys.
SHDeleteEmptyKey;Deletes an empty key.
SHDeleteKey;Deletes a subkey and all its descendants. This function removes the key and all the key's values from the registry.
SHDeleteValue;Deletes a named value from the specified registry key.
SHEnumKeyEx;Enumerates the subkeys of the specified open registry key.
SHEnumValue;Enumerates the values of the specified open registry key.
SHGetAssocKeys;Retrieves an array of class subkeys associated with an IQueryAssociations object.
SHGetValue;Retrieves a registry value.
SHOpenRegStream2;Opens a registry value and supplies a stream that can be used to read from or write to the value. This function supersedes SHOpenRegStream.
SHQueryInfoKey;Retrieves information about a specified registry key.
SHQueryValueEx;Opens a registry key and queries it for a specific value.
SHRegCloseUSKey;Closes a handle to a user-specific registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).
SHRegCreateUSKey;Creates or opens a registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).
SHRegDeleteEmptyUSKey;Deletes an empty registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).
SHRegDeleteUSValue;Deletes a registry subkey value in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).
SHRegDuplicateHKey;Duplicates a registry key's HKEY handle.
SHRegEnumUSKey;Enumerates the subkeys of a registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).
SHRegEnumUSValue;Enumerates the values of the specified registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).
SHRegGetBoolUSValue;Retrieves a Boolean value from a registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).
SHRegGetIntW;Reads a numeric string value from the registry and converts it to an integer.
SHRegGetPath;Retrieves a file path from the registry, expanding environment variables as needed.
SHRegGetUSValue;Retrieves a value from a registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).
SHRegOpenUSKey;Opens a registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).
SHRegQueryInfoUSKey;Retrieves information about a specified registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).
SHRegQueryUSValue;Retrieves the type and data for a specified name associated with an open registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).
SHRegSetPath;Takes a file path, replaces folder names with environment strings, and places the resulting string in the registry.
SHRegSetUSValue;Sets a registry subkey value in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).
SHRegSetValue;Sets a registry value.
Use RegSetValue in its place.
SHRegWriteUSValue;Writes a value to a registry subkey in a user-specific subtree (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE).
SHSetValue;Sets the value of a registry key.

[Deprecated Shell APIs]
AUTO_SCROLL_DATA;AUTO_SCROLL_DATA may be altered or unavailable.
CABINETSTATE;CABINETSTATE may be altered or unavailable.
DESKBANDINFO;Receives information about a band object. This structure is used with the deprecated IDeskBand::GetBandInfo method.
SECURELOCK;Deprecated. This enumeration is used by the BASEBROWSERDATA structure to indicate the base browser's lock icon status.
FOLDERSETDATA;Deprecated. Data used in IBrowserService2::GetFolderSetData.
TOOLBARITEM;Deprecated. Data used in IBrowserService2::_GetToolbarItem, IBrowserService2::v_MayGetNextToolbarFocus, and IBrowserService2::_SetFocus to define a toolbar item.
AddMRUStringW;Adds a string to the top of the most recently used (MRU) list.
CallCPLEntry16;Performs no function. Provided for backward compatibility.
CanShareFolderW;Used to determine whether to show the Share this folder option in web view.
CharLowerWrapW;Converts a Unicode character string or a single character to lowercase. If the operand is a character string, the function converts the characters in place.
CharUpperBuffWrapW;Converts lowercase characters in a buffer to uppercase characters. The function converts the characters in place.
CIDLData_CreateFromIDArray;CIDLData_CreateFromIDArray may be altered or unavailable.
CompareStringWrapW;Compares two Unicode character strings, using a specified locale.
ConnectToConnectionPoint;Establishes or terminates a connection between a client's sink and a connection point container.
CreateHardwareEventMoniker;Creates a moniker representing a hardware component and its associated event handler. AutoPlay uses this function to allow applications to use AutoPlay events.
CreateUserProfileEx;Creates a user profile for a specified user.
CscSearchApiGetInterface;Creates an instance of a CCscSearchApiInterface object.
DAD_AutoScroll;Scrolls the window while an image is being dragged.
DAD_DragEnterEx;Locks updates to the specified window during a drag operation and displays the drag image at the specified position within the window.
DAD_DragEnterEx2;Locks updates to the specified window during a drag-and-drop operation and displays the drag image at the specified position within the window.
DAD_DragLeave;Unlocks the window locked by the DAD_DragEnterEx function.
DAD_DragMove;Moves the image that is being dragged during a drag-and-drop operation.
DAD_SetDragImage;Sets the drag image.
DAD_ShowDragImage;Shows or hides the image being dragged.
DoEnvironmentSubst;Parses an input string that contains references to one or more environment variables and replaces them with their fully expanded values.
DriveType;DriveType may be altered or unavailable.
EnumMRUListW;Enumerates the contents of the MRU list. Optionally retrieves an item from the enumeration.
EstimateFileRiskLevel;Estimates the risk of executing unknown code when a handler is called on a given file. This risk is based on an understanding of the handler and the code content of the file.
ExtractAssociatedIconEx;ExtractAssociatedIconEx may be altered or unavailable.
FindResourceWrapW;Determines the location of a resource with the specified type and name, in the specified module.
GetDateFormatWrapW;Formats a date as a date string for a specified locale. The function formats either a specified date or the local system date.
GetFileNameFromBrowse;Creates an Open dialog box so that the user can specify the drive, directory, and name of a file to open.
GetMenuPosFromID;GetMenuPosFromID may be altered or unavailable.
GetTimeFormatWrapW;Formats time as a time string for a specified locale. The function formats either a specified time or the local system time.
GUIDFromString;Converts a string to a GUID.
ILLoadFromStream;Deprecated. Loads an ITEMIDLIST structure from a stream.
ILLoadFromStreamEx(IStream*, PIDLIST_ABSOLUTE*);This function may be altered or unavailable.
ILLoadFromStreamEx(IStream*, PIDLIST_RELATIVE*);This function may be altered or unavailable.
ILLoadFromStreamEx(IStream*, PITEMID_CHILD*);This function may be altered or unavailable.
IsCharAlphaNumericWrapW;Determines whether a character is either an alphabetical or a numeric character. This determination is based on the semantics of the language selected by the user during setup or through Control Panel.
IsNetDrive;Tests whether a drive is a network drive.
IsUserAnAdmin;IsUserAnAdmin may be altered or unavailable.
LPFNDFMCALLBACK;LPFNDFMCALLBACK may be altered or unavailable.
LPFNVIEWCALLBACK;Defines the prototype for the callback function used by the system folder view object. This function essentially duplicates the functionality of IShellFolderViewCB.
LinkWindow_RegisterClass;Registers a window class that allows for the SysLink common control to be used in a window.
LinkWindow_UnregisterClass;Unregisters a window class registered by LinkWindow_RegisterClass.
MLFreeLibrary;Unmaps a resource DLL loaded by the MLLoadLibrary function.
MLHtmlHelp;Displays a help window that corresponds to the current UI language setting.
MLLoadLibrary;Maps an appropriate resource DLL into the address space of the calling function, based on the user's default UI language.
MLWinHelp;Starts Windows Help (Winhelp.exe) and passes additional data that indicates the nature of the help requested by the application.
OpenRegStream;OpenRegStream may be altered or unavailable. Instead, use SHOpenRegStream2 or SHOpenRegStream.
OutputDebugStringWrapW;Sends a Unicode string to the debugger for display.
ParseField;Reads a line from Setup.inf and extracts the specified field from the string.
PassportWizardRunDll;Launches the Passport Wizard when used with Rundll32.exe.
PathCleanupSpec;PathCleanupSpec may be altered or unavailable.
PathGetShortPath;PathGetShortPath may be altered or unavailable.
PathIsExe;PathIsExe may be altered or unavailable.
PathIsSlow;PathIsSlow may be altered or unavailable.
PathProcessCommand;Deprecated. Processes a string that contains a command line and generates a suitably quoted string, with arguments attached if required.
PathResolve;PathResolve may be altered or unavailable.
PerUserInit;Creates My Documents and other special folders, initializes them as needed, and creates the Send To shortcut menu item for My Documents.
PFNASYNCICONTASKCALLBACK;Defines the prototype for the callback function used by SHMapIDListToImageListIndexAsync.
PickIconDlg;PickIconDlg may be altered or unavailable.
ReadCabinetState;ReadCabinetState may be altered or unavailable.
RealDriveType;RealDriveType may be altered or unavailable.
RestartDialog;Displays a dialog box that prompts the user to restart Windows. When the user clicks the button, the function calls ExitWindowsEx to attempt to restart Windows.
RestartDialogEx;Displays a dialog box that asks the user to restart Windows. When the user clicks the button, the function calls ExitWindowsEx to attempt to restart Windows.
SHAddFromPropSheetExtArray;Adds pages to a property sheet extension array created by SHCreatePropSheetExtArray.
SHAlloc;Allocates memory from the Shell's heap.
SHAllocShared;SHAllocShared may be altered or unavailable.
SHAnsiToAnsi;Copies an ANSI string.
SHAnsiToUnicode;Converts a string from the ANSI code page to the Unicode code page.
SHChangeDWORDAsIDList;SHChangeDWORDAsIDList may be altered or unavailable.
SHChangeProductKeyAsIDList;SHChangeUpdateImageIDList;SHChangeUpdateImageIDList may be altered or unavailable.
SHCloneSpecialIDList;SHCloneSpecialIDList may be altered or unavailable. Instead, use SHGetSpecialFolderLocation.
SHCLSIDFromString;Takes the string form of a class identifier (CLSID) and creates the corresponding CLSID.
SHCoCreateInstance;SHCoCreateInstance may be altered or unavailable. Instead, use CoCreateInstance.
SHCreateDirectory;Creates a new file system folder.
SHCreateDirectoryEx;Creates a new file system folder, with optional security attributes.
SHCreateFileExtractIcon;SHCreateFileExtractIcon may be altered or unavailable.
SHCreateProcessAsUserW;Creates a new user-mode process and its primary thread to run a specified executable file.
SHCREATEPROCESSINFOW;Contains the information needed by SHCreateProcessAsUserW to create a process.
SHCreatePropSheetExtArray;SHCreatePropSheetExtArray may be altered or unavailable.
SHCreateQueryCancelAutoPlayMoniker;Deprecated. Creates a QueryCancelAutoPlay class moniker, which can then be used to register the IQueryCancelAutoPlay handler in the running object table (ROT).
SHCreateStdEnumFmtEtc;SHCreateStdEnumFmtEtc may be altered or unavailable.
SHCreateStreamOnFile;SHCreateStreamOnFile may be altered or unavailable. Instead, use SHCreateStreamOnFileEx.
SHDestroyPropSheetExtArray;Frees property sheet handlers that are pointed to an array created by SHCreatePropSheetExtArray.
Shell_GetCachedImageIndex;Shell_GetCachedImageIndex may be altered or unavailable.
Shell_GetImageLists;Retrieves system image lists for large and small icons.
Shell_MergeMenus;Shell_MergeMenus may be altered or unavailable.
ShellMessageBox;ShellMessageBox may be altered or unavailable.
SHExtractIconsW;Creates an array of handles to icons extracted from a specified file.
SHFind_InitMenuPopup;SHFind_InitMenuPopup may be altered or unavailable.
SHFindFiles;SHFindFiles may be altered or unavailable.
SHFlushClipboard;Carries out the clipboard shutdown sequence. It also releases the IDataObject pointer placed on the clipboard by the OleSetClipboard function.
SHFlushSFCache;SHFlushSFCache may be altered or unavailable.
SHFormatDateTime;SHFormatDateTime may be altered or unavailable.
SHFormatDrive;SHFormatDrive may be altered or unavailable.
SHFree;Frees the memory allocated by SHAlloc.
SHFreeShared;SHFreeShared may be altered or unavailable.
SHGetAttributesFromDataObject;SHGetAttributesFromDataObject may be altered or unavailable.
SHGetFolderLocation;Deprecated. Retrieves the path of a folder as an ITEMIDLIST structure.
SHGetFolderPath;Deprecated. Gets the path of a folder identified by a CSIDL value.
SHGetFolderPathAndSubDir;Gets the path of a folder and appends a user-provided subfolder path.
SHGetInverseCMAP;Retrieves the inverse color table mapping for the halftone palette.
SHGetMalloc;Retrieves a pointer to the Shell's IMalloc interface.
SHGetRealIDL;SHGetRealIDL may be altered or unavailable.
SHGetSetFolderCustomSettings;SHGetSetFolderCustomSettings may be altered or unavailable.
SHGetSetSettings;SHGetSetSettings may be altered or unavailable.
SHGetShellStyleHInstance;Deprecated. Attempts to get a handle to the Shellstyle.dll file.
SHGetSpecialFolderLocation;SHGetSpecialFolderLocation is not supported and may be altered or unavailable in the future. Instead, use SHGetFolderLocation.
SHGetSpecialFolderPath;SHGetSpecialFolderPath is not supported. Instead, use ShGetFolderPath.
SHGetViewStatePropertyBag;SHGetViewStatePropertyBag may be altered or unavailable.
SHHandleUpdateImage;SHHandleUpdateImage may be altered or unavailable.
SHILCreateFromPath;SHILCreateFromPath may be altered or unavailable.
SHInvokePrinterCommand;Executes a command on a printer object.
SHIsChildOrSelf;Compares whether a window is equal to, a child of, or a descendant of, a second window.
SHLimitInputEdit;Sets limits on valid characters for an edit control.
SHLoadOLE;Deprecated. Provided for backward compatibility.
SHLockShared;SHLockShared may be altered or unavailable.
SHMapIDListToImageListIndexAsync;Retrieves an index in the system image list when given an IShellFolder and an ITEMIDLIST that is contained in it. This function also gets the final icon from the callback if necessary.
SHMapPIDLToSystemImageListIndex;SHMapPIDLToSystemImageListIndex may be altered or unavailable.
SHMessageBoxCheck;SHMessageBoxCheck may be altered or unavailable.
SHObjectProperties;SHObjectProperties may be altered or unavailable.
SHOpenPropSheet;SHOpenPropSheet may be altered or unavailable.
SHOpenRegStream;Deprecated. Opens a registry value and supplies a stream that can be used to read from or write to the value.
SHRegGetBoolValueFromHKCUHKLM;Evaluates a registry key value and returns a boolean value that reflects whether the value exists and the expected state matches the actual state. This function will first check HKEY_CURRENT_USER for the requested information in the specified subkey. If the information does not exist under the HKEY_CURRENT_USER subtree it will check the HKEY_LOCAL_MACHINE subtree for the same information.
SHRegGetValue;Retrieves a registry value.
SHRegGetValueFromHKCUHKLM;Obtains specified information from the registry. This function will check HKEY_CURRENT_USER for the requested information in the specified subkey. If the information does not exist under the HKEY_CURRENT_USER subtree, the function checks the HKEY_LOCAL_MACHINE subtree for the same information.
SHReplaceFromPropSheetExtArray;Requests each property sheet in a property sheet extension array to replace pages. Each page is allowed up to one replacement.
SHRestricted;SHRestricted may be altered or unavailable.
SHSetFolderPath;Deprecated. Assigns a new path to a system folder identified by its CSIDL.
SHSendMessageBroadcast;Sends a message to all top-level windows in the system.
SHShellFolderView_Message;SHShellFolderView_Message may be altered or unavailable.
SHSimpleIDListFromPath;Deprecated. Returns a pointer to an ITEMIDLIST structure when passed a path.
SHStartNetConnectionDialog;SHStartNetConnectionDialog may be altered or unavailable.
SHStripMneumonic;Removes the mnemonic marker from a string.
SHUnicodeToAnsi;Converts a string from the Unicode code page to the ANSI code page.
SHUnicodeToUnicode;Copies a Unicode string.
SHUnlockShared;SHUnlockShared may be altered or unavailable.
SHValidateUNC;SHValidateUNC may be altered or unavailable.
SignalFileOpen;SignalFileOpen may be altered or unavailable.
StopWatchFlush;StopWatchFlush may be altered or unavailable.
StopWatchMode;StopWatchMode may be altered or unavailable.
UpdateAllDesktopSubscriptions;Deprecated. Enumerates the URLs of all the Desktop components and then tests to see if they are subscribed to. If they are subscribed to, the subscriptions are delivered.
UrlFixupW;UrlFixupW may be altered or unavailable.
WhichPlatform;WhichPlatform may be altered or unavailable.
Win32DeleteFile;Win32DeleteFile may be altered or unavailable.
WOWShellExecute;Performs an operation on a specified file. WOWShellExecute exists only for use with the Microsoft Windows NT Virtual DOS Machine (Ntvdm.exe), which allows disk operating system (DOS) and 16-bit software to run on a Windows system, and should not be used by anyone else. Use ShellExecute instead.
WriteCabinetState;WriteCabinetState may be altered or unavailable.
SHLWAPI Wrapper Functions;The tables in this document list wrapper functions from Shlwapi.dll that provide limited Unicode functionality to Windows 95, Windows 98, and Windows Millennium Edition (Windows Me).
FileOpen;Supports the File Open common dialog box.
FileTypes;Creates the File Types page of the Folder Options property sheet that the user displays by clicking Folder Options on the Windows Explorer Tools menu.
FolderItemsFDF;Represents a Shell folder and all its children.
ImageRecompress;Used to recompress an image.
MenuBand;Supports Shell menu bands.
MenuBandSite;Gets or sets menu band site information.
NewMenu;Creates a New context menu for a Shell item.
ShellFldSetExt;Creates a Folder Options dialog box.
ShellFolderBand;Manages folder bands. The Quick Launch bar is an example of a folder band.
Shell Image Store;Creates an instance of an IShellImageStore object.
IBrowserService;Deprecated. The methods exposed by this interface are analogous to virtual protected methods in normal C++ inheritance. The objects' inheritance hierarchy spans multiple DLLs. The hierarchy is made up of a base class and several derived classes that correspond to controls, including CLSID_WebBrowser and the user's desktop. Objects not in the hierarchy should not implement this interface or use most of its methods.
IBrowserService2;Deprecated. IBrowserService2 extends IBrowserService. The methods exposed by this interface are analogous to virtual protected methods in normal C++ inheritance. The objects' inheritance hierarchy spans multiple DLLs. The hierarchy is made up of a base class and several derived classes that correspond to controls including CLSID_WebBrowser and the user's desktop. Objects not in the hierarchy should not implement this interface or use most of its methods.
IBrowserService3;Deprecated. The methods exposed by this interface are analogous to virtual protected methods in normal C++ inheritance. The inheritance hierarchy of the objects spans multiple DLLs. The hierarchy is made up of a base class and several derived classes that correspond to controls, including CLSID_WebBrowser and the user's desktop. Objects not in the hierarchy should not implement this interface, nor use most of its methods.
IBrowserService4;Deprecated.
ICDBurnExt;ICDBurnExt may be altered or unavailable.
IColumnProvider;Exposes methods that enable the addition of custom columns in the Windows Explorer Details view.
IContextMenuSite;Implemented by the default folder view created using SHCreateShellFolderView. An implementation of IContextMenuSite supports IContextMenu::QueryContextMenu, IContextMenu::InvokeCommand, and TrackPopupMenu and any message forwarding necessary for that function. IContextMenuSite typically updates the status bar as well.
IDefViewFrame;Used only for its IUnknown functionality. It has no methods of its own.
IDefViewID;IDefViewID may be altered or unavailable.
IDefViewSafety;Deprecated. Exposes one method that determines a page's web content zone setting before the page is accessed.
IDeskBand;Used to obtain information about a band object.
Important  You should use thumbnail toolbars in new development in place of desk bands, which are not supported as of Windows 7.
IDeskBand2;Exposes methods to enable and query translucency effects in a deskband object.
Important  You should use thumbnail toolbars in new development in place of desk bands, which are not supported as of Windows 7.
IDeskBandInfo;Exposes a method for getting the default Desk Band bandwidth.
IDeskBar;Exposes methods that enable desk bar manipulation.
IDocViewSite;Used as a site object by the IShellView interface.
IDVGetEnum;Exposes methods that allow the system folder view object to provide another object with an enumeration of items, without the second object running a redundant enumeration itself.
IEnumSyncItems;Exposes methods that provide enumeration of all items in a synchronization schedule.
IEnumSyncSchedules;Provides enumeration of all synchronization schedules.
IEnumUserIdentity;IEnumUserIdentity is not supported and may be altered or unavailable in the future. Instead, use User Accounts with Fast User Switching and Remote Desktop.
IExpDispSupport;Deprecated. Exposes methods that allow the retrieval of properties, translation of keyboard accelerators, and determination of a connection point for certain events.
IExpDispSupportXP;Deprecated. Exposes methods that allow the retrieval of properties, translation of keyboard accelerators, and determination of a connection point for certain events.
IFolderBandPriv;IFolderBandPriv is available for use in the operating systems specified in the Requirements section. It may be altered or unavailable in subsequent versions.
IIdentityChangeNotify;Deprecated. Provides notification of modifications to user identities on the system, as well as user requests to switch the current user identity.
IInsertItem;IInsertItem may be altered or unavailable.
IMenuBand;Exposes methods that allow a Component Object Model (COM) object to receive and translate appropriate messages.
IPassportClientServices;The IPassportClientServices interface exposes a method to determine whether a Windows Live ID exists.
IPassportWizard;Exposes a method that invokes the Windows XP Passport Wizard.
IRegTreeItem;Exposes methods that retrieve and set the state of items in a tree-view control that have the Tree-View Control Window Styles flag set.
IShellExecuteHook;Exposes a method that extends the behavior of the ShellExecute or ShellExecuteEx functions. It is typically implemented by subsystems that expose the names of objects that the user can specify in the Run dialog box after clicking the Windows Start button.
IShellFolderBand;IShellFolderBand may be altered or unavailable.
IShellFolderView;Exposes methods that manipulate Shell folder views.
IShellIconOverlayManager;IShellIconOverlayManager may be altered or unavailable.
IShellImageData;Exposes methods and properties that display, manipulate, and describe image data.
IShellImageStore;Deprecated. Exposes methods that manipulate the image cache.
IShellService;Deprecated. IShellService Exposes one method that declares ownership when a service component implementing a certain interface is shared among multiple clients, such as Windows Internet Explorer and Windows Explorer.
IShellTaskScheduler;IShellTaskScheduler may be altered or unavailable.
IShellTaskScheduler2;Extends the functionality of IShellTaskScheduler by inheriting all of its methods, providing the ability to place a task in the queue with reference to other tasks of its priority, and adding a method to reset a task's priority.
ISyncSchedule;Exposes methods associated with an individual synchronization schedule.
ISyncScheduleMgr;Exposes methods to set up and control a synchronization scheduler for synchronization management.
IThumbnailCapture;Exposes a method that obtains a thumbnail representation of an HTML wallpaper.
ITravelEntry;Deprecated. Exposes methods to identify, invoke, and update an individual item in the browser's travel history.
ITravelLog;Deprecated. Exposes methods that maintain and manipulate a record of travel in the browser.
IUserIdentity;IUserIdentity is not supported and may be altered or unavailable in the future. Instead, use User Accounts with Fast User Switching and Remote Desktop.
IUserIdentity2;IUserIdentity2 is not supported and may be altered or unavailable in the future. Instead, use User Accounts with Fast User Switching and Remote Desktop.
IUserIdentityManager;IUserIdentityManager is not supported and may be altered or unavailable in the future. Instead, use User Accounts with Fast User Switching and Remote Desktop.
SFVM_DIDDRAGDROP;SFVM_DIDDRAGDROP may be altered or unavailable.
SFVM_GETDETAILSOF;SFVM_GETDETAILSOF may be altered or unavailable.
SFVM_GETPANE;SFVM_GETPANE may be altered or unavailable.
SFVM_GETZONE;Allows the callback object to provide Internet zone information. Used by IShellFolderViewCB::MessageSFVCB.
SFVM_QUERYFSNOTIFY;SFVM_QUERYFSNOTIFY may be altered or unavailable.
SFVM_SETISFV;Notifies the callback object of the container site. This is used only when IObjectWithSite::SetSite is not supported and SHCreateShellFolderViewEx is used. Used by IShellFolderViewCB::MessageSFVCB.
SFVM_THISIDLIST;SFVM_THISIDLIST may be altered or unavailable.

[Timer]
KillTimer;Destroys the specified timer. 
SetCoalscableTimer;Creates a timer with the specified time-out value and coalescing tolerance delay.
SetTimer;Creates a timer with the specified time-out value.
TimerProc;An application-defined callback function that processes WM_TIMER messages. The TIMERPROC type defines a pointer to this callback function. TimerProc is a placeholder for the application-defined function name.

[System Services Setup API]
InstallHinfSection
SetupAddInstallSectionToDiskSpaceList
SetupAddSectionToDiskSpaceList
SetupAddToDiskSpaceList
SetupAddToSourceList
SetupAdjustDiskSpaceList
SetupBackupError
SetupCancelTemporarySourceList
SetupCloseFileQueue
SetupCloseInfFile
SetupCommitFileQueue
SetupConfigureWmiFromInfSection
SetupCopyError
SetupCopyOEMInf
SetupCreateDiskSpaceList
SetupDecompressOrCopyFile
SetupDefaultQueueCallback
SetupDeleteError
SetupDestroyDiskSpaceList
SetupDuplicateDiskSpaceList
SetupEnumInfSections
SetupFindFirstLine
SetupFindNextLine
SetupFindNextMatchLine
SetupFreeSourceList
SetupGetBinaryField
SetupGetFieldCount
SetupGetFileCompressionInfo
SetupGetFileCompressionInfoEx
SetupGetFileQueueCount
SetupGetFileQueueFlags
SetupGetInfFileList
SetupGetInfInformation
SetupGetIntField
SetupGetLineByIndex
SetupGetLineCount
SetupGetLineText
SetupGetMultiSzField
SetupGetSourceFileLocation
SetupGetSourceFileSize
SetupGetSourceInfo
SetupGetStringField
SetupGetTargetPath
SetupInitDefaultQueueCallback
SetupInitDefaultQueueCallbackEx
SetupInitializeFileLog
SetupInstallFile
SetupInstallFileEx
SetupInstallFilesFromInfSection
SetupInstallFromInfSection
SetupInstallServicesFromInfSection
SetupInstallServicesFromInfSectionEx
SetupIterateCabinet
SetupLogFile
SetupLogError
SetupOpenAppendInfFile
SetupOpenFileQueue
SetupOpenInfFile
SetupOpenMasterInf
SetupPromptForDisk
SetupPromptReboot
SetupQueryDrivesInDiskSpaceList
SetupQueryFileLog
SetupQueryInfFileInformation
SetupQueryInfOriginalFileInformation
SetupQueryInfVersionInformation
SetupQuerySourceList
SetupQuerySpaceRequiredOnDrive
SetupQueueCopy
SetupQueueCopyIndirect
SetupQueueCopySection
SetupQueueDefaultCopy
SetupQueueDelete
SetupQueueDeleteSection
SetupQueueRename
SetupQueueRenameSection
SetupRemoveFileLogEntry
SetupRemoveFromDiskSpaceList
SetupRemoveFromSourceList
SetupRemoveInstallSectionFromDiskSpaceList
SetupRemoveSectionFromDiskSpaceList
SetupRenameError
SetupScanFileQueue
SetupSetDirectoryId
SetupSetDirectoryIdEx
SetupSetFileQueueAlternatePlatform
SetupSetFileQueueFlags
SetupSetPlatformPathOverride
SetupSetSourceList
SetupTermDefaultQueueCallback
SetupTerminateFileLog
SetupUninstallNewlyCopiedInfs
SetupUninstallOEMInf
SetupVerifyInfFile

[Network Management]
<Alert>
NetAlertRaise;Notifies all registered clients that a particular event has occurred.
NetAlertRaiseEx;Simplifies notifying registered clients that a particular event has occurred, because, unlike NetAlertRaise, NetAlertRaiseEx does not require a STD_ALERT structure.

<API Buffer>
NetApiBufferAllocate;Allocates memory from the heap. Call this function when you require compatibility with the NetApiBufferFree function.
NetApiBufferFree;Frees memory allocated by the NetApiBufferAllocate function and other network management functions.
NetApiBufferReallocate;Changes the size of a buffer allocated by a call to the NetApiBufferAllocate function.
NetApiBufferSize;Returns the size, in bytes, of a buffer allocated by a call to the NetApiBufferAllocate function.

<Azure Active Directory Join Information>
NetFreeAadJoinInformation;Frees the memory allocated for the specified DSREG_JOIN_INFO structure, which contains join information for a tenant and which you retrieved by calling the NetGetAadJoinInformation function.
NetGetAadJoinInformation;Retrieves the join information for the specified tenant. This function examines the join information for Microsoft Azure Active Directory and the work account that the current user added.

<Directory Service and Domain Join>
NetAddAlternateComputerName;Adds an alternate name for the specified computer.
NetCreateProvisioningPackage;Provisions a computer account for later use in an offline domain join operation.
NetEnumerateComputerNames;Enumerates names for the specified computer.
NetGetJoinableOUs;Retrieves a list of organizational units (OUs) in which a computer account can be created.
NetGetJoinInformation;Retrieves join status information for the specified computer.
NetJoinDomain;Joins a computer to a workgroup or domain.
NetLogonSetServiceBits;Notifies the Netlogon service of the running state of the services on a domain controller. The caller must be running in the context of either the LocalSystem or the LocalService account.
NetProvisionComputerAccount;Provisions a computer account for later used in an offline domain join operation.
NetRemoveAlternateComputerName;Removes an alternate name for the specified computer.
NetRenameMachineInDomain;Changes the name of a computer in a domain.
NetRequestOfflineDomainJoin;Executes locally on a machine to modify a Windows operating system image mounted on a volume. The registry is loaded for the image and provisioning blob data is written where it can be retrieved during the completion phase of an offline domain join operation.
NetRequestProvisioningPackageInstall;Executes locally on a machine to modify a Windows operating system image mounted on a volume. The registry is loaded from the image and provisioning package data is written where it can be retrieved during the completion phase of an offline domain join operation.
NetSetPrimaryComputerName;Sets the primary computer name for the specified computer.
NetUnjoinDomain;Unjoins a computer from a workgroup or a domain.
NetValidateName;Verifies the validity of a computer name, workgroup name, or domain name.

<Get>
NetGetAnyDCName;Returns the name of any domain controller for a domain that is directly trusted by a specified server.
NetGetDCName;Returns the name of the primary domain controller (PDC) for the specified domain.
NetGetDisplayInformationIndex;Returns the index of the first display information entry whose name begins with a specified string or alphabetically follows the string.
NetQueryDisplayInformation;Returns user, computer, or global group account information.

<Group>
NetGroupAdd;Creates a global group.
NetGroupAddUser;Adds one user to an existing global group.
NetGroupDel;Removes a global group whether or not the group has any members.
NetGroupDelUser;Removes one user name from a global group.
NetGroupEnum;Lists all global groups on a server.
NetGroupGetInfo;Returns information about a particular global group.
NetGroupGetUsers;Lists all members of a particular global group.
NetGroupSetInfo;Sets general information about a global group.
NetGroupSetUsers;Assigns members to a new global group; replaces the members of an existing group.

<Local Group>
NetLocalGroupAdd;Creates a local group.
NetLocalGroupAddMembers;Adds one or more users or global groups to an existing local group.
NetLocalGroupDel;Deletes a local group, removing all existing members from the group.
NetLocalGroupDelMembers;Removes one or more members from an existing local group.
NetLocalGroupEnum;Returns information about each local group account on a server.
NetLocalGroupGetInfo;Returns information about a particular local group account on a server.
NetLocalGroupGetMembers;Lists all members of a specified local group.
NetLocalGroupSetInfo;Sets general information about a local group.
NetLocalGroupSetMembers;Assigns members to a local group.

<Message>
NetMessageBufferSend;Sends a message to a registered message alias.
NetMessageNameAdd;Registers a message alias in the message name table.
NetMessageNameDel;Deletes a message alias from the message name table.
NetMessageNameEnum;Lists all the message aliases stored in the message name table.
NetMessageNameGetInfo;Returns information about a particular message alias in the message name table.

<NetFile>
NetFileClose;Forces a resource to close.
NetFileEnum;Returns information about open files on a server.
NetFileGetInfo;Returns information about a particular opening of a server resource.

<Remote Utility>
NetRemoteComputerSupports;Queries the redirector to retrieve the optional features that a remote system supports.
NetRemoteTOD;Enables applications to access the time-of-day information on a remote server.

<Schedule>
NetScheduleJobAdd;Submits a job to run at a specified future date and time.
NetScheduleJobDel;Cancels a range of jobs queued to run on a computer.
NetScheduleJobEnum;Lists the jobs queued on a specified computer.
NetScheduleJobGetInfo;Returns information about a particular job queued on a computer.
GetNetScheduleAccountInformation;Retrieves the AT Service account name.
SetNetScheduleAccountInformation;Sets the AT Service account name and password.

<Server>
NetServerDiskEnum;Returns a list of local disk drives on a server.
NetServerEnum;Lists all visible servers of a particular type (or types) in the specified domain.
NetServerGetInfo;Returns configuration information about a specified server.
NetServerSetInfo;Sets the operating parameters for a server.

<Server and Workstation Transport>
NetServerComputerNameAdd;Binds an emulated server name to each of the transport protocols on which a server is active. (Combines the functionality of the NetServerTransportEnum function and the NetServerTransportAddEx function.)
NetServerComputerNameDel;Disconnects each network transport protocol from an emulated server name set by a previous call to the NetServerComputerNameAdd function.
NetServerTransportAdd;Binds the specified server to the transport protocol. (This function supports only the SERVER_TRANSPORT_INFO_0 information level.)
NetServerTransportAddEx;Binds the specified server to the transport protocol. (This extended function supports the SERVER_TRANSPORT_INFO_1, SERVER_TRANSPORT_INFO_2, and SERVER_TRANSPORT_INFO_3 information levels.)
NetServerTransportDel;Disconnects the transport protocol from the server.
NetServerTransportEnum;Enumerates the transport protocols managed by the server.
NetWkstaTransportEnum;Lists the transport protocols that are managed by the redirector.

<Use>
NetUseAdd;Creates a connection between a local computer and a server.
NetUseDel;Ends a connection to a shared resource.
NetUseEnum;Lists all current connections between the local computer and resources on remote servers.
NetUseGetInfo;Returns information about a connection to a shared resource.

<User>
NetUserAdd;Adds a user account and assigns a password and privilege level.
NetUserChangePassword;Changes a user's password for a specified network server or domain.
NetUserDel;Deletes a user account from the server.
NetUserEnum;Lists all user accounts on a server.
NetUserGetGroups;Returns a list of global group names to which a user belongs.
NetUserGetInfo;Returns information about a particular user account on a server.
NetUserGetLocalGroups;Returns a list of local group names to which a user belongs.
NetUserSetGroups;Sets global group memberships for a specified user account.
NetUserSetInfo;Sets the password and other elements of a user account.

<User Modals>
NetUserModalsGet;Returns global information for all users and global groups in the security database, which is the security accounts manager (SAM) database or, in the case of domain controllers, the Active Directory.
NetUserModalsSet;Sets global information for all users and global groups in the security database.

<Validation>
NetValidatePasswordPolicyFree;Frees the memory that the NetValidatePasswordPolicy function allocates for the OutputArg parameter,
NetValidatePasswordPolicy;Enables an application to check password compliance against an application-provided account database and verify that passwords meet the complexity, aging, minimum length, and history reuse requirements of a password policy.

<Workstation and Workstation User>
NetWkstaGetInfo;Returns information about the configuration elements for a workstation.
NetWkstaSetInfo;Configures a workstation.
NetWkstaUserEnum;Lists information about all users currently logged on to the workstation.
NetWkstaUserGetInfo;Returns information about one currently logged-on user.
NetWkstaUserSetInfo;Sets the user-specific information for the configuration elements of a workstation.

<Obsolete>
NetAccessAdd
NetAccessCheck
NetAccessDel
NetAccessEnum
NetAccessGetInfo
NetAccessGetUserPerms
NetAccessSetInfo
NetAuditClear
NetAuditRead
NetAuditWrite
NetConfigGet
NetConfigGetAll
NetConfigSet
NetErrorLogClear
NetErrorLogRead
NetErrorLogWrite
NetLocalGroupAddMember
NetLocalGroupDelMember
NetServiceControl
NetServiceEnum
NetServiceGetInfo
NetServiceInstall
NetWkstaTransportAdd
NetWkstaTransportDel

[Window]
AdjustWindowRect
AdjustWindowRectEx
AllowSetForegroundWindow
AnimateWindow
AnyPopup
ArrangeIconicWindows
BeginDeferWindowPos
BringWindowToTop
CalculatePopupWindowPosition
CascadeWindows
ChangeWindowMessageFilter
ChangeWindowMessageFilterEx
ChildWindowFromPoint
ChildWindowFromPointEx
CloseWindow
CreateWindow
CreateWindowEx
DeferWindowPos
DeregisterShellHookWindow
DestroyWindow
EndDeferWindowPos
EndTask
EnumChildProc
EnumChildWindows
EnumThreadWindows
EnumThreadWndProc
EnumWindows
EnumWindowsProc
FindWindow
FindWindowEx
GetAltTabInfo
GetAncestor
GetClientRect
GetDesktopWindow
GetForegroundWindow
GetGUIThreadInfo
GetLastActivePopup
GetLayeredWindowAttributes
GetNextWindow
GetParent
GetProcessDefaultLayout
GetShellWindow
GetSysColor
GetTitleBarInfo
GetTopWindow
GetWindow
GetWindowDisplayAffinity
GetWindowInfo
GetWindowModuleFileName
GetWindowPlacement
GetWindowRect
GetWindowText
GetWindowTextLength
GetWindowThreadProcessId
InternalGetWindowText
IsChild
IsGUIThread
IsHungAppWindow
IsIconic
IsProcessDPIAware
IsWindow
IsWindowUnicode
IsWindowVisible
IsZoomed
LockSetForegroundWindow
LogicalToPhysicalPoint
MoveWindow
OpenIcon
PhysicalToLogicalPoint
RealChildWindowFromPoint
RealGetWindowClass
RegisterShellHookWindow
SetForegroundWindow
SetLayeredWindowAttributes
SetParent
SetProcessDefaultLayout
SetProcessDPIAware
SetSysColors
SetWindowDisplayAffinity
SetWindowFeedbackSettings
SetWindowPlacement
SetWindowPos
SetWindowText
ShowOwnedPopups
ShowWindow
ShowWindowAsync
SoundSentry
SwitchToThisWindow
TileWindows
UpdateLayeredWindow
UpdateLayeredWindowIndirect
WindowFromPhysicalPoint
WindowFromPoint
WinMain

[Device Context]
CancelDC;Cancels any pending operation on the specified device context.
ChangeDisplaySettings;Changes the settings of the default display device to the specified graphics mode.
ChangeDisplaySettingsEx;Changes the settings of the specified display device to the specified graphics mode.
CreateCompatibleDC;Creates a memory device context compatible with the specified device.
CreateDC;Creates a device context for a device using the specified name.
CreateIC;Creates an information context for the specified device.
DeleteDC;Deletes the specified device context.
DeleteObject;Deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object.
DeviceCapabilities;Retrieves the capabilities of a printer device driver.
DrawEscape;Provides drawing capabilities of the specified video display that are not directly available through the graphics device interface.
EnumDisplayDevices;Retrieves information about the display devices in a system.
EnumDisplaySettings;Retrieves information about one of the graphics modes for a display device.
EnumDisplaySettingsEx;Retrieves information about one of the graphics modes for a display device.
EnumObjects;Enumerates the pens or brushes available for the specified device context.
EnumObjectsProc;An application-defined callback function used with the EnumObjects function.
GetCurrentObject;Retrieves a handle to an object of the specified type that has been selected into the specified device context.
GetDC;Retrieves a handle to a display device context for the client area of a specified window or for the entire screen.
GetDCBrushColor;Retrieves the current brush color for the specified device context.
GetDCEx;Retrieves a handle to a display device context for the client area of a specified window or for the entire screen.
GetDCOrgEx;Retrieves the final translation origin for a specified device context.
GetDCPenColor;Retrieves the current pen color for the specified device context.
GetDeviceCaps;Retrieves device-specific information for the specified device.
GetLayout;Retrieves the layout of a device context.
GetObject;Retrieves information for the specified graphics object.
GetObjectType;Retrieves the type of the specified object.
GetStockObject;Retrieves a handle to one of the stock pens, brushes, fonts, or palettes.
ReleaseDC;Releases a device context, freeing it for use by other applications.
ResetDC;Updates the specified printer or plotter device context using the specified information.
RestoreDC;Restores a device context to the specified state.
SaveDC;Saves the current state of the specified device context by copying data describing selected objects and graphic modes to a context stack.
SelectObject;Selects an object into the specified device context.
SetDCBrushColor;Sets the current device context brush color to the specified color value.
SetDCPenColor;Sets the current device context pen color to the specified color value.
SetLayout;Sets the layout for a device context.
WindowFromDC;Returns a handle to the window associated with a device context.

[Font and Text]
AddFontMemResourceEx;Adds an embedded font to the system font table.
AddFontResource;Adds a font resource to the system font table.
AddFontResourceEx;Adds a private or non-enumerable font to the system font table.
CreateFont;Creates a logical font.
CreateFontIndirect;Creates a logical font from a structure.
CreateFontIndirectEx;Creates a logical font from a structure.
DrawText;Draws formatted text in a rectangle.
DrawTextEx;Draws formatted text in rectangle.
EnumFontFamExProc;An application definedcallback function used with EnumFontFamiliesEx to process fonts.
EnumFontFamiliesEx;Enumerates all fonts in the system with certain characteristics.
ExtTextOut;Draws a character string.
GetAspectRatioFilterEx;Gets the setting for the aspect-ratio filter.
GetCharABCWidths;Gets the widths of consecutive characters from the TrueType font.
GetCharABCWidthsFloat;Gets the widths of consecutive characters from the current font.
GetCharABCWidthsI;Gets the widths of consecutive glyph indices or from an array of glyph indices from the TrueType font.
GetCharacterPlacement;Gets information about a character string.
GetCharWidth32;Gets the widths of consecutive characters from the current font.
GetCharWidthFloat;Gets the fractional widths of consecutive characters from the current font.
GetCharWidthI;Gets the widths of consecutive glyph indices or an array of glyph indices from the current font.
GetFontData;Gets metric data for a TrueType font.
GetFontLanguageInfo;Returns information about the selected font for a display context.
GetFontUnicodeRanges;Tells which Unicode characters are supported by a font.
GetGlyphIndices;Translates a string into an array of glyph indices.
GetGlyphOutline;Gets the outline or bitmap for a character in the TrueType font.
GetKerningPairs;Gets the character-kerning pairs for a font.
GetOutlineTextMetrics;Gets text metrics for TrueType fonts.
GetRasterizerCaps;Tells whether TrueType fonts are installed.
GetTabbedTextExtent;Computes the width and height of a character string, including tabs.
GetTextAlign;Gets the text-alignment setting for a device context.
GetTextCharacterExtra;Gets the current intercharacter spacing for a device context.
GetTextColor;Gets the text color for a device context.
GetTextExtentExPoint;Gets the number of characters in a string that will fit within a space.
GetTextExtentExPointI;Gets the number of glyph indices that will fit within a space.
GetTextExtentPoint32;Computes the width and height of a string of text.
GetTextExtentPointI;Computes the width and height of an array of glyph indices.
GetTextFace;Gets the name of the font that is selected into a device context.
GetTextMetrics;Fills a buffer with the metrics for a font.
PolyTextOut;Draws several strings using the font and text colors in a device context.
RemoveFontMemResourceEx;Removes a font whose source was embedded in a document from the system font table.
RemoveFontResource;Removes the fonts in a file from the system font table.
RemoveFontResourceEx;Removes a private or non-enumerable font from the system font table.
SetMapperFlags;Alters the algorithm used to map logical fonts to physical fonts.
SetTextAlign;Sets the text-alignment flags for a device context.
SetTextCharacterExtra;Sets the intercharacter spacing.
SetTextColor;Sets the text color for a device context.
SetTextJustification;Specifies the amount of space the system should add to the break characters in a string.
TabbedTextOut;Writes a character string at a location, expanding tabs to specified values.
TextOut;Writes a character string at a location.

[Large Integer]
Int32x32To64;Multiplies two signed 32-bit integers, returning a signed 64-bit integer result.
Int64ShllMod32;Performs a left logical shift operation on an unsigned 64-bit integer value. The function provides improved shifting code for left logical shifts where the shift count is in the range 0-31.
Int64ShraMod32;Performs a right arithmetic shift operation on a signed 64-bit integer value. The function provides improved shifting code for right arithmetic shifts where the shift count is in the range 0-31.
Int64ShrlMod32;Performs a right logical shift operation on an unsigned 64-bit integer value. The function provides improved shifting code for right logical shifts where the shift count is in the range 0-31.
MulDiv;Multiplies two 32-bit values and then divides the 64-bit result by a third 32-bit value.
Multiply128;Multiplies two 64-bit integers to produce a 128-bit integer.
MultiplyExtract128;Multiplies two 64-bit integers to produce a 128-bit integer, shifts the product to the right by the specified number of bits, and returns the low 64 bits of the result.
MultiplyHigh;Multiplies two 64-bit integers to produce a 128-bit integer and gets the high 64 bits.
PopulationCount64;Counts the number of one bits (population count) in a 64-bit unsigned integer.
ShiftLeft128;Shifts 128-bit left.
ShiftRight128;Shifts 128-bit right.
UInt32x32To64;Multiplies two unsigned 32-bit integers, returning an unsigned 64-bit integer result.
UnsignedMultiply128;Multiplies two unsigned 64-bit integers to produce an unsigned 128-bit integer.
UnsignedMultiplyExtract128;Multiplies two unsigned 64-bit integers to produce an unsigned 128-bit integer, shifts the product to the right by the specified number of bits, and returns the low 64 bits of the result.
UnsignedMulitplyHigh;Multiplies two 64-bit integers to produce a 128-bit integer and gets the high unsigned 64 bits.

[Image List]
HIMAGELIST_QueryInterface
ImageList_Add
ImageList_AddMasked
ImageList_BeginDrag
ImageList_CoCreateInstance
ImageList_Copy
ImageList_Create
ImageList_Destroy
ImageList_DragEnter
ImageList_DragLeave
ImageList_DragMove
ImageList_DragShowNolock
ImageList_Draw
ImageList_DrawEx
ImageList_DrawIndirect
ImageList_Duplicate
ImageList_EndDrag
ImageList_GetBkColor
ImageList_GetDragImage
ImageList_GetIcon
ImageList_GetIconSize
ImageList_GetImageCount
ImageList_GetImageInfo
ImageList_LoadImage
ImageList_Merge
ImageList_Read
ImageList_ReadEx
ImageList_Remove
ImageList_Replace
ImageList_ReplaceIcon
ImageList_SetBkColor
ImageList_SetColorTable
ImageList_SetDragCursorImage
ImageList_SetIconSize
ImageList_SetImageCount
ImageList_SetOverlayImage
ImageList_Write
ImageList_WriteEx

[Cursor]
ClipCursor
CopyCursor
CreateCursor
DestroyCursor
GetClipCursor
GetCursor
GetCursorInfo
GetCursorPos
GetPhysicalCursorPos
LoadCursor
LoadCursorFromFile
SetCursor
SetCursorPos
SetPhysicalCursorPos
SetSystemCursor
ShowCursor

[Button Control]
CheckDlgButton
CheckRadioButton
IsDlgButtonChecked

[Menu]
AppendMenu
CheckMenuItem
CheckMenuRadioItem
CreateMenu
CreatePopupMenu
DeleteMenu
DestroyMenu
DrawMenuBar
EnableMenuItem
EndMenu
GetMenu
GetMenuBarInfo
GetMenuCheckMarkDimensions
GetMenuDefaultItem
GetMenuInfo
GetMenuItemCount
GetMenuItemID
GetMenuItemInfo
GetMenuItemRect
GetMenuState
GetMenuString
GetSubMenu
GetSystemMenu
HiliteMenuItem
InsertMenu
InsertMenuItem
IsMenu
LoadMenu
LoadMenuIndirect
MenuItemFromPoint
ModifyMenu
RemoveMenu
SetMenu
SetMenuDefaultItem
SetMenuInfo
SetMenuItemBitmaps
SetMenuItemInfo
TrackPopupMenu
TrackPopupMenuEx

[Coordinate Space and Transformation]
ClientToScreen;Converts the client-area coordinates of a specified point to screen coordinates.
CombineTransform;Concatenates two world-space to page-space transformations.
DPtoLP;Converts device coordinates into logical coordinates.
GetCurrentPositionEx;Retrieves the current position in logical coordinates.
GetDisplayAutoRotationPreferences;Gets the orientation preferences of the display.
GetGraphicsMode;Retrieves the current graphics mode for the specified device context.
GetMapMode;Retrieves the current mapping mode.
GetViewportExtEx;Retrieves the x-extent and y-extent of the current viewport for the specified device context.
GetViewportOrgEx;Retrieves the x-coordinates and y-coordinates of the viewport origin for the specified device context.
GetWindowExtEx;Retrieves the x-extent and y-extent of the window for the specified device context.
GetWindowOrgEx;Retrieves the x-coordinates and y-coordinates of the window origin for the specified device context.
GetWorldTransform;Retrieves the current world-space to page-space transformation.
LPtoDP;Converts logical coordinates into device coordinates.
MapWindowPoints;Converts (maps) a set of points from a coordinate space relative to one window to a coordinate space relative to another window.
ModifyWorldTransform;Changes the world transformation for a device context using the specified mode.
OffsetViewportOrgEx;Modifies the viewport origin for a device context using the specified horizontal and vertical offsets.
OffsetWindowOrgEx;Modifies the window origin for a device context using the specified horizontal and vertical offsets.
ScaleViewportExtEx;Modifies the viewport for a device context using the ratios formed by the specified multiplicands and divisors.
ScaleWindowExtEx;Modifies the window for a device context using the ratios formed by the specified multiplicands and divisors.
ScreenToClient;Converts the screen coordinates of a specified point on the screen to client coordinates.
SetDisplayAutoRotationPreferences;Sets the orientation preferences of the display.
SetGraphicsMode;Sets the graphics mode for the specified device context.
SetMapMode;Sets the mapping mode of the specified device context.
SetViewportExtEx;Sets the horizontal and vertical extents of the viewport for a device context by using the specified values.
SetViewportOrgEx;Specifies which device point maps to the window origin (0,0).
SetWindowExtEx;Sets the horizontal and vertical extents of the window for a device context by using the specified values.
SetWindowOrgEx;Specifies which window point maps to the viewport origin (0,0).
SetWorldTransform;Sets a two-dimensional linear transformation between world space and page space for the specified device context.

[Filled Shape]
Chord;Draws an area bounded by an ellipse and a line segment.
Ellipse;Draws an ellipse.
FillRect;Fills a rectangle using a brush.
FrameRect;Draws a border around a rectangle using a brush.
InvertRect;Inverts the color values of the pixels in a rectangle.
Pie;Draws a pie-shaped wedge bounded by an ellipse and two radials.
Polygon;Draws a polygon.
PolyPolygon;draws a series of closed polygons.
Rectangle;Draws a rectangle.
RoundRect;Draws a rectangle with rounded corners.

[Configuration]
GetSystemMetrics
SystemParametersInfo

[Clipboard]
AddClipboardFormatListener
ChangeClipboardChain
CloseClipboard
CountClipboardFormats
EmptyClipboard
EnumClipboardFormats
GetClipboardData
GetClipboardFormatName
GetClipboardOwner
GetClipboardSequenceNumber
GetClipboardViewer
GetOpenClipboardWindow
GetPriorityClipboardFormat
GetUpdatedClipboardFormats
IsClipboardFormatAvailable
OpenClipboard
RegisterClipboardFormat
RemoveClipboardFormatListener
SetClipboardData
SetClipboardViewer

[Keyboard Input]
ActivateKeyboardLayout
BlockInput
EnableWindow
GetActiveWindow
GetAsyncKeyState
GetFocus
GetKBCodePage
GetKeyboardLayout
GetKeyboardLayoutList
GetKeyboardLayoutName
GetKeyboardState
GetKeyboardType
GetKeyNameText
GetKeyState
GetLastInputInfo
IsWindowEnabled
keybd_event
LoadKeyboardLayout
MapVirtualKey
MapVirtualKeyEx
OemKeyScan
RegisterHotKey
SendInput
SetActiveWindow
SetFocus
SetKeyboardState
ToAscii
ToAsciiEx
ToUnicode
ToUnicodeEx
UnloadKeyboardLayout
UnregisterHotKey
VkKeyScan
VkKeyScanEx

[Window Procedure]
CallWindowProc;Passes message information to the specified window procedure.
DefWindowProc;Calls the default window procedure to provide default processing for any window messages that an application does not process.
WindowProc;An application-defined function that processes messages sent to a window. The WNDPROC type defines a pointer to this callback function.

[Bitmap]
AlphaBlend;Displays a bitmap with transparent or semitransparent pixels.
BitBlt;Performs a bit-block transfer.
CreateBitmap;Creates a bitmap.
CreateBitmapIndirect;Creates a bitmap.
CreateCompatibleBitmap;Creates a bitmap compatible with a device.
CreateDIBitmap;Creates a device-dependent bitmap (DDB) from a DIB.
CreateDIBSection;Creates a DIB that applications can write to directly.
ExtFloodFill;Fills an area of the display surface with the current brush.
GetBitmapDimensionEx;Gets the dimensions of a bitmap.
GetDIBColorTable;Retrieves RGB color values from a DIB section bitmap.
GetDIBits;Copies a bitmap into a buffer.
GetPixel;Gets the RGB color value of the pixel at a given coordinate.
GetStretchBltMode;Gets the current stretching mode.
GradientFill;Fills rectangle and triangle structures.
LoadBitmap;Loads a bitmap from a module's executable file.
MaskBlt;Combines the color data in the source and destination bitmaps.
PlgBlt;Performs a bit-block transfer.
SetBitmapDimensionEx;Sets the preferred dimensions to a bitmap.
SetDIBColorTable;Sets RGB values in a DIB.
SetDIBits;Sets the pixels in a bitmap using color data from a DIB.
SetDIBitsToDevice;Sets the pixels in a rectangle using color data from a DIB.
SetPixel;Sets the color for a pixel.
SetPixelV;Sets a pixel to the best approximation of a color.
SetStretchBltMode;Sets the bitmap stretching mode.
StretchBlt;Copies a bitmap and stretches or compresses it.
StretchDIBits;Copies the color data in a DIB.
TransparentBlt;Performs a bit-block transfer of color data.
